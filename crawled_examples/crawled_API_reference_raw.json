[
{
    "module name": "matplotlib",
    "class": [
        {
            "class name": "class matplotlib.RcParams(*args, **kwargs)",
            "class text": "A dict-like key-value store for config parameters, including validation.\nValidating functions are defined and associated with rc parameters in\nmatplotlib.rcsetup.\nThe list of rcParams is:\n\n_internal.classic_mode\nagg.path.chunksize\nanimation.bitrate\nanimation.codec\nanimation.convert_args\nanimation.convert_path\nanimation.embed_limit\nanimation.ffmpeg_args\nanimation.ffmpeg_path\nanimation.frame_format\nanimation.html\nanimation.writer\naxes.autolimit_mode\naxes.axisbelow\naxes.edgecolor\naxes.facecolor\naxes.formatter.limits\naxes.formatter.min_exponent\naxes.formatter.offset_threshold\naxes.formatter.use_locale\naxes.formatter.use_mathtext\naxes.formatter.useoffset\naxes.grid\naxes.grid.axis\naxes.grid.which\naxes.labelcolor\naxes.labelpad\naxes.labelsize\naxes.labelweight\naxes.linewidth\naxes.prop_cycle\naxes.spines.bottom\naxes.spines.left\naxes.spines.right\naxes.spines.top\naxes.titlecolor\naxes.titlelocation\naxes.titlepad\naxes.titlesize\naxes.titleweight\naxes.titley\naxes.unicode_minus\naxes.xmargin\naxes.ymargin\naxes.zmargin\naxes3d.grid\naxes3d.xaxis.panecolor\naxes3d.yaxis.panecolor\naxes3d.zaxis.panecolor\nbackend\nbackend_fallback\nboxplot.bootstrap\nboxplot.boxprops.color\nboxplot.boxprops.linestyle\nboxplot.boxprops.linewidth\nboxplot.capprops.color\nboxplot.capprops.linestyle\nboxplot.capprops.linewidth\nboxplot.flierprops.color\nboxplot.flierprops.linestyle\nboxplot.flierprops.linewidth\nboxplot.flierprops.marker\nboxplot.flierprops.markeredgecolor\nboxplot.flierprops.markeredgewidth\nboxplot.flierprops.markerfacecolor\nboxplot.flierprops.markersize\nboxplot.meanline\nboxplot.meanprops.color\nboxplot.meanprops.linestyle\nboxplot.meanprops.linewidth\nboxplot.meanprops.marker\nboxplot.meanprops.markeredgecolor\nboxplot.meanprops.markerfacecolor\nboxplot.meanprops.markersize\nboxplot.medianprops.color\nboxplot.medianprops.linestyle\nboxplot.medianprops.linewidth\nboxplot.notch\nboxplot.patchartist\nboxplot.showbox\nboxplot.showcaps\nboxplot.showfliers\nboxplot.showmeans\nboxplot.vertical\nboxplot.whiskerprops.color\nboxplot.whiskerprops.linestyle\nboxplot.whiskerprops.linewidth\nboxplot.whiskers\ncontour.algorithm\ncontour.corner_mask\ncontour.linewidth\ncontour.negative_linestyle\ndate.autoformatter.day\ndate.autoformatter.hour\ndate.autoformatter.microsecond\ndate.autoformatter.minute\ndate.autoformatter.month\ndate.autoformatter.second\ndate.autoformatter.year\ndate.converter\ndate.epoch\ndate.interval_multiples\ndocstring.hardcopy\nerrorbar.capsize\nfigure.autolayout\nfigure.constrained_layout.h_pad\nfigure.constrained_layout.hspace\nfigure.constrained_layout.use\nfigure.constrained_layout.w_pad\nfigure.constrained_layout.wspace\nfigure.dpi\nfigure.edgecolor\nfigure.facecolor\nfigure.figsize\nfigure.frameon\nfigure.hooks\nfigure.labelsize\nfigure.labelweight\nfigure.max_open_warning\nfigure.raise_window\nfigure.subplot.bottom\nfigure.subplot.hspace\nfigure.subplot.left\nfigure.subplot.right\nfigure.subplot.top\nfigure.subplot.wspace\nfigure.titlesize\nfigure.titleweight\nfont.cursive\nfont.family\nfont.fantasy\nfont.monospace\nfont.sans-serif\nfont.serif\nfont.size\nfont.stretch\nfont.style\nfont.variant\nfont.weight\ngrid.alpha\ngrid.color\ngrid.linestyle\ngrid.linewidth\nhatch.color\nhatch.linewidth\nhist.bins\nimage.aspect\nimage.cmap\nimage.composite_image\nimage.interpolation\nimage.lut\nimage.origin\nimage.resample\ninteractive\nkeymap.back\nkeymap.copy\nkeymap.forward\nkeymap.fullscreen\nkeymap.grid\nkeymap.grid_minor\nkeymap.help\nkeymap.home\nkeymap.pan\nkeymap.quit\nkeymap.quit_all\nkeymap.save\nkeymap.xscale\nkeymap.yscale\nkeymap.zoom\nlegend.borderaxespad\nlegend.borderpad\nlegend.columnspacing\nlegend.edgecolor\nlegend.facecolor\nlegend.fancybox\nlegend.fontsize\nlegend.framealpha\nlegend.frameon\nlegend.handleheight\nlegend.handlelength\nlegend.handletextpad\nlegend.labelcolor\nlegend.labelspacing\nlegend.loc\nlegend.markerscale\nlegend.numpoints\nlegend.scatterpoints\nlegend.shadow\nlegend.title_fontsize\nlines.antialiased\nlines.color\nlines.dash_capstyle\nlines.dash_joinstyle\nlines.dashdot_pattern\nlines.dashed_pattern\nlines.dotted_pattern\nlines.linestyle\nlines.linewidth\nlines.marker\nlines.markeredgecolor\nlines.markeredgewidth\nlines.markerfacecolor\nlines.markersize\nlines.scale_dashes\nlines.solid_capstyle\nlines.solid_joinstyle\nmacosx.window_mode\nmarkers.fillstyle\nmathtext.bf\nmathtext.bfit\nmathtext.cal\nmathtext.default\nmathtext.fallback\nmathtext.fontset\nmathtext.it\nmathtext.rm\nmathtext.sf\nmathtext.tt\npatch.antialiased\npatch.edgecolor\npatch.facecolor\npatch.force_edgecolor\npatch.linewidth\npath.effects\npath.simplify\npath.simplify_threshold\npath.sketch\npath.snap\npcolor.shading\npcolormesh.snap\npdf.compression\npdf.fonttype\npdf.inheritcolor\npdf.use14corefonts\npgf.preamble\npgf.rcfonts\npgf.texsystem\npolaraxes.grid\nps.distiller.res\nps.fonttype\nps.papersize\nps.useafm\nps.usedistiller\nsavefig.bbox\nsavefig.directory\nsavefig.dpi\nsavefig.edgecolor\nsavefig.facecolor\nsavefig.format\nsavefig.orientation\nsavefig.pad_inches\nsavefig.transparent\nscatter.edgecolors\nscatter.marker\nsvg.fonttype\nsvg.hashsalt\nsvg.image_inline\ntext.antialiased\ntext.color\ntext.hinting\ntext.hinting_factor\ntext.kerning_factor\ntext.latex.preamble\ntext.parse_math\ntext.usetex\ntimezone\ntk.window_focus\ntoolbar\nwebagg.address\nwebagg.open_in_browser\nwebagg.port\nwebagg.port_retries\nxaxis.labellocation\nxtick.alignment\nxtick.bottom\nxtick.color\nxtick.direction\nxtick.labelbottom\nxtick.labelcolor\nxtick.labelsize\nxtick.labeltop\nxtick.major.bottom\nxtick.major.pad\nxtick.major.size\nxtick.major.top\nxtick.major.width\nxtick.minor.bottom\nxtick.minor.ndivs\nxtick.minor.pad\nxtick.minor.size\nxtick.minor.top\nxtick.minor.visible\nxtick.minor.width\nxtick.top\nyaxis.labellocation\nytick.alignment\nytick.color\nytick.direction\nytick.labelcolor\nytick.labelleft\nytick.labelright\nytick.labelsize\nytick.left\nytick.major.left\nytick.major.pad\nytick.major.right\nytick.major.size\nytick.major.width\nytick.minor.left\nytick.minor.ndivs\nytick.minor.pad\nytick.minor.right\nytick.minor.size\nytick.minor.visible\nytick.minor.width\nytick.right\n\n\nSee also\n\nThe matplotlibrc file\n\n\n\n",
            "class method": [
                {
                    "method name": "find_all(pattern)",
                    "method text": "Return the subset of this RcParams dictionary whose keys match,\nusing re.search(), the given pattern.\n\nNote\nChanges to the returned dictionary are not propagated to\nthe parent RcParams dictionary.\n\n"
                },
                {
                    "method name": "copy()",
                    "method text": "Copy this RcParams instance.\n"
                }
            ],
            "class property": [],
            "class attribute": []
        },
        {
            "class name": "class matplotlib.MatplotlibDeprecationWarning",
            "class text": "A class for issuing deprecation warnings for Matplotlib users.\n",
            "class method": [],
            "class property": [],
            "class attribute": []
        }
    ],
    "function": [
        {
            "function name": "matplotlib.use(backend, *, force=True)",
            "function text": "Select the backend used for rendering and GUI integration.\nIf pyplot is already imported, switch_backend is used\nand if the new backend is different than the current backend, all Figures\nwill be closed.\n\nParameters:\n\nbackendstrThe backend to switch to. This can either be one of the standard\nbackend names, which are case-insensitive:\n\ninteractive backends:\nGTK3Agg, GTK3Cairo, GTK4Agg, GTK4Cairo, MacOSX, nbAgg, QtAgg,\nQtCairo, TkAgg, TkCairo, WebAgg, WX, WXAgg, WXCairo, Qt5Agg, Qt5Cairo\nnon-interactive backends:\nagg, cairo, pdf, pgf, ps, svg, template\n\nor a string of the form: module://my.module.name.\nSwitching to an interactive backend is not possible if an unrelated\nevent loop has already been started (e.g., switching to GTK3Agg if a\nTkAgg window has already been opened). Switching to a non-interactive\nbackend is always possible.\n\nforcebool, default: TrueIf True (the default), raise an ImportError if the backend cannot be\nset up (either because it fails to import, or because an incompatible\nGUI interactive framework is already running); if False, silently\nignore the failure.\n\n\n\n\n\nSee also\n\nBackends\nmatplotlib.get_backend\nmatplotlib.pyplot.switch_backend\n\n\n"
        },
        {
            "function name": "matplotlib.get_backend()",
            "function text": "Return the name of the current backend.\n\nSee also\n\nmatplotlib.use\n\n\n"
        },
        {
            "function name": "matplotlib.interactive(b)",
            "function text": "Set whether to redraw after every plotting command (e.g. pyplot.xlabel).\n"
        },
        {
            "function name": "matplotlib.is_interactive()",
            "function text": "Return whether to redraw after every plotting command.\n\nNote\nThis function is only intended for use in backends. End users should\nuse pyplot.isinteractive instead.\n\n"
        },
        {
            "function name": "matplotlib.rc_context(rc=None, fname=None)",
            "function text": "Return a context manager for temporarily changing rcParams.\nThe rcParams[\"backend\"] will not be reset by the context manager.\nrcParams changed both through the context manager invocation and\nin the body of the context will be reset on context exit.\n\nParameters:\n\nrcdictThe rcParams to temporarily set.\n\nfnamestr or path-likeA file with Matplotlib rc settings. If both fname and rc are given,\nsettings from rc take precedence.\n\n\n\n\n\nSee also\n\nThe matplotlibrc file\n\n\nExamples\nPassing explicit values via a dict:\nwith mpl.rc_context({'interactive': False}):\n    fig, ax = plt.subplots()\n    ax.plot(range(3), range(3))\n    fig.savefig('example.png')\n    plt.close(fig)\n\n\nLoading settings from a file:\nwith mpl.rc_context(fname='print.rc'):\n    plt.plot(x, y)  # uses 'print.rc'\n\n\nSetting in the context body:\nwith mpl.rc_context():\n    # will be reset\n    mpl.rcParams['lines.linewidth'] = 5\n    plt.plot(x, y)\n\n\n"
        },
        {
            "function name": "matplotlib.rc(group, **kwargs)",
            "function text": "Set the current rcParams. group is the grouping for the rc, e.g.,\nfor lines.linewidth the group is lines, for\naxes.facecolor, the group is axes, and so on. Group may\nalso be a list or tuple of group names, e.g., (xtick, ytick).\nkwargs is a dictionary attribute name/value pairs, e.g.,:\nrc('lines', linewidth=2, color='r')\n\n\nsets the current rcParams and is equivalent to:\nrcParams['lines.linewidth'] = 2\nrcParams['lines.color'] = 'r'\n\n\nThe following aliases are available to save typing for interactive users:\n\n\nAlias\nProperty\n\n\n\n'lw'\n'linewidth'\n\n'ls'\n'linestyle'\n\n'c'\n'color'\n\n'fc'\n'facecolor'\n\n'ec'\n'edgecolor'\n\n'mew'\n'markeredgewidth'\n\n'aa'\n'antialiased'\n\n\n\nThus you could abbreviate the above call as:\nrc('lines', lw=2, c='r')\n\n\nNote you can use python's kwargs dictionary facility to store\ndictionaries of default parameters. e.g., you can customize the\nfont rc as follows:\nfont = {'family' : 'monospace',\n        'weight' : 'bold',\n        'size'   : 'larger'}\nrc('font', **font)  # pass in the font dict as kwargs\n\n\nThis enables you to easily switch between several configurations. Use\nmatplotlib.style.use('default') or rcdefaults() to\nrestore the default rcParams after changes.\nNotes\nSimilar functionality is available by using the normal dict interface, i.e.\nrcParams.update({\"lines.linewidth\": 2, ...}) (but rcParams.update\ndoes not support abbreviations or grouping).\n"
        },
        {
            "function name": "matplotlib.rcdefaults()",
            "function text": "Restore the rcParams from Matplotlib's internal default style.\nStyle-blacklisted rcParams (defined in\nmatplotlib.style.core.STYLE_BLACKLIST) are not updated.\n\nSee also\n\nmatplotlib.rc_file_defaultsRestore the rcParams from the rc file originally loaded by Matplotlib.\n\nmatplotlib.style.useUse a specific style file. Call style.use('default') to restore the default style.\n\n\n\n"
        },
        {
            "function name": "matplotlib.rc_file_defaults()",
            "function text": "Restore the rcParams from the original rc file loaded by Matplotlib.\nStyle-blacklisted rcParams (defined in\nmatplotlib.style.core.STYLE_BLACKLIST) are not updated.\n"
        },
        {
            "function name": "matplotlib.rc_file(fname, *, use_default_template=True)",
            "function text": "Update rcParams from file.\nStyle-blacklisted rcParams (defined in\nmatplotlib.style.core.STYLE_BLACKLIST) are not updated.\n\nParameters:\n\nfnamestr or path-likeA file with Matplotlib rc settings.\n\nuse_default_templateboolIf True, initialize with default parameters before updating with those\nin the given file. If False, the current configuration persists\nand only the parameters specified in the file are updated.\n\n\n\n\n"
        },
        {
            "function name": "matplotlib.rc_params(fail_on_error=False)",
            "function text": "Construct a RcParams instance from the default Matplotlib rc file.\n"
        },
        {
            "function name": "matplotlib.rc_params_from_file(fname, fail_on_error=False, use_default_template=True)",
            "function text": "Construct a RcParams from file fname.\n\nParameters:\n\nfnamestr or path-likeA file with Matplotlib rc settings.\n\nfail_on_errorboolIf True, raise an error when the parser fails to convert a parameter.\n\nuse_default_templateboolIf True, initialize with default parameters before updating with those\nin the given file. If False, the configuration class only contains the\nparameters specified in the file. (Useful for updating dicts.)\n\n\n\n\n"
        },
        {
            "function name": "matplotlib.get_configdir()",
            "function text": "Return the string path of the configuration directory.\nThe directory is chosen as follows:\n\nIf the MPLCONFIGDIR environment variable is supplied, choose that.\nOn Linux, follow the XDG specification and look first in\n$XDG_CONFIG_HOME, if defined, or $HOME/.config. On other\nplatforms, choose $HOME/.matplotlib.\nIf the chosen directory exists and is writable, use that as the\nconfiguration directory.\nElse, create a temporary directory, and use it as the configuration\ndirectory.\n\n"
        },
        {
            "function name": "matplotlib.matplotlib_fname()",
            "function text": "Get the location of the config file.\nThe file location is determined in the following order\n\n$PWD/matplotlibrc\n$MATPLOTLIBRC if it is not a directory\n$MATPLOTLIBRC/matplotlibrc\n$MPLCONFIGDIR/matplotlibrc\n\nOn Linux,\n$XDG_CONFIG_HOME/matplotlib/matplotlibrc (if $XDG_CONFIG_HOME\nis defined)\nor $HOME/.config/matplotlib/matplotlibrc (if $XDG_CONFIG_HOME\nis not defined)\n\n\n\n\nOn other platforms,\n- $HOME/.matplotlib/matplotlibrc if $HOME is defined\nLastly, it looks in $MATPLOTLIBDATA/matplotlibrc, which should always\nexist.\n\n"
        },
        {
            "function name": "matplotlib.get_data_path()",
            "function text": "Return the path to Matplotlib data.\n"
        },
        {
            "function name": "matplotlib.set_loglevel(level)",
            "function text": "Configure Matplotlib's logging levels.\nMatplotlib uses the standard library logging framework under the root\nlogger 'matplotlib'. This is a helper function to:\n\nset Matplotlib's root logger level\nset the root logger handler's level, creating the handler\nif it does not exist yet\n\nTypically, one should call set_loglevel(\"info\") or\nset_loglevel(\"debug\") to get additional debugging information.\nUsers or applications that are installing their own logging handlers\nmay want to directly manipulate logging.getLogger('matplotlib') rather\nthan use this function.\n\nParameters:\n\nlevel{\"notset\", \"debug\", \"info\", \"warning\", \"error\", \"critical\"}The log level of the handler.\n\n\n\n\nNotes\nThe first time this function is called, an additional handler is attached\nto Matplotlib's root handler; this handler is reused every time and this\nfunction simply manipulates the logger and handler's level.\n"
        }
    ],
    "exception": []
},
{
    "module name": "matplotlib.afm",
    "class": [
        {
            "class name": "class matplotlib._afm.AFM(fh)",
            "class text": "Bases: object\nParse the AFM file in file object fh.\n\n",
            "class method": [
                {
                    "method name": "get_angle()",
                    "method text": "Return the fontangle as float.\n"
                },
                {
                    "method name": "get_bbox_char(c, isord=False)",
                    "method text": ""
                },
                {
                    "method name": "get_capheight()",
                    "method text": "Return the cap height as float.\n"
                },
                {
                    "method name": "get_familyname()",
                    "method text": "Return the font family name, e.g., 'Times'.\n"
                },
                {
                    "method name": "get_fontname()",
                    "method text": "Return the font name, e.g., 'Times-Roman'.\n"
                },
                {
                    "method name": "get_fullname()",
                    "method text": "Return the font full name, e.g., 'Times-Roman'.\n"
                },
                {
                    "method name": "get_height_char(c, isord=False)",
                    "method text": "Get the bounding box (ink) height of character c (space is 0).\n"
                },
                {
                    "method name": "get_horizontal_stem_width()",
                    "method text": "Return the standard horizontal stem width as float, or None if\nnot specified in AFM file.\n"
                },
                {
                    "method name": "get_kern_dist(c1, c2)",
                    "method text": "Return the kerning pair distance (possibly 0) for chars c1 and c2.\n"
                },
                {
                    "method name": "get_kern_dist_from_name(name1, name2)",
                    "method text": "Return the kerning pair distance (possibly 0) for chars\nname1 and name2.\n"
                },
                {
                    "method name": "get_name_char(c, isord=False)",
                    "method text": "Get the name of the character, i.e., ';' is 'semicolon'.\n"
                },
                {
                    "method name": "get_str_bbox(s)",
                    "method text": "Return the string bounding box.\n"
                },
                {
                    "method name": "get_str_bbox_and_descent(s)",
                    "method text": "Return the string bounding box and the maximal descent.\n"
                },
                {
                    "method name": "get_underline_thickness()",
                    "method text": "Return the underline thickness as float.\n"
                },
                {
                    "method name": "get_vertical_stem_width()",
                    "method text": "Return the standard vertical stem width as float, or None if\nnot specified in AFM file.\n"
                },
                {
                    "method name": "get_weight()",
                    "method text": "Return the font weight, e.g., 'Bold' or 'Roman'.\n"
                },
                {
                    "method name": "get_width_char(c, isord=False)",
                    "method text": "Get the width of the character from the character metric WX field.\n"
                },
                {
                    "method name": "get_width_from_char_name(name)",
                    "method text": "Get the width of the character from a type1 character name.\n"
                },
                {
                    "method name": "get_xheight()",
                    "method text": "Return the xheight as float.\n"
                },
                {
                    "method name": "string_width_height(s)",
                    "method text": "Return the string width (including kerning) and string height\nas a (w, h) tuple.\n"
                }
            ],
            "class property": [
                {
                    "property name": "property family_name#",
                    "property text": "The font family name, e.g., 'Times'.\n"
                },
                {
                    "property name": "property postscript_name#",
                    "property text": ""
                }
            ],
            "class attribute": []
        },
        {
            "class name": "class matplotlib._afm.CharMetrics(width, name, bbox)",
            "class text": "Bases: tuple\nRepresents the character metrics of a single character.\nNotes\nThe fields do currently only describe a subset of character metrics\ninformation defined in the AFM standard.\nCreate new instance of CharMetrics(width, name, bbox)\n\n",
            "class method": [],
            "class property": [],
            "class attribute": [
                {
                    "attribute name": "bbox",
                    "attribute text": "The bbox of the character (B) as a tuple (llx, lly, urx, ury).\n"
                },
                {
                    "attribute name": "name",
                    "attribute text": "The character name (N).\n"
                },
                {
                    "attribute name": "width",
                    "attribute text": "The character width (WX).\n"
                }
            ]
        },
        {
            "class name": "class matplotlib._afm.CompositePart(name, dx, dy)",
            "class text": "Bases: tuple\nRepresents the information on a composite element of a composite char.\nCreate new instance of CompositePart(name, dx, dy)\n\n",
            "class method": [],
            "class property": [],
            "class attribute": [
                {
                    "attribute name": "dx",
                    "attribute text": "x-displacement of the part from the origin.\n"
                },
                {
                    "attribute name": "dy",
                    "attribute text": "y-displacement of the part from the origin.\n"
                },
                {
                    "attribute name": "name",
                    "attribute text": "Name of the part, e.g. 'acute'.\n"
                }
            ]
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation",
    "class": [],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.Animation",
    "class": [
        {
            "class name": "class matplotlib.animation.Animation(fig, event_source=None, blit=False)",
            "class text": "A base class for Animations.\nThis class is not usable as is, and should be subclassed to provide needed\nbehavior.\n\nNote\nYou must store the created Animation in a variable that lives as long\nas the animation should run. Otherwise, the Animation object will be\ngarbage-collected and the animation stops.\n\n\nParameters:\n\nfigFigureThe figure object used to get needed events, such as draw or resize.\n\nevent_sourceobject, optionalA class that can run a callback when desired events\nare generated, as well as be stopped and started.\nExamples include timers (see TimedAnimation) and file\nsystem notifications.\n\nblitbool, default: FalseWhether blitting is used to optimize drawing. If the backend does not\nsupport blitting, then this parameter has no effect.\n\n\n\n\n\nSee also\n\nFuncAnimation, ArtistAnimation\n\n\n\n",
            "class method": [
                {
                    "method name": "__init__(fig, event_source=None, blit=False)",
                    "method text": ""
                },
                {
                    "method name": "new_frame_seq()",
                    "method text": "Return a new sequence of frame information.\n"
                },
                {
                    "method name": "new_saved_frame_seq()",
                    "method text": "Return a new sequence of saved/cached frame information.\n"
                },
                {
                    "method name": "pause()",
                    "method text": "Pause the animation.\n"
                },
                {
                    "method name": "resume()",
                    "method text": "Resume the animation.\n"
                },
                {
                    "method name": "save(filename, writer=None, fps=None, dpi=None, codec=None, bitrate=None, extra_args=None, metadata=None, extra_anim=None, savefig_kwargs=None, *, progress_callback=None)",
                    "method text": "Save the animation as a movie file by drawing every frame.\n\nParameters:\n\nfilenamestrThe output filename, e.g., mymovie.mp4.\n\nwriterMovieWriter or str, default: rcParams[\"animation.writer\"] (default: 'ffmpeg')A MovieWriter instance to use or a key that identifies a\nclass to use, such as 'ffmpeg'.\n\nfpsint, optionalMovie frame rate (per second). If not set, the frame rate from the\nanimation's frame interval.\n\ndpifloat, default: rcParams[\"savefig.dpi\"] (default: 'figure')Controls the dots per inch for the movie frames. Together with\nthe figure's size in inches, this controls the size of the movie.\n\ncodecstr, default: rcParams[\"animation.codec\"] (default: 'h264').The video codec to use. Not all codecs are supported by a given\nMovieWriter.\n\nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)The bitrate of the movie, in kilobits per second. Higher values\nmeans higher quality movies, but increase the file size. A value\nof -1 lets the underlying movie encoder select the bitrate.\n\nextra_argslist of str or None, optionalExtra command-line arguments passed to the underlying movie encoder. These\narguments are passed last to the encoder, just before the output filename.\nThe default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for\nthe builtin writers.\n\nmetadatadict[str, str], default: {}Dictionary of keys and values for metadata to include in\nthe output file. Some keys that may be of use include:\ntitle, artist, genre, subject, copyright, srcform, comment.\n\nextra_animlist, default: []Additional Animation objects that should be included\nin the saved movie file. These need to be from the same\nFigure instance. Also, animation frames will\njust be simply combined, so there should be a 1:1 correspondence\nbetween the frames from the different animations.\n\nsavefig_kwargsdict, default: {}Keyword arguments passed to each savefig call used to\nsave the individual frames.\n\nprogress_callbackfunction, optionalA callback function that will be called for every frame to notify\nthe saving progress. It must have the signature\ndef func(current_frame: int, total_frames: int) -> Any\n\n\nwhere current_frame is the current frame number and total_frames is the\ntotal number of frames to be saved. total_frames is set to None, if the\ntotal number of frames cannot be determined. Return values may exist but are\nignored.\nExample code to write the progress to stdout:\nprogress_callback = lambda i, n: print(f'Saving frame {i}/{n}')\n\n\n\n\n\n\nNotes\nfps, codec, bitrate, extra_args and metadata are used to\nconstruct a MovieWriter instance and can only be passed if\nwriter is a string. If they are passed as non-None and writer\nis a MovieWriter, a RuntimeError will be raised.\n"
                },
                {
                    "method name": "to_html5_video(embed_limit=None)",
                    "method text": "Convert the animation to an HTML5 <video> tag.\nThis saves the animation as an h264 video, encoded in base64\ndirectly into the HTML5 video tag. This respects rcParams[\"animation.writer\"] (default: 'ffmpeg')\nand rcParams[\"animation.bitrate\"] (default: -1). This also makes use of the\ninterval to control the speed, and uses the repeat\nparameter to decide whether to loop.\n\nParameters:\n\nembed_limitfloat, optionalLimit, in MB, of the returned animation. No animation is created\nif the limit is exceeded.\nDefaults to rcParams[\"animation.embed_limit\"] (default: 20.0) = 20.0.\n\n\n\nReturns:\n\nstrAn HTML5 video tag with the animation embedded as base64 encoded\nh264 video.\nIf the embed_limit is exceeded, this returns the string\n\"Video too large to embed.\"\n\n\n\n\n"
                },
                {
                    "method name": "to_jshtml(fps=None, embed_frames=True, default_mode=None)",
                    "method text": "Generate HTML representation of the animation.\n\nParameters:\n\nfpsint, optionalMovie frame rate (per second). If not set, the frame rate from\nthe animation's frame interval.\n\nembed_framesbool, optional\ndefault_modestr, optionalWhat to do when the animation ends. Must be one of {'loop',\n'once', 'reflect'}. Defaults to 'loop' if the repeat\nparameter is True, otherwise 'once'.\n\n\n\n\n"
                }
            ],
            "class property": [],
            "class attribute": []
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.FuncAnimation",
    "class": [
        {
            "class name": "class matplotlib.animation.FuncAnimation(fig, func, frames=None, init_func=None, fargs=None, save_count=None, *, cache_frame_data=True, **kwargs)",
            "class text": "TimedAnimation subclass that makes an animation by repeatedly calling\na function func.\n\nNote\nYou must store the created Animation in a variable that lives as long\nas the animation should run. Otherwise, the Animation object will be\ngarbage-collected and the animation stops.\n\n\nParameters:\n\nfigFigureThe figure object used to get needed events, such as draw or resize.\n\nfunccallableThe function to call at each frame. The first argument will\nbe the next value in frames. Any additional positional\narguments can be supplied using functools.partial or via the fargs\nparameter.\nThe required signature is:\ndef func(frame, *fargs) -> iterable_of_artists\n\n\nIt is often more convenient to provide the arguments using\nfunctools.partial. In this way it is also possible to pass keyword\narguments. To pass a function with both positional and keyword\narguments, set all arguments as keyword arguments, just leaving the\nframe argument unset:\ndef func(frame, art, *, y=None):\n    ...\n\nani = FuncAnimation(fig, partial(func, art=ln, y='foo'))\n\n\nIf blit == True, func must return an iterable of all artists\nthat were modified or created. This information is used by the blitting\nalgorithm to determine which parts of the figure have to be updated.\nThe return value is unused if blit == False and may be omitted in\nthat case.\n\nframesiterable, int, generator function, or None, optionalSource of data to pass func and each frame of the animation\n\nIf an iterable, then simply use the values provided. If the\niterable has a length, it will override the save_count kwarg.\nIf an integer, then equivalent to passing range(frames)\nIf a generator function, then must have the signature:\ndef gen_function() -> obj\n\n\n\nIf None, then equivalent to passing itertools.count.\n\nIn all of these cases, the values in frames is simply passed through\nto the user-supplied func and thus can be of any type.\n\ninit_funccallable, optionalA function used to draw a clear frame. If not given, the results of\ndrawing from the first item in the frames sequence will be used. This\nfunction will be called once before the first frame.\nThe required signature is:\ndef init_func() -> iterable_of_artists\n\n\nIf blit == True, init_func must return an iterable of artists\nto be re-drawn. This information is used by the blitting algorithm to\ndetermine which parts of the figure have to be updated. The return\nvalue is unused if blit == False and may be omitted in that case.\n\nfargstuple or None, optionalAdditional arguments to pass to each call to func. Note: the use of\nfunctools.partial is preferred over fargs. See func for details.\n\nsave_countint, optionalFallback for the number of values from frames to cache. This is\nonly used if the number of frames cannot be inferred from frames,\ni.e. when it's an iterator without length or a generator.\n\nintervalint, default: 200Delay between frames in milliseconds.\n\nrepeat_delayint, default: 0The delay in milliseconds between consecutive animation runs, if\nrepeat is True.\n\nrepeatbool, default: TrueWhether the animation repeats when the sequence of frames is completed.\n\nblitbool, default: FalseWhether blitting is used to optimize drawing. Note: when using\nblitting, any animated artists will be drawn according to their zorder;\nhowever, they will be drawn on top of any previous artists, regardless\nof their zorder.\n\ncache_frame_databool, default: TrueWhether frame data is cached. Disabling cache might be helpful when\nframes contain large objects.\n\n\n\n\n\n",
            "class method": [
                {
                    "method name": "__init__(fig, func, frames=None, init_func=None, fargs=None, save_count=None, *, cache_frame_data=True, **kwargs)",
                    "method text": ""
                },
                {
                    "method name": "new_frame_seq()",
                    "method text": "Return a new sequence of frame information.\n"
                },
                {
                    "method name": "new_saved_frame_seq()",
                    "method text": "Return a new sequence of saved/cached frame information.\n"
                }
            ],
            "class property": [
                {
                    "property name": "property save_count",
                    "property text": ""
                }
            ],
            "class attribute": []
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.ArtistAnimation",
    "class": [
        {
            "class name": "class matplotlib.animation.ArtistAnimation(fig, artists, *args, **kwargs)",
            "class text": "TimedAnimation subclass that creates an animation by using a fixed\nset of Artist objects.\nBefore creating an instance, all plotting should have taken place\nand the relevant artists saved.\n\nNote\nYou must store the created Animation in a variable that lives as long\nas the animation should run. Otherwise, the Animation object will be\ngarbage-collected and the animation stops.\n\n\nParameters:\n\nfigFigureThe figure object used to get needed events, such as draw or resize.\n\nartistslistEach list entry is a collection of Artist objects that are made\nvisible on the corresponding frame. Other artists are made invisible.\n\nintervalint, default: 200Delay between frames in milliseconds.\n\nrepeat_delayint, default: 0The delay in milliseconds between consecutive animation runs, if\nrepeat is True.\n\nrepeatbool, default: TrueWhether the animation repeats when the sequence of frames is completed.\n\nblitbool, default: FalseWhether blitting is used to optimize drawing.\n\n\n\n\n\n",
            "class method": [
                {
                    "method name": "__init__(fig, artists, *args, **kwargs)",
                    "method text": ""
                }
            ],
            "class property": [],
            "class attribute": []
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.PillowWriter",
    "class": [
        {
            "class name": "class matplotlib.animation.PillowWriter(fps=5, metadata=None, codec=None, bitrate=None)",
            "class text": "\n",
            "class method": [
                {
                    "method name": "__init__(fps=5, metadata=None, codec=None, bitrate=None)",
                    "method text": ""
                },
                {
                    "method name": "finish()",
                    "method text": "Finish any processing for writing the movie.\n"
                },
                {
                    "method name": "grab_frame(**savefig_kwargs)",
                    "method text": "Grab the image information from the figure and save as a movie frame.\nAll keyword arguments in savefig_kwargs are passed on to the\nsavefig call that saves the figure. However, several\nkeyword arguments that are supported by savefig may not be\npassed as they are controlled by the MovieWriter:\n\n\ndpi, bbox_inches: These may not be passed because each frame of theanimation much be exactly the same size in pixels.\n\n\n\nformat: This is controlled by the MovieWriter.\n\n"
                },
                {
                    "method name": "classmethod isAvailable()",
                    "method text": ""
                },
                {
                    "method name": "setup(fig, outfile, dpi=None)",
                    "method text": "Setup for writing the movie file.\n\nParameters:\n\nfigFigureThe figure object that contains the information for frames.\n\noutfilestrThe filename of the resulting movie file.\n\ndpifloat, default: fig.dpiThe DPI (or resolution) for the file. This controls the size\nin pixels of the resulting movie file.\n\n\n\n\n"
                }
            ],
            "class property": [],
            "class attribute": []
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.HTMLWriter",
    "class": [
        {
            "class name": "class matplotlib.animation.HTMLWriter(fps=30, codec=None, bitrate=None, extra_args=None, metadata=None, embed_frames=False, default_mode='loop', embed_limit=None)",
            "class text": "Writer for JavaScript-based HTML movies.\n\nParameters:\n\nfpsint, default: 5Movie frame rate (per second).\n\ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')The codec to use.\n\nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)The bitrate of the movie, in kilobits per second. Higher values\nmeans higher quality movies, but increase the file size. A value\nof -1 lets the underlying movie encoder select the bitrate.\n\nextra_argslist of str or None, optionalExtra command-line arguments passed to the underlying movie encoder. These\narguments are passed last to the encoder, just before the filename. The\ndefault, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the\nbuiltin writers.\n\nmetadatadict[str, str], default: {}A dictionary of keys and values for metadata to include in the\noutput file. Some keys that may be of use include:\ntitle, artist, genre, subject, copyright, srcform, comment.\n\n\n\n\n\n",
            "class method": [
                {
                    "method name": "__init__(fps=30, codec=None, bitrate=None, extra_args=None, metadata=None, embed_frames=False, default_mode='loop', embed_limit=None)",
                    "method text": "\nParameters:\n\nfpsint, default: 5Movie frame rate (per second).\n\ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')The codec to use.\n\nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)The bitrate of the movie, in kilobits per second. Higher values\nmeans higher quality movies, but increase the file size. A value\nof -1 lets the underlying movie encoder select the bitrate.\n\nextra_argslist of str or None, optionalExtra command-line arguments passed to the underlying movie encoder. These\narguments are passed last to the encoder, just before the filename. The\ndefault, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the\nbuiltin writers.\n\nmetadatadict[str, str], default: {}A dictionary of keys and values for metadata to include in the\noutput file. Some keys that may be of use include:\ntitle, artist, genre, subject, copyright, srcform, comment.\n\n\n\n\n"
                },
                {
                    "method name": "finish()",
                    "method text": "Finish any processing for writing the movie.\n"
                },
                {
                    "method name": "grab_frame(**savefig_kwargs)",
                    "method text": "Grab the image information from the figure and save as a movie frame.\nAll keyword arguments in savefig_kwargs are passed on to the\nsavefig call that saves the figure. However, several\nkeyword arguments that are supported by savefig may not be\npassed as they are controlled by the MovieWriter:\n\n\ndpi, bbox_inches: These may not be passed because each frame of theanimation much be exactly the same size in pixels.\n\n\n\nformat: This is controlled by the MovieWriter.\n\n"
                },
                {
                    "method name": "classmethod isAvailable()",
                    "method text": "Return whether a MovieWriter subclass is actually available.\n"
                },
                {
                    "method name": "setup(fig, outfile, dpi=None, frame_dir=None)",
                    "method text": "Setup for writing the movie file.\n\nParameters:\n\nfigFigureThe figure to grab the rendered frames from.\n\noutfilestrThe filename of the resulting movie file.\n\ndpifloat, default: fig.dpiThe dpi of the output file. This, with the figure size,\ncontrols the size in pixels of the resulting movie file.\n\nframe_prefixstr, optionalThe filename prefix to use for temporary files. If None (the\ndefault), files are written to a temporary directory which is\ndeleted by finish; if not None, no temporary files are\ndeleted.\n\n\n\n\n"
                }
            ],
            "class property": [],
            "class attribute": [
                {
                    "attribute name": "supported_formats = ['png', 'jpeg', 'tiff', 'svg']",
                    "attribute text": ""
                }
            ]
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.FFMpegWriter",
    "class": [
        {
            "class name": "class matplotlib.animation.FFMpegWriter(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)",
            "class text": "Pipe-based ffmpeg writer.\nFrames are streamed directly to ffmpeg via a pipe and written in a single pass.\nThis effectively works as a slideshow input to ffmpeg with the fps passed as\n-framerate, so see also their notes on frame rates for further details.\n\nParameters:\n\nfpsint, default: 5Movie frame rate (per second).\n\ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')The codec to use.\n\nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)The bitrate of the movie, in kilobits per second. Higher values\nmeans higher quality movies, but increase the file size. A value\nof -1 lets the underlying movie encoder select the bitrate.\n\nextra_argslist of str or None, optionalExtra command-line arguments passed to the underlying movie encoder. These\narguments are passed last to the encoder, just before the filename. The\ndefault, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the\nbuiltin writers.\n\nmetadatadict[str, str], default: {}A dictionary of keys and values for metadata to include in the\noutput file. Some keys that may be of use include:\ntitle, artist, genre, subject, copyright, srcform, comment.\n\n\n\n\n\n",
            "class method": [
                {
                    "method name": "__init__(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)",
                    "method text": "\nParameters:\n\nfpsint, default: 5Movie frame rate (per second).\n\ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')The codec to use.\n\nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)The bitrate of the movie, in kilobits per second. Higher values\nmeans higher quality movies, but increase the file size. A value\nof -1 lets the underlying movie encoder select the bitrate.\n\nextra_argslist of str or None, optionalExtra command-line arguments passed to the underlying movie encoder. These\narguments are passed last to the encoder, just before the filename. The\ndefault, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the\nbuiltin writers.\n\nmetadatadict[str, str], default: {}A dictionary of keys and values for metadata to include in the\noutput file. Some keys that may be of use include:\ntitle, artist, genre, subject, copyright, srcform, comment.\n\n\n\n\n"
                }
            ],
            "class property": [],
            "class attribute": []
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.ImageMagickWriter",
    "class": [
        {
            "class name": "class matplotlib.animation.ImageMagickWriter(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)",
            "class text": "Pipe-based animated gif writer.\nFrames are streamed directly to ImageMagick via a pipe and written\nin a single pass.\n\nParameters:\n\nfpsint, default: 5Movie frame rate (per second).\n\ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')The codec to use.\n\nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)The bitrate of the movie, in kilobits per second. Higher values\nmeans higher quality movies, but increase the file size. A value\nof -1 lets the underlying movie encoder select the bitrate.\n\nextra_argslist of str or None, optionalExtra command-line arguments passed to the underlying movie encoder. These\narguments are passed last to the encoder, just before the filename. The\ndefault, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the\nbuiltin writers.\n\nmetadatadict[str, str], default: {}A dictionary of keys and values for metadata to include in the\noutput file. Some keys that may be of use include:\ntitle, artist, genre, subject, copyright, srcform, comment.\n\n\n\n\n\n",
            "class method": [
                {
                    "method name": "__init__(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)",
                    "method text": "\nParameters:\n\nfpsint, default: 5Movie frame rate (per second).\n\ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')The codec to use.\n\nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)The bitrate of the movie, in kilobits per second. Higher values\nmeans higher quality movies, but increase the file size. A value\nof -1 lets the underlying movie encoder select the bitrate.\n\nextra_argslist of str or None, optionalExtra command-line arguments passed to the underlying movie encoder. These\narguments are passed last to the encoder, just before the filename. The\ndefault, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the\nbuiltin writers.\n\nmetadatadict[str, str], default: {}A dictionary of keys and values for metadata to include in the\noutput file. Some keys that may be of use include:\ntitle, artist, genre, subject, copyright, srcform, comment.\n\n\n\n\n"
                }
            ],
            "class property": [],
            "class attribute": [
                {
                    "attribute name": "input_names = '-'",
                    "attribute text": ""
                }
            ]
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.FFMpegFileWriter",
    "class": [
        {
            "class name": "class matplotlib.animation.FFMpegFileWriter(*args, **kwargs)",
            "class text": "File-based ffmpeg writer.\nFrames are written to temporary files on disk and then stitched together at the end.\nThis effectively works as a slideshow input to ffmpeg with the fps passed as\n-framerate, so see also their notes on frame rates for further details.\n\n",
            "class method": [
                {
                    "method name": "__init__(*args, **kwargs)",
                    "method text": ""
                }
            ],
            "class property": [],
            "class attribute": [
                {
                    "attribute name": "supported_formats = ['png', 'jpeg', 'tiff', 'raw', 'rgba']",
                    "attribute text": ""
                }
            ]
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.ImageMagickFileWriter",
    "class": [
        {
            "class name": "class matplotlib.animation.ImageMagickFileWriter(*args, **kwargs)",
            "class text": "File-based animated gif writer.\nFrames are written to temporary files on disk and then stitched\ntogether at the end.\n\n",
            "class method": [
                {
                    "method name": "__init__(*args, **kwargs)",
                    "method text": ""
                }
            ],
            "class property": [
                {
                    "property name": "property input_names#",
                    "property text": ""
                }
            ],
            "class attribute": [
                {
                    "attribute name": "supported_formats = ['png', 'jpeg', 'tiff', 'raw', 'rgba']",
                    "attribute text": ""
                }
            ]
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.Animation",
    "class": [
        {
            "class name": "class matplotlib.animation.Animation(fig, event_source=None, blit=False)",
            "class text": "A base class for Animations.\nThis class is not usable as is, and should be subclassed to provide needed\nbehavior.\n\nNote\nYou must store the created Animation in a variable that lives as long\nas the animation should run. Otherwise, the Animation object will be\ngarbage-collected and the animation stops.\n\n\nParameters:\n\nfigFigureThe figure object used to get needed events, such as draw or resize.\n\nevent_sourceobject, optionalA class that can run a callback when desired events\nare generated, as well as be stopped and started.\nExamples include timers (see TimedAnimation) and file\nsystem notifications.\n\nblitbool, default: FalseWhether blitting is used to optimize drawing. If the backend does not\nsupport blitting, then this parameter has no effect.\n\n\n\n\n\nSee also\n\nFuncAnimation, ArtistAnimation\n\n\n\n",
            "class method": [
                {
                    "method name": "__init__(fig, event_source=None, blit=False)",
                    "method text": ""
                },
                {
                    "method name": "new_frame_seq()",
                    "method text": "Return a new sequence of frame information.\n"
                },
                {
                    "method name": "new_saved_frame_seq()",
                    "method text": "Return a new sequence of saved/cached frame information.\n"
                },
                {
                    "method name": "pause()",
                    "method text": "Pause the animation.\n"
                },
                {
                    "method name": "resume()",
                    "method text": "Resume the animation.\n"
                },
                {
                    "method name": "save(filename, writer=None, fps=None, dpi=None, codec=None, bitrate=None, extra_args=None, metadata=None, extra_anim=None, savefig_kwargs=None, *, progress_callback=None)",
                    "method text": "Save the animation as a movie file by drawing every frame.\n\nParameters:\n\nfilenamestrThe output filename, e.g., mymovie.mp4.\n\nwriterMovieWriter or str, default: rcParams[\"animation.writer\"] (default: 'ffmpeg')A MovieWriter instance to use or a key that identifies a\nclass to use, such as 'ffmpeg'.\n\nfpsint, optionalMovie frame rate (per second). If not set, the frame rate from the\nanimation's frame interval.\n\ndpifloat, default: rcParams[\"savefig.dpi\"] (default: 'figure')Controls the dots per inch for the movie frames. Together with\nthe figure's size in inches, this controls the size of the movie.\n\ncodecstr, default: rcParams[\"animation.codec\"] (default: 'h264').The video codec to use. Not all codecs are supported by a given\nMovieWriter.\n\nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)The bitrate of the movie, in kilobits per second. Higher values\nmeans higher quality movies, but increase the file size. A value\nof -1 lets the underlying movie encoder select the bitrate.\n\nextra_argslist of str or None, optionalExtra command-line arguments passed to the underlying movie encoder. These\narguments are passed last to the encoder, just before the output filename.\nThe default, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for\nthe builtin writers.\n\nmetadatadict[str, str], default: {}Dictionary of keys and values for metadata to include in\nthe output file. Some keys that may be of use include:\ntitle, artist, genre, subject, copyright, srcform, comment.\n\nextra_animlist, default: []Additional Animation objects that should be included\nin the saved movie file. These need to be from the same\nFigure instance. Also, animation frames will\njust be simply combined, so there should be a 1:1 correspondence\nbetween the frames from the different animations.\n\nsavefig_kwargsdict, default: {}Keyword arguments passed to each savefig call used to\nsave the individual frames.\n\nprogress_callbackfunction, optionalA callback function that will be called for every frame to notify\nthe saving progress. It must have the signature\ndef func(current_frame: int, total_frames: int) -> Any\n\n\nwhere current_frame is the current frame number and total_frames is the\ntotal number of frames to be saved. total_frames is set to None, if the\ntotal number of frames cannot be determined. Return values may exist but are\nignored.\nExample code to write the progress to stdout:\nprogress_callback = lambda i, n: print(f'Saving frame {i}/{n}')\n\n\n\n\n\n\nNotes\nfps, codec, bitrate, extra_args and metadata are used to\nconstruct a MovieWriter instance and can only be passed if\nwriter is a string. If they are passed as non-None and writer\nis a MovieWriter, a RuntimeError will be raised.\n"
                },
                {
                    "method name": "to_html5_video(embed_limit=None)",
                    "method text": "Convert the animation to an HTML5 <video> tag.\nThis saves the animation as an h264 video, encoded in base64\ndirectly into the HTML5 video tag. This respects rcParams[\"animation.writer\"] (default: 'ffmpeg')\nand rcParams[\"animation.bitrate\"] (default: -1). This also makes use of the\ninterval to control the speed, and uses the repeat\nparameter to decide whether to loop.\n\nParameters:\n\nembed_limitfloat, optionalLimit, in MB, of the returned animation. No animation is created\nif the limit is exceeded.\nDefaults to rcParams[\"animation.embed_limit\"] (default: 20.0) = 20.0.\n\n\n\nReturns:\n\nstrAn HTML5 video tag with the animation embedded as base64 encoded\nh264 video.\nIf the embed_limit is exceeded, this returns the string\n\"Video too large to embed.\"\n\n\n\n\n"
                },
                {
                    "method name": "to_jshtml(fps=None, embed_frames=True, default_mode=None)",
                    "method text": "Generate HTML representation of the animation.\n\nParameters:\n\nfpsint, optionalMovie frame rate (per second). If not set, the frame rate from\nthe animation's frame interval.\n\nembed_framesbool, optional\ndefault_modestr, optionalWhat to do when the animation ends. Must be one of {'loop',\n'once', 'reflect'}. Defaults to 'loop' if the repeat\nparameter is True, otherwise 'once'.\n\n\n\n\n"
                }
            ],
            "class property": [],
            "class attribute": []
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.TimedAnimation",
    "class": [
        {
            "class name": "class matplotlib.animation.TimedAnimation(fig, interval=200, repeat_delay=0, repeat=True, event_source=None, *args, **kwargs)",
            "class text": "Animation subclass for time-based animation.\nA new frame is drawn every interval milliseconds.\n\nNote\nYou must store the created Animation in a variable that lives as long\nas the animation should run. Otherwise, the Animation object will be\ngarbage-collected and the animation stops.\n\n\nParameters:\n\nfigFigureThe figure object used to get needed events, such as draw or resize.\n\nintervalint, default: 200Delay between frames in milliseconds.\n\nrepeat_delayint, default: 0The delay in milliseconds between consecutive animation runs, if\nrepeat is True.\n\nrepeatbool, default: TrueWhether the animation repeats when the sequence of frames is completed.\n\nblitbool, default: FalseWhether blitting is used to optimize drawing.\n\n\n\n\n\n",
            "class method": [
                {
                    "method name": "__init__(fig, interval=200, repeat_delay=0, repeat=True, event_source=None, *args, **kwargs)",
                    "method text": ""
                }
            ],
            "class property": [
                {
                    "property name": "property repeat",
                    "property text": ""
                }
            ],
            "class attribute": []
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.MovieWriterRegistry",
    "class": [
        {
            "class name": "class matplotlib.animation.MovieWriterRegistry",
            "class text": "Registry of available writer classes by human readable name.\n\n",
            "class method": [
                {
                    "method name": "__init__()",
                    "method text": ""
                },
                {
                    "method name": "is_available(name)",
                    "method text": "Check if given writer is available by name.\n\nParameters:\n\nnamestr\n\n\nReturns:\n\nbool\n\n\n\n"
                },
                {
                    "method name": "list()",
                    "method text": "Get a list of available MovieWriters.\n"
                },
                {
                    "method name": "register(name)",
                    "method text": "Decorator for registering a class under a name.\nExample use:\n@registry.register(name)\nclass Foo:\n    pass\n\n\n"
                }
            ],
            "class property": [],
            "class attribute": []
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.AbstractMovieWriter",
    "class": [
        {
            "class name": "class matplotlib.animation.AbstractMovieWriter(fps=5, metadata=None, codec=None, bitrate=None)",
            "class text": "Abstract base class for writing movies, providing a way to grab frames by\ncalling grab_frame.\nsetup is called to start the process and finish is called afterwards.\nsaving is provided as a context manager to facilitate this process as\nwith moviewriter.saving(fig, outfile='myfile.mp4', dpi=100):\n    # Iterate over frames\n    moviewriter.grab_frame(**savefig_kwargs)\n\n\nThe use of the context manager ensures that setup and finish are\nperformed as necessary.\nAn instance of a concrete subclass of this class can be given as the\nwriter argument of Animation.save().\n\n",
            "class method": [
                {
                    "method name": "__init__(fps=5, metadata=None, codec=None, bitrate=None)",
                    "method text": ""
                },
                {
                    "method name": "abstract finish()",
                    "method text": "Finish any processing for writing the movie.\n"
                },
                {
                    "method name": "abstract grab_frame(**savefig_kwargs)",
                    "method text": "Grab the image information from the figure and save as a movie frame.\nAll keyword arguments in savefig_kwargs are passed on to the\nsavefig call that saves the figure. However, several\nkeyword arguments that are supported by savefig may not be\npassed as they are controlled by the MovieWriter:\n\n\ndpi, bbox_inches: These may not be passed because each frame of theanimation much be exactly the same size in pixels.\n\n\n\nformat: This is controlled by the MovieWriter.\n\n"
                },
                {
                    "method name": "saving(fig, outfile, dpi, *args, **kwargs)",
                    "method text": "Context manager to facilitate writing the movie file.\n*args, **kw are any parameters that should be passed to setup.\n"
                },
                {
                    "method name": "abstract setup(fig, outfile, dpi=None)",
                    "method text": "Setup for writing the movie file.\n\nParameters:\n\nfigFigureThe figure object that contains the information for frames.\n\noutfilestrThe filename of the resulting movie file.\n\ndpifloat, default: fig.dpiThe DPI (or resolution) for the file. This controls the size\nin pixels of the resulting movie file.\n\n\n\n\n"
                }
            ],
            "class property": [
                {
                    "property name": "property frame_size#",
                    "property text": "A tuple (width, height) in pixels of a movie frame.\n"
                }
            ],
            "class attribute": []
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.MovieWriter",
    "class": [
        {
            "class name": "class matplotlib.animation.MovieWriter(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)",
            "class text": "Base class for writing movies.\nThis is a base class for MovieWriter subclasses that write a movie frame\ndata to a pipe. You cannot instantiate this class directly.\nSee examples for how to use its subclasses.\n\nAttributes:\n\nframe_formatstrThe format used in writing frame data, defaults to 'rgba'.\n\nfigFigureThe figure to capture data from.\nThis must be provided by the subclasses.\n\n\n\n\n\nParameters:\n\nfpsint, default: 5Movie frame rate (per second).\n\ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')The codec to use.\n\nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)The bitrate of the movie, in kilobits per second. Higher values\nmeans higher quality movies, but increase the file size. A value\nof -1 lets the underlying movie encoder select the bitrate.\n\nextra_argslist of str or None, optionalExtra command-line arguments passed to the underlying movie encoder. These\narguments are passed last to the encoder, just before the filename. The\ndefault, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the\nbuiltin writers.\n\nmetadatadict[str, str], default: {}A dictionary of keys and values for metadata to include in the\noutput file. Some keys that may be of use include:\ntitle, artist, genre, subject, copyright, srcform, comment.\n\n\n\n\n\n",
            "class method": [
                {
                    "method name": "__init__(fps=5, codec=None, bitrate=None, extra_args=None, metadata=None)",
                    "method text": "\nParameters:\n\nfpsint, default: 5Movie frame rate (per second).\n\ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')The codec to use.\n\nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)The bitrate of the movie, in kilobits per second. Higher values\nmeans higher quality movies, but increase the file size. A value\nof -1 lets the underlying movie encoder select the bitrate.\n\nextra_argslist of str or None, optionalExtra command-line arguments passed to the underlying movie encoder. These\narguments are passed last to the encoder, just before the filename. The\ndefault, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the\nbuiltin writers.\n\nmetadatadict[str, str], default: {}A dictionary of keys and values for metadata to include in the\noutput file. Some keys that may be of use include:\ntitle, artist, genre, subject, copyright, srcform, comment.\n\n\n\n\n"
                },
                {
                    "method name": "classmethod bin_path()",
                    "method text": "Return the binary path to the commandline tool used by a specific\nsubclass. This is a class method so that the tool can be looked for\nbefore making a particular MovieWriter subclass available.\n"
                },
                {
                    "method name": "finish()",
                    "method text": "Finish any processing for writing the movie.\n"
                },
                {
                    "method name": "grab_frame(**savefig_kwargs)",
                    "method text": "Grab the image information from the figure and save as a movie frame.\nAll keyword arguments in savefig_kwargs are passed on to the\nsavefig call that saves the figure. However, several\nkeyword arguments that are supported by savefig may not be\npassed as they are controlled by the MovieWriter:\n\n\ndpi, bbox_inches: These may not be passed because each frame of theanimation much be exactly the same size in pixels.\n\n\n\nformat: This is controlled by the MovieWriter.\n\n"
                },
                {
                    "method name": "classmethod isAvailable()",
                    "method text": "Return whether a MovieWriter subclass is actually available.\n"
                },
                {
                    "method name": "setup(fig, outfile, dpi=None)",
                    "method text": "Setup for writing the movie file.\n\nParameters:\n\nfigFigureThe figure object that contains the information for frames.\n\noutfilestrThe filename of the resulting movie file.\n\ndpifloat, default: fig.dpiThe DPI (or resolution) for the file. This controls the size\nin pixels of the resulting movie file.\n\n\n\n\n"
                }
            ],
            "class property": [],
            "class attribute": [
                {
                    "attribute name": "supported_formats = ['rgba']",
                    "attribute text": ""
                }
            ]
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.FileMovieWriter",
    "class": [
        {
            "class name": "class matplotlib.animation.FileMovieWriter(*args, **kwargs)",
            "class text": "MovieWriter for writing to individual files and stitching at the end.\nThis must be sub-classed to be useful.\n\nParameters:\n\nfpsint, default: 5Movie frame rate (per second).\n\ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')The codec to use.\n\nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)The bitrate of the movie, in kilobits per second. Higher values\nmeans higher quality movies, but increase the file size. A value\nof -1 lets the underlying movie encoder select the bitrate.\n\nextra_argslist of str or None, optionalExtra command-line arguments passed to the underlying movie encoder. These\narguments are passed last to the encoder, just before the filename. The\ndefault, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the\nbuiltin writers.\n\nmetadatadict[str, str], default: {}A dictionary of keys and values for metadata to include in the\noutput file. Some keys that may be of use include:\ntitle, artist, genre, subject, copyright, srcform, comment.\n\n\n\n\n\n",
            "class method": [
                {
                    "method name": "__init__(*args, **kwargs)",
                    "method text": "\nParameters:\n\nfpsint, default: 5Movie frame rate (per second).\n\ncodecstr or None, default: rcParams[\"animation.codec\"] (default: 'h264')The codec to use.\n\nbitrateint, default: rcParams[\"animation.bitrate\"] (default: -1)The bitrate of the movie, in kilobits per second. Higher values\nmeans higher quality movies, but increase the file size. A value\nof -1 lets the underlying movie encoder select the bitrate.\n\nextra_argslist of str or None, optionalExtra command-line arguments passed to the underlying movie encoder. These\narguments are passed last to the encoder, just before the filename. The\ndefault, None, means to use rcParams[\"animation.[name-of-encoder]_args\"] for the\nbuiltin writers.\n\nmetadatadict[str, str], default: {}A dictionary of keys and values for metadata to include in the\noutput file. Some keys that may be of use include:\ntitle, artist, genre, subject, copyright, srcform, comment.\n\n\n\n\n"
                },
                {
                    "method name": "finish()",
                    "method text": "Finish any processing for writing the movie.\n"
                },
                {
                    "method name": "grab_frame(**savefig_kwargs)",
                    "method text": "Grab the image information from the figure and save as a movie frame.\nAll keyword arguments in savefig_kwargs are passed on to the\nsavefig call that saves the figure. However, several\nkeyword arguments that are supported by savefig may not be\npassed as they are controlled by the MovieWriter:\n\n\ndpi, bbox_inches: These may not be passed because each frame of theanimation much be exactly the same size in pixels.\n\n\n\nformat: This is controlled by the MovieWriter.\n\n"
                },
                {
                    "method name": "setup(fig, outfile, dpi=None, frame_prefix=None)",
                    "method text": "Setup for writing the movie file.\n\nParameters:\n\nfigFigureThe figure to grab the rendered frames from.\n\noutfilestrThe filename of the resulting movie file.\n\ndpifloat, default: fig.dpiThe dpi of the output file. This, with the figure size,\ncontrols the size in pixels of the resulting movie file.\n\nframe_prefixstr, optionalThe filename prefix to use for temporary files. If None (the\ndefault), files are written to a temporary directory which is\ndeleted by finish; if not None, no temporary files are\ndeleted.\n\n\n\n\n"
                }
            ],
            "class property": [
                {
                    "property name": "property frame_format#",
                    "property text": "Format (png, jpeg, etc.) to use for saving the frames, which can be\ndecided by the individual subclasses.\n"
                }
            ],
            "class attribute": []
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.FFMpegBase",
    "class": [
        {
            "class name": "class matplotlib.animation.FFMpegBase",
            "class text": "Mixin class for FFMpeg output.\nThis is a base class for the concrete FFMpegWriter and FFMpegFileWriter\nclasses.\n\n",
            "class method": [
                {
                    "method name": "__init__(*args, **kwargs)#",
                    "method text": ""
                }
            ],
            "class property": [
                {
                    "property name": "property output_args#",
                    "property text": ""
                }
            ],
            "class attribute": []
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.animation.ImageMagickBase",
    "class": [
        {
            "class name": "class matplotlib.animation.ImageMagickBase",
            "class text": "Mixin class for ImageMagick output.\nThis is a base class for the concrete ImageMagickWriter and\nImageMagickFileWriter classes, which define an input_names attribute\n(or property) specifying the input names passed to ImageMagick.\n\n",
            "class method": [
                {
                    "method name": "__init__(*args, **kwargs)#",
                    "method text": ""
                },
                {
                    "method name": "classmethod bin_path()",
                    "method text": ""
                },
                {
                    "method name": "classmethod isAvailable()",
                    "method text": ""
                }
            ],
            "class property": [],
            "class attribute": []
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist",
    "class": [
        {
            "class name": "class matplotlib.artist.Artist",
            "class text": "Abstract base class for objects that render into a FigureCanvas.\nTypically, all visible elements in a figure are subclasses of Artist.\n"
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.add_callback",
    "class": {
        "class method": [
            {
                "method name": "Artist.add_callback(func)",
                "method text": "Add a callback function that will be called whenever one of the\nArtist's properties changes.\n\nParameters:\n\nfunccallableThe callback function. It must have the signature:\ndef func(artist: Artist) -> Any\n\n\nwhere artist is the calling Artist. Return values may exist\nbut are ignored.\n\n\n\nReturns:\n\nintThe observer id associated with the callback. This id can be\nused for removing the callback with remove_callback later.\n\n\n\n\n\nSee also\n\nremove_callback\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.remove_callback",
    "class": {
        "class method": [
            {
                "method name": "Artist.remove_callback(oid)",
                "method text": "Remove a callback based on its observer id.\n\nSee also\n\nadd_callback\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.pchanged",
    "class": {
        "class method": [
            {
                "method name": "Artist.pchanged()",
                "method text": "Call all of the registered callbacks.\nThis function is triggered internally when a property is changed.\n\nSee also\n\nadd_callback\nremove_callback\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_cursor_data",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_cursor_data(event)",
                "method text": "Return the cursor data for a given event.\n\nNote\nThis method is intended to be overridden by artist subclasses.\nAs an end-user of Matplotlib you will most likely not call this\nmethod yourself.\n\nCursor data can be used by Artists to provide additional context\ninformation for a given event. The default implementation just returns\nNone.\nSubclasses can override the method and return arbitrary data. However,\nwhen doing so, they must ensure that format_cursor_data can convert\nthe data to a string representation.\nThe only current use case is displaying the z-value of an AxesImage\nin the status bar of a plot window, while moving the mouse.\n\nParameters:\n\neventMouseEvent\n\n\n\n\nSee also\n\nformat_cursor_data\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.format_cursor_data",
    "class": {
        "class method": [
            {
                "method name": "Artist.format_cursor_data(data)",
                "method text": "Return a string representation of data.\n\nNote\nThis method is intended to be overridden by artist subclasses.\nAs an end-user of Matplotlib you will most likely not call this\nmethod yourself.\n\nThe default implementation converts ints and floats and arrays of ints\nand floats into a comma-separated string enclosed in square brackets,\nunless the artist has an associated colorbar, in which case scalar\nvalues are formatted using the colorbar's formatter.\n\nSee also\n\nget_cursor_data\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_mouseover",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_mouseover(mouseover)",
                "method text": "Set whether this artist is queried for custom context information when\nthe mouse cursor moves over it.\n\nParameters:\n\nmouseoverbool\n\n\n\n\nSee also\n\nget_cursor_data\nToolCursorPosition\nNavigationToolbar2\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_mouseover",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_mouseover()",
                "method text": "Return whether this artist is queried for custom context information\nwhen the mouse cursor moves over it.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.mouseover",
    "class": {
        "class property": [
            {
                "property name": "property Artist.mouseover#",
                "property text": "Return whether this artist is queried for custom context information\nwhen the mouse cursor moves over it.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.contains",
    "class": {
        "class method": [
            {
                "method name": "Artist.contains(mouseevent)",
                "method text": "Test whether the artist contains the mouse event.\n\nParameters:\n\nmouseeventMouseEvent\n\n\nReturns:\n\ncontainsboolWhether any values are within the radius.\n\ndetailsdictAn artist-specific dictionary of details of the event context,\nsuch as which points are contained in the pick radius. See the\nindividual Artist subclasses for details.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.pick",
    "class": {
        "class method": [
            {
                "method name": "Artist.pick(mouseevent)",
                "method text": "Process a pick event.\nEach child artist will fire a pick event if mouseevent is over\nthe artist and the artist has picker set.\n\nSee also\n\nset_picker, get_picker, pickable\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.pickable",
    "class": {
        "class method": [
            {
                "method name": "Artist.pickable()",
                "method text": "Return whether the artist is pickable.\n\nSee also\n\nset_picker, get_picker, pick\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_picker",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_picker(picker)",
                "method text": "Define the picking behavior of the artist.\n\nParameters:\n\npickerNone or bool or float or callableThis can be one of the following:\n\nNone: Picking is disabled for this artist (default).\nA boolean: If True then picking will be enabled and the\nartist will fire a pick event if the mouse event is over\nthe artist.\nA float: If picker is a number it is interpreted as an\nepsilon tolerance in points and the artist will fire\noff an event if its data is within epsilon of the mouse\nevent. For some artists like lines and patch collections,\nthe artist may provide additional data to the pick event\nthat is generated, e.g., the indices of the data within\nepsilon of the pick event\nA function: If picker is callable, it is a user supplied\nfunction which determines whether the artist is hit by the\nmouse event:\nhit, props = picker(artist, mouseevent)\n\n\nto determine the hit test. if the mouse event is over the\nartist, return hit=True and props is a dictionary of\nproperties you want added to the PickEvent attributes.\n\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_picker",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_picker()",
                "method text": "Return the picking behavior of the artist.\nThe possible values are described in set_picker.\n\nSee also\n\nset_picker, pickable, pick\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_clip_on",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_clip_on(b)",
                "method text": "Set whether the artist uses clipping.\nWhen False, artists will be visible outside the Axes which\ncan lead to unexpected results.\n\nParameters:\n\nbbool\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_clip_on",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_clip_on()",
                "method text": "Return whether the artist uses clipping.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_clip_box",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_clip_box(clipbox)",
                "method text": "Set the artist's clip Bbox.\n\nParameters:\n\nclipboxBboxBase or NoneWill typically be created from a TransformedBbox. For instance,\nTransformedBbox(Bbox([[0, 0], [1, 1]]), ax.transAxes) is the default\nclipping for an artist added to an Axes.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_clip_box",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_clip_box()",
                "method text": "Return the clipbox.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_clip_path",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_clip_path(path, transform=None)",
                "method text": "Set the artist's clip path.\n\nParameters:\n\npathPatch or Path or TransformedPath or NoneThe clip path. If given a Path, transform must be provided as\nwell. If None, a previously set clip path is removed.\n\ntransformTransform, optionalOnly used if path is a Path, in which case the given Path\nis converted to a TransformedPath using transform.\n\n\n\n\nNotes\nFor efficiency, if path is a Rectangle this method will set the\nclipping box to the corresponding rectangle and set the clipping path\nto None.\nFor technical reasons (support of set), a tuple\n(path, transform) is also accepted as a single positional\nparameter.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_clip_path",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_clip_path()",
                "method text": "Return the clip path.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.update",
    "class": {
        "class method": [
            {
                "method name": "Artist.update(props)",
                "method text": "Update this artist's properties from the dict props.\n\nParameters:\n\npropsdict\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.update_from",
    "class": {
        "class method": [
            {
                "method name": "Artist.update_from(other)",
                "method text": "Copy properties from other to self.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.properties",
    "class": {
        "class method": [
            {
                "method name": "Artist.properties()",
                "method text": "Return a dictionary of all the properties of the artist.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set",
    "class": {
        "class method": [
            {
                "method name": "Artist.set(*, agg_filter=<UNSET>, alpha=<UNSET>, animated=<UNSET>, clip_box=<UNSET>, clip_on=<UNSET>, clip_path=<UNSET>, gid=<UNSET>, in_layout=<UNSET>, label=<UNSET>, mouseover=<UNSET>, path_effects=<UNSET>, picker=<UNSET>, rasterized=<UNSET>, sketch_params=<UNSET>, snap=<UNSET>, transform=<UNSET>, url=<UNSET>, visible=<UNSET>, zorder=<UNSET>)",
                "method text": "Set multiple properties at once.\nSupported properties are\n\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\nfigure\nFigure\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nNone or bool or float or callable\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nvisible\nbool\n\nzorder\nfloat\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.draw",
    "class": {
        "class method": [
            {
                "method name": "Artist.draw(renderer)",
                "method text": "Draw the Artist (and its children) using the given renderer.\nThis has no effect if the artist is not visible (Artist.get_visible\nreturns False).\n\nParameters:\n\nrendererRendererBase subclass.\n\n\n\nNotes\nThis method is overridden in the Artist subclasses.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_animated",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_animated(b)",
                "method text": "Set whether the artist is intended to be used in an animation.\nIf True, the artist is excluded from regular drawing of the figure.\nYou have to call Figure.draw_artist / Axes.draw_artist\nexplicitly on the artist. This approach is used to speed up animations\nusing blitting.\nSee also matplotlib.animation and\nFaster rendering by using blitting.\n\nParameters:\n\nbbool\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_animated",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_animated()",
                "method text": "Return whether the artist is animated.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_alpha",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_alpha(alpha)",
                "method text": "Set the alpha value used for blending - not supported on all backends.\n\nParameters:\n\nalphascalar or Nonealpha must be within the 0-1 range, inclusive.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_alpha",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_alpha()",
                "method text": "Return the alpha value used for blending - not supported on all\nbackends.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_snap",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_snap(snap)",
                "method text": "Set the snapping behavior.\nSnapping aligns positions with the pixel grid, which results in\nclearer images. For example, if a black line of 1px width was\ndefined at a position in between two pixels, the resulting image\nwould contain the interpolated value of that line in the pixel grid,\nwhich would be a grey value on both adjacent pixel positions. In\ncontrast, snapping will move the line to the nearest integer pixel\nvalue, so that the resulting image will really contain a 1px wide\nblack line.\nSnapping is currently only supported by the Agg and MacOSX backends.\n\nParameters:\n\nsnapbool or NonePossible values:\n\nTrue: Snap vertices to the nearest pixel center.\nFalse: Do not modify vertex positions.\nNone: (auto) If the path contains only rectilinear line\nsegments, round to the nearest pixel center.\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_snap",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_snap()",
                "method text": "Return the snap setting.\nSee set_snap for details.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_visible",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_visible(b)",
                "method text": "Set the artist's visibility.\n\nParameters:\n\nbbool\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_visible",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_visible()",
                "method text": "Return the visibility.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.zorder",
    "class": {
        "class attribute": [
            {
                "attribute name": "Artist.zorder = 0",
                "attribute text": ""
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_zorder",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_zorder(level)",
                "method text": "Set the zorder for the artist. Artists with lower zorder\nvalues are drawn first.\n\nParameters:\n\nlevelfloat\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_zorder",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_zorder()",
                "method text": "Return the artist's zorder.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_agg_filter",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_agg_filter(filter_func)",
                "method text": "Set the agg filter.\n\nParameters:\n\nfilter_funccallableA filter function, which takes a (m, n, depth) float array\nand a dpi value, and returns a (m, n, depth) array and two\noffsets from the bottom left corner of the image\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_sketch_params",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_sketch_params(scale=None, length=None, randomness=None)",
                "method text": "Set the sketch parameters.\n\nParameters:\n\nscalefloat, optionalThe amplitude of the wiggle perpendicular to the source\nline, in pixels. If scale is None, or not provided, no\nsketch filter will be provided.\n\nlengthfloat, optionalThe length of the wiggle along the line, in pixels\n(default 128.0)\n\nrandomnessfloat, optionalThe scale factor by which the length is shrunken or\nexpanded (default 16.0)\nThe PGF backend uses this argument as an RNG seed and not as\ndescribed above. Using the same seed yields the same random shape.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_sketch_params",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_sketch_params()",
                "method text": "Return the sketch parameters for the artist.\n\nReturns:\n\ntuple or NoneA 3-tuple with the following elements:\n\nscale: The amplitude of the wiggle perpendicular to the\nsource line.\nlength: The length of the wiggle along the line.\nrandomness: The scale factor by which the length is\nshrunken or expanded.\n\nReturns None if no sketch parameters were set.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_rasterized",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_rasterized(rasterized)",
                "method text": "Force rasterized (bitmap) drawing for vector graphics output.\nRasterized drawing is not supported by all artists. If you try to\nenable this on an artist that does not support it, the command has no\neffect and a warning will be issued.\nThis setting is ignored for pixel-based output.\nSee also Rasterization for vector graphics.\n\nParameters:\n\nrasterizedbool\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_rasterized",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_rasterized()",
                "method text": "Return whether the artist is to be rasterized.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_path_effects",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_path_effects(path_effects)",
                "method text": "Set the path effects.\n\nParameters:\n\npath_effectslist of AbstractPathEffect\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_path_effects",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_path_effects()",
                "method text": ""
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_agg_filter",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_agg_filter()",
                "method text": "Return filter function to be used for agg filter.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_window_extent",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_window_extent(renderer=None)",
                "method text": "Get the artist's bounding box in display space.\nThe bounding box' width and height are nonnegative.\nSubclasses should override for inclusion in the bounding box\n\"tight\" calculation. Default is to return an empty bounding\nbox at 0, 0.\nBe careful when using this function, the results will not update\nif the artist window extent of the artist changes. The extent\ncan change due to any changes in the transform stack, such as\nchanging the axes limits, the figure size, or the canvas used\n(as is done when saving a figure). This can lead to unexpected\nbehavior where interactive figures will look fine on the screen,\nbut will save incorrectly.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_tightbbox",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_tightbbox(renderer=None)",
                "method text": "Like Artist.get_window_extent, but includes any clipping.\n\nParameters:\n\nrendererRendererBase subclass, optionalrenderer that will be used to draw the figures (i.e.\nfig.canvas.get_renderer())\n\n\n\nReturns:\n\nBbox or NoneThe enclosing bounding box (in figure pixel coordinates).\nReturns None if clipping results in no intersection.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_transformed_clip_path_and_affine",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_transformed_clip_path_and_affine()",
                "method text": "Return the clip path with the non-affine part of its\ntransformation applied, and the remaining affine part of its\ntransformation.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.remove",
    "class": {
        "class method": [
            {
                "method name": "Artist.remove()",
                "method text": "Remove the artist from the figure if possible.\nThe effect will not be visible until the figure is redrawn, e.g.,\nwith FigureCanvasBase.draw_idle. Call relim to\nupdate the axes limits if desired.\nNote: relim will not see collections even if the\ncollection was added to the axes with autolim = True.\nNote: there is no support for removing the artist's legend entry.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.axes",
    "class": {
        "class property": [
            {
                "property name": "property Artist.axes#",
                "property text": "The Axes instance the artist resides in, or None.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_figure",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_figure(fig)",
                "method text": "Set the Figure instance the artist belongs to.\n\nParameters:\n\nfigFigure\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_figure",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_figure()",
                "method text": "Return the Figure instance the artist belongs to.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_children",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_children()",
                "method text": "Return a list of the child Artists of this Artist.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.findobj",
    "class": {
        "class method": [
            {
                "method name": "Artist.findobj(match=None, include_self=True)",
                "method text": "Find artist objects.\nRecursively find all Artist instances contained in the artist.\n\nParameters:\n\nmatchA filter criterion for the matches. This can be\n\nNone: Return all objects contained in artist.\nA function with signature def match(artist: Artist) -> bool.\nThe result will only contain artists for which the function\nreturns True.\nA class instance: e.g., Line2D. The result will only contain\nartists of this class or its subclasses (isinstance check).\n\n\ninclude_selfboolInclude self in the list to be checked for a match.\n\n\n\nReturns:\n\nlist of Artist\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_transform",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_transform(t)",
                "method text": "Set the artist transform.\n\nParameters:\n\ntTransform\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_transform",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_transform()",
                "method text": "Return the Transform instance used by this artist.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.is_transform_set",
    "class": {
        "class method": [
            {
                "method name": "Artist.is_transform_set()",
                "method text": "Return whether the Artist has an explicitly set transform.\nThis is True after set_transform has been called.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.convert_xunits",
    "class": {
        "class method": [
            {
                "method name": "Artist.convert_xunits(x)",
                "method text": "Convert x using the unit type of the xaxis.\nIf the artist is not contained in an Axes or if the xaxis does not\nhave units, x itself is returned.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.convert_yunits",
    "class": {
        "class method": [
            {
                "method name": "Artist.convert_yunits(y)",
                "method text": "Convert y using the unit type of the yaxis.\nIf the artist is not contained in an Axes or if the yaxis does not\nhave units, y itself is returned.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.have_units",
    "class": {
        "class method": [
            {
                "method name": "Artist.have_units()",
                "method text": "Return whether units are set on any axis.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_gid",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_gid(gid)",
                "method text": "Set the (group) id for the artist.\n\nParameters:\n\ngidstr\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_gid",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_gid()",
                "method text": "Return the group id.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_label",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_label(s)",
                "method text": "Set a label that will be displayed in the legend.\n\nParameters:\n\nsobjects will be converted to a string by calling str.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_label",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_label()",
                "method text": "Return the label used for this artist in the legend.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_url",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_url(url)",
                "method text": "Set the url for the artist.\n\nParameters:\n\nurlstr\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_url",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_url()",
                "method text": "Return the url.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.sticky_edges",
    "class": {
        "class property": [
            {
                "property name": "property Artist.sticky_edges#",
                "property text": "x and y sticky edge lists for autoscaling.\nWhen performing autoscaling, if a data limit coincides with a value in\nthe corresponding sticky_edges list, then no margin will be added--the\nview limit \"sticks\" to the edge. A typical use case is histograms,\nwhere one usually expects no margin on the bottom edge (0) of the\nhistogram.\nMoreover, margin expansion \"bumps\" against sticky edges and cannot\ncross them. For example, if the upper data limit is 1.0, the upper\nview limit computed by simple margin application is 1.2, but there is a\nsticky edge at 1.1, then the actual upper view limit will be 1.1.\nThis attribute cannot be assigned to; however, the x and y\nlists can be modified in place as needed.\nExamples\n>>> artist.sticky_edges.x[:] = (xmin, xmax)\n>>> artist.sticky_edges.y[:] = (ymin, ymax)\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.set_in_layout",
    "class": {
        "class method": [
            {
                "method name": "Artist.set_in_layout(in_layout)",
                "method text": "Set if artist is to be included in layout calculations,\nE.g. Constrained Layout Guide,\nFigure.tight_layout(), and\nfig.savefig(fname, bbox_inches='tight').\n\nParameters:\n\nin_layoutbool\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.get_in_layout",
    "class": {
        "class method": [
            {
                "method name": "Artist.get_in_layout()",
                "method text": "Return boolean flag, True if artist is included in layout\ncalculations.\nE.g. Constrained Layout Guide,\nFigure.tight_layout(), and\nfig.savefig(fname, bbox_inches='tight').\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.Artist.stale",
    "class": {
        "class property": [
            {
                "property name": "property Artist.stale#",
                "property text": "Whether the artist is 'stale' and needs to be re-drawn for the output\nto match the internal state of the artist.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.artist.allow_rasterization",
    "class": [],
    "function": [
        {
            "function name": "matplotlib.artist.allow_rasterization(draw)",
            "function text": "Decorator for Artist.draw method. Provides routines\nthat run before and after the draw call. The before and after functions\nare useful for changing artist-dependent renderer attributes or making\nother setup function calls, such as starting and flushing a mixed-mode\nrenderer.\n"
        }
    ],
    "exception": []
},
{
    "module name": "matplotlib.artist.get",
    "class": [],
    "function": [
        {
            "function name": "matplotlib.artist.get(obj, property=None)",
            "function text": "Return the value of an Artist's property, or print all of them.\n\nParameters:\n\nobjArtistThe queried artist; e.g., a Line2D, a Text, or an Axes.\n\npropertystr or None, default: NoneIf property is 'somename', this function returns\nobj.get_somename().\nIf it's None (or unset), it prints all gettable properties from\nobj. Many properties have aliases for shorter typing, e.g. 'lw' is\nan alias for 'linewidth'. In the output, aliases and full property\nnames will be listed as:\n\nproperty or alias = value\n\ne.g.:\n\nlinewidth or lw = 2\n\n\n\n\n\n\nSee also\n\nsetp\n\n\n"
        }
    ],
    "exception": []
},
{
    "module name": "matplotlib.artist.getp",
    "class": [],
    "function": [
        {
            "function name": "matplotlib.artist.getp(obj, property=None)",
            "function text": "Return the value of an Artist's property, or print all of them.\n\nParameters:\n\nobjArtistThe queried artist; e.g., a Line2D, a Text, or an Axes.\n\npropertystr or None, default: NoneIf property is 'somename', this function returns\nobj.get_somename().\nIf it's None (or unset), it prints all gettable properties from\nobj. Many properties have aliases for shorter typing, e.g. 'lw' is\nan alias for 'linewidth'. In the output, aliases and full property\nnames will be listed as:\n\nproperty or alias = value\n\ne.g.:\n\nlinewidth or lw = 2\n\n\n\n\n\n\nSee also\n\nsetp\n\n\n"
        }
    ],
    "exception": []
},
{
    "module name": "matplotlib.artist.setp",
    "class": [],
    "function": [
        {
            "function name": "matplotlib.artist.setp(obj, *args, file=None, **kwargs)",
            "function text": "Set one or more properties on an Artist, or list allowed values.\n\nParameters:\n\nobjArtist or list of ArtistThe artist(s) whose properties are being set or queried. When setting\nproperties, all artists are affected; when querying the allowed values,\nonly the first instance in the sequence is queried.\nFor example, two lines can be made thicker and red with a single call:\n>>> x = arange(0, 1, 0.01)\n>>> lines = plot(x, sin(2*pi*x), x, sin(4*pi*x))\n>>> setp(lines, linewidth=2, color='r')\n\n\n\nfilefile-like, default: sys.stdoutWhere setp writes its output when asked to list allowed values.\n>>> with open('output.log') as file:\n...     setp(line, file=file)\n\n\nThe default, None, means sys.stdout.\n\n*args, **kwargsThe properties to set. The following combinations are supported:\n\nSet the linestyle of a line to be dashed:\n>>> line, = plot([1, 2, 3])\n>>> setp(line, linestyle='--')\n\n\n\nSet multiple properties at once:\n>>> setp(line, linewidth=2, color='r')\n\n\n\nList allowed values for a line's linestyle:\n>>> setp(line, 'linestyle')\nlinestyle: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n\n\nList all properties that can be set, and their allowed values:\n>>> setp(line)\nagg_filter: a filter function, ...\n[long output listing omitted]\n\n\n\n\nsetp also supports MATLAB style string/value pairs. For example, the\nfollowing are equivalent:\n>>> setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style\n>>> setp(lines, linewidth=2, color='r')        # Python style\n\n\n\n\n\n\n\nSee also\n\ngetp\n\n\n"
        }
    ],
    "exception": []
},
{
    "module name": "matplotlib.artist.kwdoc",
    "class": [],
    "function": [
        {
            "function name": "matplotlib.artist.kwdoc(artist)",
            "function text": "Inspect an Artist class (using ArtistInspector) and\nreturn information about its settable properties and their current values.\n\nParameters:\n\nartistArtist or an iterable of Artists\n\n\nReturns:\n\nstrThe settable properties of artist, as plain text if\nrcParams[\"docstring.hardcopy\"] (default: False) is False and as a rst table (intended for\nuse in Sphinx) if it is True.\n\n\n\n\n"
        }
    ],
    "exception": []
},
{
    "module name": "matplotlib.artist.ArtistInspector",
    "class": {
        "class method": [
            {
                "method name": "aliased_name(s)",
                "method text": "Return 'PROPNAME or alias' if s has an alias, else return 'PROPNAME'.\nFor example, for the line markerfacecolor property, which has an\nalias, return 'markerfacecolor or mfc' and for the transform\nproperty, which does not, return 'transform'.\n"
            },
            {
                "method name": "aliased_name_rest(s, target)",
                "method text": "Return 'PROPNAME or alias' if s has an alias, else return 'PROPNAME',\nformatted for reST.\nFor example, for the line markerfacecolor property, which has an\nalias, return 'markerfacecolor or mfc' and for the transform\nproperty, which does not, return 'transform'.\n"
            },
            {
                "method name": "get_aliases()",
                "method text": "Get a dict mapping property fullnames to sets of aliases for each alias\nin the ArtistInspector.\ne.g., for lines:\n{'markerfacecolor': {'mfc'},\n 'linewidth'      : {'lw'},\n}\n\n\n"
            },
            {
                "method name": "get_setters()",
                "method text": "Get the attribute strings with setters for object.\nFor example, for a line, return ['markerfacecolor', 'linewidth',\n....].\n"
            },
            {
                "method name": "get_valid_values(attr)",
                "method text": "Get the legal arguments for the setter associated with attr.\nThis is done by querying the docstring of the setter for a line that\nbegins with \"ACCEPTS:\" or \".. ACCEPTS:\", and then by looking for a\nnumpydoc-style documentation for the setter's first argument.\n"
            },
            {
                "method name": "static is_alias(method)",
                "method text": "Return whether the object method is an alias for another method.\n"
            },
            {
                "method name": "static number_of_parameters(func)",
                "method text": "Return number of parameters of the callable func.\n"
            },
            {
                "method name": "pprint_getters()",
                "method text": "Return the getters and actual values as list of strings.\n"
            },
            {
                "method name": "pprint_setters(prop=None, leadingspace=2)",
                "method text": "If prop is None, return a list of strings of all settable\nproperties and their valid values.\nIf prop is not None, it is a valid property name and that\nproperty will be returned as a string of property : valid\nvalues.\n"
            },
            {
                "method name": "pprint_setters_rest(prop=None, leadingspace=4)",
                "method text": "If prop is None, return a list of reST-formatted strings of all\nsettable properties and their valid values.\nIf prop is not None, it is a valid property name and that\nproperty will be returned as a string of \"property : valid\"\nvalues.\n"
            },
            {
                "method name": "properties()",
                "method text": "Return a dictionary mapping property name -> value.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes",
    "class": [
        {
            "class name": "class matplotlib.axes.Axes.ArtistList(axes, prop_name, valid_types=None, invalid_types=None)#",
            "class text": "A sublist of Axes children based on their type.\nThe type-specific children sublists were made immutable in Matplotlib\n3.7. In the future these artist lists may be replaced by tuples. Use\nas if this is a tuple already.\n\nParameters:\n\naxesAxesThe Axes from which this sublist will pull the children\nArtists.\n\nprop_namestrThe property name used to access this sublist from the Axes;\nused to generate deprecation warnings.\n\nvalid_typeslist of type, optionalA list of types that determine which children will be returned\nby this sublist. If specified, then the Artists in the sublist\nmust be instances of any of these types. If unspecified, then\nany type of Artist is valid (unless limited by\ninvalid_types.)\n\ninvalid_typestuple, optionalA list of types that determine which children will not be\nreturned by this sublist. If specified, then Artists in the\nsublist will never be an instance of these types. Otherwise, no\ntypes will be excluded.\n\n\n\n\n"
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes",
    "class": [
        {
            "class name": "class matplotlib.axes.Axes(fig, *args, facecolor=None, frameon=True, sharex=None, sharey=None, label='', xscale=None, yscale=None, box_aspect=None, **kwargs)",
            "class text": "An Axes object encapsulates all the elements of an individual (sub-)plot in\na figure.\nIt contains most of the (sub-)plot elements: Axis,\nTick, Line2D, Text, Polygon, etc.,\nand sets the coordinate system.\nLike all visible elements in a figure, Axes is an Artist subclass.\nThe Axes instance supports callbacks through a callbacks attribute which\nis a CallbackRegistry instance. The events you can connect to\nare 'xlim_changed' and 'ylim_changed' and the callback will be called with\nfunc(ax) where ax is the Axes instance.\n\nNote\nAs a user, you do not instantiate Axes directly, but use Axes creation\nmethods instead; e.g. from pyplot or Figure:\nsubplots, subplot_mosaic or Figure.add_axes.\n\n\nAttributes:\n\ndataLimBboxThe bounding box enclosing all data displayed in the Axes.\n\nviewLimBboxThe view limits in data coordinates.\n\n\n\n\nBuild an Axes in a figure.\n\nParameters:\n\nfigFigureThe Axes is built in the Figure fig.\n\n*args*args can be a single (left, bottom, width, height)\nrectangle or a single Bbox. This specifies the rectangle (in\nfigure coordinates) where the Axes is positioned.\n*args can also consist of three numbers or a single three-digit\nnumber; in the latter case, the digits are considered as\nindependent numbers. The numbers are interpreted as (nrows,\nncols, index): (nrows, ncols) specifies the size of an array\nof subplots, and index is the 1-based index of the subplot\nbeing created. Finally, *args can also directly be a\nSubplotSpec instance.\n\nsharex, shareyAxes, optionalThe x- or y-axis is shared with the x- or y-axis in\nthe input Axes.\n\nframeonbool, default: TrueWhether the Axes frame is visible.\n\nbox_aspectfloat, optionalSet a fixed aspect for the Axes box, i.e. the ratio of height to\nwidth. See set_box_aspect for details.\n\n**kwargsOther optional keyword arguments:\n\n\nProperty\nDescription\n\n\n\nadjustable\n{'box', 'datalim'}\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanchor\n(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}\n\nanimated\nbool\n\naspect\n{'auto', 'equal'} or float\n\nautoscale_on\nbool\n\nautoscalex_on\nunknown\n\nautoscaley_on\nunknown\n\naxes_locator\nCallable[[Axes, Renderer], Bbox]\n\naxisbelow\nbool or 'line'\n\nbox_aspect\nfloat or None\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\nfacecolor or fc\ncolor\n\nfigure\nFigure\n\nframe_on\nbool\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nmouseover\nbool\n\nnavigate\nbool\n\nnavigate_mode\nunknown\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nNone or bool or float or callable\n\nposition\n[left, bottom, width, height] or Bbox\n\nprop_cycle\nCycler\n\nrasterization_zorder\nfloat or None\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsubplotspec\nunknown\n\ntitle\nstr\n\ntransform\nTransform\n\nurl\nstr\n\nvisible\nbool\n\nxbound\n(lower: float, upper: float)\n\nxlabel\nstr\n\nxlim\n(left: float, right: float)\n\nxmargin\nfloat greater than -0.5\n\nxscale\nunknown\n\nxticklabels\nunknown\n\nxticks\nunknown\n\nybound\n(lower: float, upper: float)\n\nylabel\nstr\n\nylim\n(bottom: float, top: float)\n\nymargin\nfloat greater than -0.5\n\nyscale\nunknown\n\nyticklabels\nunknown\n\nyticks\nunknown\n\nzorder\nfloat\n\n\n\n\n\n\nReturns:\n\nAxesThe new Axes object.\n\n\n\n\n"
        }
    ],
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.plot",
    "class": {
        "class method": [
            {
                "method name": "Axes.plot(*args, scalex=True, scaley=True, data=None, **kwargs)",
                "method text": "Plot y versus x as lines and/or markers.\nCall signatures:\nplot([x], y, [fmt], *, data=None, **kwargs)\nplot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\n\nThe coordinates of the points or line nodes are given by x, y.\nThe optional parameter fmt is a convenient way for defining basic\nformatting like color, marker and linestyle. It's a shortcut string\nnotation described in the Notes section below.\n>>> plot(x, y)        # plot x and y using default line style and color\n>>> plot(x, y, 'bo')  # plot x and y using blue circle markers\n>>> plot(y)           # plot y using x as index array 0..N-1\n>>> plot(y, 'r+')     # ditto, but with red plusses\n\n\nYou can use Line2D properties as keyword arguments for more\ncontrol on the appearance. Line properties and fmt can be mixed.\nThe following two calls yield identical results:\n>>> plot(x, y, 'go--', linewidth=2, markersize=12)\n>>> plot(x, y, color='green', marker='o', linestyle='dashed',\n...      linewidth=2, markersize=12)\n\n\nWhen conflicting with fmt, keyword arguments take precedence.\nPlotting labelled data\nThere's a convenient way for plotting objects with labelled data (i.e.\ndata that can be accessed by index obj['y']). Instead of giving\nthe data in x and y, you can provide the object in the data\nparameter and just give the labels for x and y:\n>>> plot('xlabel', 'ylabel', data=obj)\n\n\nAll indexable objects are supported. This could e.g. be a dict, a\npandas.DataFrame or a structured numpy array.\nPlotting multiple sets of data\nThere are various ways to plot multiple sets of data.\n\nThe most straight forward way is just to call plot multiple times.\nExample:\n>>> plot(x1, y1, 'bo')\n>>> plot(x2, y2, 'go')\n\n\n\nIf x and/or y are 2D arrays a separate data set will be drawn\nfor every column. If both x and y are 2D, they must have the\nsame shape. If only one of them is 2D with shape (N, m) the other\nmust have length N and will be used for every data set m.\nExample:\n>>> x = [1, 2, 3]\n>>> y = np.array([[1, 2], [3, 4], [5, 6]])\n>>> plot(x, y)\n\n\nis equivalent to:\n>>> for col in range(y.shape[1]):\n...     plot(x, y[:, col])\n\n\n\nThe third way is to specify multiple sets of [x], y, [fmt]\ngroups:\n>>> plot(x1, y1, 'g^', x2, y2, 'g-')\n\n\nIn this case, any additional keyword argument applies to all\ndatasets. Also, this syntax cannot be combined with the data\nparameter.\n\n\nBy default, each line is assigned a different style specified by a\n'style cycle'. The fmt and line property parameters are only\nnecessary if you want explicit deviations from these defaults.\nAlternatively, you can also change the style cycle using\nrcParams[\"axes.prop_cycle\"] (default: cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'])).\n\nParameters:\n\nx, yarray-like or scalarThe horizontal / vertical coordinates of the data points.\nx values are optional and default to range(len(y)).\nCommonly, these parameters are 1D arrays.\nThey can also be scalars, or two-dimensional (in that case, the\ncolumns represent separate data sets).\nThese arguments cannot be passed as keywords.\n\nfmtstr, optionalA format string, e.g. 'ro' for red circles. See the Notes\nsection for a full description of the format strings.\nFormat strings are just an abbreviation for quickly setting\nbasic line properties. All of these and more can also be\ncontrolled by keyword arguments.\nThis argument cannot be passed as keyword.\n\ndataindexable object, optionalAn object with labelled data. If given, provide the label names to\nplot in x and y.\n\nNote\nTechnically there's a slight ambiguity in calls where the\nsecond label is a valid fmt. plot('n', 'o', data=obj)\ncould be plt(x, y) or plt(y, fmt). In such cases,\nthe former interpretation is chosen, but a warning is issued.\nYou may suppress the warning by adding an empty format string\nplot('n', 'o', '', data=obj).\n\n\n\n\nReturns:\n\nlist of Line2DA list of lines representing the plotted data.\n\n\n\nOther Parameters:\n\nscalex, scaleybool, default: TrueThese parameters determine if the view limits are adapted to the\ndata limits. The values are passed on to\nautoscale_view.\n\n**kwargsLine2D properties, optionalkwargs are used to specify properties like a line label (for\nauto legends), linewidth, antialiasing, marker face color.\nExample:\n>>> plot([1, 2, 3], [1, 2, 3], 'go-', label='line 1', linewidth=2)\n>>> plot([1, 2, 3], [1, 4, 9], 'rs', label='line 2')\n\n\nIf you specify multiple lines with one plot call, the kwargs apply\nto all those lines. In case the label object is iterable, each\nelement is used as labels for each set of data.\nHere is a list of available Line2D properties:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nscatterXY scatter plot with markers of varying size and/or color ( sometimes also called bubble chart).\n\n\n\nNotes\nFormat Strings\nA format string consists of a part for color, marker and line:\nfmt = '[marker][line][color]'\n\n\nEach of them is optional. If not provided, the value from the style\ncycle is used. Exception: If line is given, but no marker,\nthe data will be a line without markers.\nOther combinations such as [color][marker][line] are also\nsupported, but note that their parsing may be ambiguous.\nMarkers\n\n\ncharacter\ndescription\n\n\n\n'.'\npoint marker\n\n','\npixel marker\n\n'o'\ncircle marker\n\n'v'\ntriangle_down marker\n\n'^'\ntriangle_up marker\n\n'<'\ntriangle_left marker\n\n'>'\ntriangle_right marker\n\n'1'\ntri_down marker\n\n'2'\ntri_up marker\n\n'3'\ntri_left marker\n\n'4'\ntri_right marker\n\n'8'\noctagon marker\n\n's'\nsquare marker\n\n'p'\npentagon marker\n\n'P'\nplus (filled) marker\n\n'*'\nstar marker\n\n'h'\nhexagon1 marker\n\n'H'\nhexagon2 marker\n\n'+'\nplus marker\n\n'x'\nx marker\n\n'X'\nx (filled) marker\n\n'D'\ndiamond marker\n\n'd'\nthin_diamond marker\n\n'|'\nvline marker\n\n'_'\nhline marker\n\n\n\nLine Styles\n\n\ncharacter\ndescription\n\n\n\n'-'\nsolid line style\n\n'--'\ndashed line style\n\n'-.'\ndash-dot line style\n\n':'\ndotted line style\n\n\n\nExample format strings:\n'b'    # blue markers with default shape\n'or'   # red circles\n'-g'   # green solid line\n'--'   # dashed line with default color\n'^k:'  # black triangle_up markers connected by a dotted line\n\n\nColors\nThe supported color abbreviations are the single letter codes\n\n\ncharacter\ncolor\n\n\n\n'b'\nblue\n\n'g'\ngreen\n\n'r'\nred\n\n'c'\ncyan\n\n'm'\nmagenta\n\n'y'\nyellow\n\n'k'\nblack\n\n'w'\nwhite\n\n\n\nand the 'CN' colors that index into the default property cycle.\nIf the color is the only part of the format string, you can\nadditionally use any matplotlib.colors spec, e.g. full names\n('green') or hex strings ('#008000').\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.errorbar",
    "class": {
        "class method": [
            {
                "method name": "Axes.errorbar(x, y, yerr=None, xerr=None, fmt='', ecolor=None, elinewidth=None, capsize=None, barsabove=False, lolims=False, uplims=False, xlolims=False, xuplims=False, errorevery=1, capthick=None, *, data=None, **kwargs)",
                "method text": "Plot y versus x as lines and/or markers with attached errorbars.\nx, y define the data locations, xerr, yerr define the errorbar\nsizes. By default, this draws the data markers/lines as well the\nerrorbars. Use fmt='none' to draw errorbars without any data markers.\n\nNew in version 3.7: Caps and error lines are drawn in polar coordinates on polar plots.\n\n\nParameters:\n\nx, yfloat or array-likeThe data positions.\n\nxerr, yerrfloat or array-like, shape(N,) or shape(2, N), optionalThe errorbar sizes:\n\nscalar: Symmetric +/- values for all data points.\nshape(N,): Symmetric +/-values for each data point.\nshape(2, N): Separate - and + values for each bar. First row\ncontains the lower errors, the second row contains the upper\nerrors.\nNone: No errorbar.\n\nAll values must be >= 0.\nSee Different ways of specifying error bars\nfor an example on the usage of xerr and yerr.\n\nfmtstr, default: ''The format for the data points / data lines. See plot for\ndetails.\nUse 'none' (case-insensitive) to plot errorbars without any data\nmarkers.\n\necolorcolor, default: NoneThe color of the errorbar lines. If None, use the color of the\nline connecting the markers.\n\nelinewidthfloat, default: NoneThe linewidth of the errorbar lines. If None, the linewidth of\nthe current style is used.\n\ncapsizefloat, default: rcParams[\"errorbar.capsize\"] (default: 0.0)The length of the error bar caps in points.\n\ncapthickfloat, default: NoneAn alias to the keyword argument markeredgewidth (a.k.a. mew).\nThis setting is a more sensible name for the property that\ncontrols the thickness of the error bar cap in points. For\nbackwards compatibility, if mew or markeredgewidth are given,\nthen they will over-ride capthick. This may change in future\nreleases.\n\nbarsabovebool, default: FalseIf True, will plot the errorbars above the plot\nsymbols. Default is below.\n\nlolims, uplims, xlolims, xuplimsbool or array-like, default: FalseThese arguments can be used to indicate that a value gives only\nupper/lower limits. In that case a caret symbol is used to\nindicate this. lims-arguments may be scalars, or array-likes of\nthe same length as xerr and yerr. To use limits with inverted\naxes, set_xlim or set_ylim must be called before\nerrorbar(). Note the tricky parameter names: setting e.g.\nlolims to True means that the y-value is a lower limit of the\nTrue value, so, only an upward-pointing arrow will be drawn!\n\nerroreveryint or (int, int), default: 1draws error bars on a subset of the data. errorevery =N draws\nerror bars on the points (x[::N], y[::N]).\nerrorevery =(start, N) draws error bars on the points\n(x[start::N], y[start::N]). e.g. errorevery=(6, 3)\nadds error bars to the data at (x[6], x[9], x[12], x[15], ...).\nUsed to avoid overlapping error bars when two series share x-axis\nvalues.\n\n\n\nReturns:\n\nErrorbarContainerThe container contains:\n\nplotline: Line2D instance of x, y plot markers\nand/or line.\ncaplines: A tuple of Line2D instances of the error\nbar caps.\nbarlinecols: A tuple of LineCollection with the horizontal and\nvertical error ranges.\n\n\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, y, xerr, yerr\n\n**kwargsAll other keyword arguments are passed on to the plot call\ndrawing the markers. For example, this code makes big red squares\nwith thick green edges:\nx, y, yerr = rand(3, 10)\nerrorbar(x, y, yerr, marker='s', mfc='red',\n         mec='green', ms=20, mew=4)\n\n\nwhere mfc, mec, ms and mew are aliases for the longer\nproperty names, markerfacecolor, markeredgecolor, markersize\nand markeredgewidth.\nValid kwargs for the marker properties are:\n\ndashes\ndash_capstyle\ndash_joinstyle\ndrawstyle\nfillstyle\nlinestyle\nmarker\nmarkeredgecolor\nmarkeredgewidth\nmarkerfacecolor\nmarkerfacecoloralt\nmarkersize\nmarkevery\nsolid_capstyle\nsolid_joinstyle\n\nRefer to the corresponding Line2D property for more details:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.scatter",
    "class": {
        "class method": [
            {
                "method name": "Axes.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, *, edgecolors=None, plotnonfinite=False, data=None, **kwargs)",
                "method text": "A scatter plot of y vs. x with varying marker size and/or color.\n\nParameters:\n\nx, yfloat or array-like, shape (n, )The data positions.\n\nsfloat or array-like, shape (n, ), optionalThe marker size in points**2 (typographic points are 1/72 in.).\nDefault is rcParams['lines.markersize'] ** 2.\nThe linewidth and edgecolor can visually interact with the marker\nsize, and can lead to artifacts if the marker size is smaller than\nthe linewidth.\nIf the linewidth is greater than 0 and the edgecolor is anything\nbut 'none', then the effective size of the marker will be\nincreased by half the linewidth because the stroke will be centered\non the edge of the shape.\nTo eliminate the marker edge either set linewidth=0 or\nedgecolor='none'.\n\ncarray-like or list of colors or color, optionalThe marker colors. Possible values:\n\nA scalar or sequence of n numbers to be mapped to colors using\ncmap and norm.\nA 2D array in which the rows are RGB or RGBA.\nA sequence of colors of length n.\nA single color format string.\n\nNote that c should not be a single numeric RGB or RGBA sequence\nbecause that is indistinguishable from an array of values to be\ncolormapped. If you want to specify the same RGB or RGBA value for\nall points, use a 2D array with a single row. Otherwise,\nvalue-matching will have precedence in case of a size matching with\nx and y.\nIf you wish to specify a single color for all points\nprefer the color keyword argument.\nDefaults to None. In that case the marker color is determined\nby the value of color, facecolor or facecolors. In case\nthose are not specified or None, the marker color is determined\nby the next color of the Axes' current \"shape and fill\" color\ncycle. This cycle defaults to rcParams[\"axes.prop_cycle\"] (default: cycler('color', ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'])).\n\nmarkerMarkerStyle, default: rcParams[\"scatter.marker\"] (default: 'o')The marker style. marker can be either an instance of the class\nor the text shorthand for a particular marker.\nSee matplotlib.markers for more information about marker\nstyles.\n\ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')The Colormap instance or registered colormap name used to map scalar data\nto colors.\nThis parameter is ignored if c is RGB(A).\n\nnormstr or Normalize, optionalThe normalization method used to scale scalar data to the [0, 1] range\nbefore mapping to colors using cmap. By default, a linear scaling is\nused, mapping the lowest value to 0 and the highest to 1.\nIf given, this can be one of the following:\n\nAn instance of Normalize or one of its subclasses\n(see Colormap Normalization).\nA scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc. For a\nlist of available scales, call matplotlib.scale.get_scale_names().\nIn that case, a suitable Normalize subclass is dynamically generated\nand instantiated.\n\nThis parameter is ignored if c is RGB(A).\n\nvmin, vmaxfloat, optionalWhen using scalar data and no explicit norm, vmin and vmax define\nthe data range that the colormap covers. By default, the colormap covers\nthe complete value range of the supplied data. It is an error to use\nvmin/vmax when a norm instance is given (but using a str norm\nname together with vmin/vmax is acceptable).\nThis parameter is ignored if c is RGB(A).\n\nalphafloat, default: NoneThe alpha blending value, between 0 (transparent) and 1 (opaque).\n\nlinewidthsfloat or array-like, default: rcParams[\"lines.linewidth\"] (default: 1.5)The linewidth of the marker edges. Note: The default edgecolors\nis 'face'. You may want to change this as well.\n\nedgecolors{'face', 'none', None} or color or sequence of color, default: rcParams[\"scatter.edgecolors\"] (default: 'face')The edge color of the marker. Possible values:\n\n'face': The edge color will always be the same as the face color.\n'none': No patch boundary will be drawn.\nA color or sequence of colors.\n\nFor non-filled markers, edgecolors is ignored. Instead, the color\nis determined like with 'face', i.e. from c, colors, or\nfacecolors.\n\nplotnonfinitebool, default: FalseWhether to plot points with nonfinite c (i.e. inf, -inf\nor nan). If True the points are drawn with the bad\ncolormap color (see Colormap.set_bad).\n\n\n\nReturns:\n\nPathCollection\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, y, s, linewidths, edgecolors, c, facecolor, facecolors, color\n\n**kwargsCollection properties\n\n\n\n\nSee also\n\nplotTo plot scatter plots when markers are identical in size and color.\n\n\n\nNotes\n\nThe plot function will be faster for scatterplots where markers\ndon't vary in size or color.\nAny or all of x, y, s, and c may be masked arrays, in which\ncase all masks will be combined and only unmasked points will be\nplotted.\nFundamentally, scatter works with 1D arrays; x, y, s, and c\nmay be input as N-D arrays, but within scatter they will be\nflattened. The exception is c, which will be flattened only if its\nsize matches the size of x and y.\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.plot_date",
    "class": {
        "class method": [
            {
                "method name": "Axes.plot_date(x, y, fmt='o', tz=None, xdate=True, ydate=False, *, data=None, **kwargs)",
                "method text": "[Discouraged] Plot coercing the axis to treat floats as dates.\n\nDiscouraged\nThis method exists for historic reasons and will be deprecated in\nthe future.\n\ndatetime-like data should directly be plotted using\nplot.\nIf you need to plot plain numeric data as Matplotlib date format or\nneed to set a timezone, call ax.xaxis.axis_date /\nax.yaxis.axis_date before plot. See\nAxis.axis_date.\n\n\nSimilar to plot, this plots y vs. x as lines or markers.\nHowever, the axis labels are formatted as dates depending on xdate\nand ydate. Note that plot will work with datetime and\nnumpy.datetime64 objects without resorting to this method.\n\nParameters:\n\nx, yarray-likeThe coordinates of the data points. If xdate or ydate is\nTrue, the respective values x or y are interpreted as\nMatplotlib dates.\n\nfmtstr, optionalThe plot format string. For details, see the corresponding\nparameter in plot.\n\ntztimezone string or datetime.tzinfo, default: rcParams[\"timezone\"] (default: 'UTC')The time zone to use in labeling dates.\n\nxdatebool, default: TrueIf True, the x-axis will be interpreted as Matplotlib dates.\n\nydatebool, default: FalseIf True, the y-axis will be interpreted as Matplotlib dates.\n\n\n\nReturns:\n\nlist of Line2DObjects representing the plotted data.\n\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, y\n\n**kwargsKeyword arguments control the Line2D properties:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nmatplotlib.datesHelper functions on dates.\n\nmatplotlib.dates.date2numConvert dates to num.\n\nmatplotlib.dates.num2dateConvert num to dates.\n\nmatplotlib.dates.drangeCreate an equally spaced sequence of dates.\n\n\n\nNotes\nIf you are using custom date tickers and formatters, it may be\nnecessary to set the formatters/locators after the call to\nplot_date. plot_date will set the default tick locator to\nAutoDateLocator (if the tick locator is not already set to a\nDateLocator instance) and the default tick formatter to\nAutoDateFormatter (if the tick formatter is not already set to a\nDateFormatter instance).\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.step",
    "class": {
        "class method": [
            {
                "method name": "Axes.step(x, y, *args, where='pre', data=None, **kwargs)",
                "method text": "Make a step plot.\nCall signatures:\nstep(x, y, [fmt], *, data=None, where='pre', **kwargs)\nstep(x, y, [fmt], x2, y2, [fmt2], ..., *, where='pre', **kwargs)\n\n\nThis is just a thin wrapper around plot which changes some\nformatting options. Most of the concepts and parameters of plot can be\nused here as well.\n\nNote\nThis method uses a standard plot with a step drawstyle: The x\nvalues are the reference positions and steps extend left/right/both\ndirections depending on where.\nFor the common case where you know the values and edges of the\nsteps, use stairs instead.\n\n\nParameters:\n\nxarray-like1D sequence of x positions. It is assumed, but not checked, that\nit is uniformly increasing.\n\nyarray-like1D sequence of y levels.\n\nfmtstr, optionalA format string, e.g. 'g' for a green line. See plot for a more\ndetailed description.\nNote: While full format strings are accepted, it is recommended to\nonly specify the color. Line styles are currently ignored (use\nthe keyword argument linestyle instead). Markers are accepted\nand plotted on the given positions, however, this is a rarely\nneeded feature for step plots.\n\nwhere{'pre', 'post', 'mid'}, default: 'pre'Define where the steps should be placed:\n\n'pre': The y value is continued constantly to the left from\nevery x position, i.e. the interval (x[i-1], x[i]] has the\nvalue y[i].\n'post': The y value is continued constantly to the right from\nevery x position, i.e. the interval [x[i], x[i+1]) has the\nvalue y[i].\n'mid': Steps occur half-way between the x positions.\n\n\ndataindexable object, optionalAn object with labelled data. If given, provide the label names to\nplot in x and y.\n\n**kwargsAdditional parameters are the same as those for plot.\n\n\n\nReturns:\n\nlist of Line2DObjects representing the plotted data.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.loglog",
    "class": {
        "class method": [
            {
                "method name": "Axes.loglog(*args, **kwargs)",
                "method text": "Make a plot with log scaling on both the x- and y-axis.\nCall signatures:\nloglog([x], y, [fmt], data=None, **kwargs)\nloglog([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\n\nThis is just a thin wrapper around plot which additionally changes\nboth the x-axis and the y-axis to log scaling. All the concepts and\nparameters of plot can be used here as well.\nThe additional parameters base, subs and nonpositive control the\nx/y-axis properties. They are just forwarded to Axes.set_xscale and\nAxes.set_yscale. To use different properties on the x-axis and the\ny-axis, use e.g.\nax.set_xscale(\"log\", base=10); ax.set_yscale(\"log\", base=2).\n\nParameters:\n\nbasefloat, default: 10Base of the logarithm.\n\nsubssequence, optionalThe location of the minor ticks. If None, reasonable locations\nare automatically chosen depending on the number of decades in the\nplot. See Axes.set_xscale/Axes.set_yscale for details.\n\nnonpositive{'mask', 'clip'}, default: 'clip'Non-positive values can be masked as invalid, or clipped to a very\nsmall positive number.\n\n**kwargsAll parameters supported by plot.\n\n\n\nReturns:\n\nlist of Line2DObjects representing the plotted data.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.semilogx",
    "class": {
        "class method": [
            {
                "method name": "Axes.semilogx(*args, **kwargs)",
                "method text": "Make a plot with log scaling on the x-axis.\nCall signatures:\nsemilogx([x], y, [fmt], data=None, **kwargs)\nsemilogx([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\n\nThis is just a thin wrapper around plot which additionally changes\nthe x-axis to log scaling. All the concepts and parameters of plot can\nbe used here as well.\nThe additional parameters base, subs, and nonpositive control the\nx-axis properties. They are just forwarded to Axes.set_xscale.\n\nParameters:\n\nbasefloat, default: 10Base of the x logarithm.\n\nsubsarray-like, optionalThe location of the minor xticks. If None, reasonable locations\nare automatically chosen depending on the number of decades in the\nplot. See Axes.set_xscale for details.\n\nnonpositive{'mask', 'clip'}, default: 'clip'Non-positive values in x can be masked as invalid, or clipped to a\nvery small positive number.\n\n**kwargsAll parameters supported by plot.\n\n\n\nReturns:\n\nlist of Line2DObjects representing the plotted data.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.semilogy",
    "class": {
        "class method": [
            {
                "method name": "Axes.semilogy(*args, **kwargs)",
                "method text": "Make a plot with log scaling on the y-axis.\nCall signatures:\nsemilogy([x], y, [fmt], data=None, **kwargs)\nsemilogy([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\n\nThis is just a thin wrapper around plot which additionally changes\nthe y-axis to log scaling. All the concepts and parameters of plot can\nbe used here as well.\nThe additional parameters base, subs, and nonpositive control the\ny-axis properties. They are just forwarded to Axes.set_yscale.\n\nParameters:\n\nbasefloat, default: 10Base of the y logarithm.\n\nsubsarray-like, optionalThe location of the minor yticks. If None, reasonable locations\nare automatically chosen depending on the number of decades in the\nplot. See Axes.set_yscale for details.\n\nnonpositive{'mask', 'clip'}, default: 'clip'Non-positive values in y can be masked as invalid, or clipped to a\nvery small positive number.\n\n**kwargsAll parameters supported by plot.\n\n\n\nReturns:\n\nlist of Line2DObjects representing the plotted data.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.fill_between",
    "class": {
        "class method": [
            {
                "method name": "Axes.fill_between(x, y1, y2=0, where=None, interpolate=False, step=None, *, data=None, **kwargs)",
                "method text": "Fill the area between two horizontal curves.\nThe curves are defined by the points (x, y1) and (x,\ny2). This creates one or multiple polygons describing the filled\narea.\nYou may exclude some horizontal sections from filling using where.\nBy default, the edges connect the given points directly. Use step\nif the filling should be a step function, i.e. constant in between\nx.\n\nParameters:\n\nxarray (length N)The x coordinates of the nodes defining the curves.\n\ny1array (length N) or scalarThe y coordinates of the nodes defining the first curve.\n\ny2array (length N) or scalar, default: 0The y coordinates of the nodes defining the second curve.\n\nwherearray of bool (length N), optionalDefine where to exclude some horizontal regions from being filled.\nThe filled regions are defined by the coordinates x[where].\nMore precisely, fill between x[i] and x[i+1] if\nwhere[i] and where[i+1]. Note that this definition implies\nthat an isolated True value between two False values in where\nwill not result in filling. Both sides of the True position\nremain unfilled due to the adjacent False values.\n\ninterpolatebool, default: FalseThis option is only relevant if where is used and the two curves\nare crossing each other.\nSemantically, where is often used for y1 > y2 or\nsimilar. By default, the nodes of the polygon defining the filled\nregion will only be placed at the positions in the x array.\nSuch a polygon cannot describe the above semantics close to the\nintersection. The x-sections containing the intersection are\nsimply clipped.\nSetting interpolate to True will calculate the actual\nintersection point and extend the filled region up to this point.\n\nstep{'pre', 'post', 'mid'}, optionalDefine step if the filling should be a step function,\ni.e. constant in between x. The value determines where the\nstep will occur:\n\n'pre': The y value is continued constantly to the left from\nevery x position, i.e. the interval (x[i-1], x[i]] has the\nvalue y[i].\n'post': The y value is continued constantly to the right from\nevery x position, i.e. the interval [x[i], x[i+1]) has the\nvalue y[i].\n'mid': Steps occur half-way between the x positions.\n\n\n\n\nReturns:\n\nPolyCollectionA PolyCollection containing the plotted polygons.\n\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, y1, y2, where\n\n**kwargsAll other keyword arguments are passed on to PolyCollection.\nThey control the Polygon properties:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\narray-like or scalar or None\n\nanimated\nbool\n\nantialiased or aa or antialiaseds\nbool or list of bools\n\narray\narray-like or None\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclim\n(vmin: float, vmax: float)\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncmap\nColormap or str or None\n\ncolor\ncolor or list of RGBA tuples\n\nedgecolor or ec or edgecolors\ncolor or list of colors or 'face'\n\nfacecolor or facecolors or fc\ncolor or list of colors\n\nfigure\nFigure\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or dashes or linestyles or ls\nstr or tuple or list thereof\n\nlinewidth or linewidths or lw\nfloat or list of floats\n\nmouseover\nbool\n\nnorm\nNormalize or str or None\n\noffset_transform or transOffset\nTransform\n\noffsets\n(N, 2) or (2,) array-like\n\npath_effects\nlist of AbstractPathEffect\n\npaths\nlist of array-like\n\npicker\nNone or bool or float or callable\n\npickradius\nfloat\n\nrasterized\nbool\n\nsizes\nnumpy.ndarray or None\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nurls\nlist of str or None\n\nverts\nlist of array-like\n\nverts_and_codes\nunknown\n\nvisible\nbool\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nfill_betweenFill between two sets of y-values.\n\nfill_betweenxFill between two sets of x-values.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.fill_betweenx",
    "class": {
        "class method": [
            {
                "method name": "Axes.fill_betweenx(y, x1, x2=0, where=None, step=None, interpolate=False, *, data=None, **kwargs)",
                "method text": "Fill the area between two vertical curves.\nThe curves are defined by the points (y, x1) and (y,\nx2). This creates one or multiple polygons describing the filled\narea.\nYou may exclude some vertical sections from filling using where.\nBy default, the edges connect the given points directly. Use step\nif the filling should be a step function, i.e. constant in between\ny.\n\nParameters:\n\nyarray (length N)The y coordinates of the nodes defining the curves.\n\nx1array (length N) or scalarThe x coordinates of the nodes defining the first curve.\n\nx2array (length N) or scalar, default: 0The x coordinates of the nodes defining the second curve.\n\nwherearray of bool (length N), optionalDefine where to exclude some vertical regions from being filled.\nThe filled regions are defined by the coordinates y[where].\nMore precisely, fill between y[i] and y[i+1] if\nwhere[i] and where[i+1]. Note that this definition implies\nthat an isolated True value between two False values in where\nwill not result in filling. Both sides of the True position\nremain unfilled due to the adjacent False values.\n\ninterpolatebool, default: FalseThis option is only relevant if where is used and the two curves\nare crossing each other.\nSemantically, where is often used for x1 > x2 or\nsimilar. By default, the nodes of the polygon defining the filled\nregion will only be placed at the positions in the y array.\nSuch a polygon cannot describe the above semantics close to the\nintersection. The y-sections containing the intersection are\nsimply clipped.\nSetting interpolate to True will calculate the actual\nintersection point and extend the filled region up to this point.\n\nstep{'pre', 'post', 'mid'}, optionalDefine step if the filling should be a step function,\ni.e. constant in between y. The value determines where the\nstep will occur:\n\n'pre': The y value is continued constantly to the left from\nevery x position, i.e. the interval (x[i-1], x[i]] has the\nvalue y[i].\n'post': The y value is continued constantly to the right from\nevery x position, i.e. the interval [x[i], x[i+1]) has the\nvalue y[i].\n'mid': Steps occur half-way between the x positions.\n\n\n\n\nReturns:\n\nPolyCollectionA PolyCollection containing the plotted polygons.\n\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\ny, x1, x2, where\n\n**kwargsAll other keyword arguments are passed on to PolyCollection.\nThey control the Polygon properties:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\narray-like or scalar or None\n\nanimated\nbool\n\nantialiased or aa or antialiaseds\nbool or list of bools\n\narray\narray-like or None\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclim\n(vmin: float, vmax: float)\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncmap\nColormap or str or None\n\ncolor\ncolor or list of RGBA tuples\n\nedgecolor or ec or edgecolors\ncolor or list of colors or 'face'\n\nfacecolor or facecolors or fc\ncolor or list of colors\n\nfigure\nFigure\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or dashes or linestyles or ls\nstr or tuple or list thereof\n\nlinewidth or linewidths or lw\nfloat or list of floats\n\nmouseover\nbool\n\nnorm\nNormalize or str or None\n\noffset_transform or transOffset\nTransform\n\noffsets\n(N, 2) or (2,) array-like\n\npath_effects\nlist of AbstractPathEffect\n\npaths\nlist of array-like\n\npicker\nNone or bool or float or callable\n\npickradius\nfloat\n\nrasterized\nbool\n\nsizes\nnumpy.ndarray or None\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nurls\nlist of str or None\n\nverts\nlist of array-like\n\nverts_and_codes\nunknown\n\nvisible\nbool\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nfill_betweenFill between two sets of y-values.\n\nfill_betweenxFill between two sets of x-values.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.bar",
    "class": {
        "class method": [
            {
                "method name": "Axes.bar(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)",
                "method text": "Make a bar plot.\nThe bars are positioned at x with the given alignment. Their\ndimensions are given by height and width. The vertical baseline\nis bottom (default 0).\nMany parameters can take either a single value applying to all bars\nor a sequence of values, one for each bar.\n\nParameters:\n\nxfloat or array-likeThe x coordinates of the bars. See also align for the\nalignment of the bars to the coordinates.\n\nheightfloat or array-likeThe height(s) of the bars.\nNote that if bottom has units (e.g. datetime), height should be in\nunits that are a difference from the value of bottom (e.g. timedelta).\n\nwidthfloat or array-like, default: 0.8The width(s) of the bars.\nNote that if x has units (e.g. datetime), then width should be in\nunits that are a difference (e.g. timedelta) around the x values.\n\nbottomfloat or array-like, default: 0The y coordinate(s) of the bottom side(s) of the bars.\nNote that if bottom has units, then the y-axis will get a Locator and\nFormatter appropriate for the units (e.g. dates, or categorical).\n\nalign{'center', 'edge'}, default: 'center'Alignment of the bars to the x coordinates:\n\n'center': Center the base on the x positions.\n'edge': Align the left edges of the bars with the x positions.\n\nTo align the bars on the right edge pass a negative width and\nalign='edge'.\n\n\n\nReturns:\n\nBarContainerContainer with all the bars and optionally errorbars.\n\n\n\nOther Parameters:\n\ncolorcolor or list of color, optionalThe colors of the bar faces.\n\nedgecolorcolor or list of color, optionalThe colors of the bar edges.\n\nlinewidthfloat or array-like, optionalWidth of the bar edge(s). If 0, don't draw edges.\n\ntick_labelstr or list of str, optionalThe tick labels of the bars.\nDefault: None (Use default numeric labels.)\n\nlabelstr or list of str, optionalA single label is attached to the resulting BarContainer as a\nlabel for the whole dataset.\nIf a list is provided, it must be the same length as x and\nlabels the individual bars. Repeated labels are not de-duplicated\nand will cause repeated label entries, so this is best used when\nbars also differ in style (e.g., by passing a list to color.)\n\nxerr, yerrfloat or array-like of shape(N,) or shape(2, N), optionalIf not None, add horizontal / vertical errorbars to the bar tips.\nThe values are +/- sizes relative to the data:\n\nscalar: symmetric +/- values for all bars\nshape(N,): symmetric +/- values for each bar\nshape(2, N): Separate - and + values for each bar. First row\ncontains the lower errors, the second row contains the upper\nerrors.\nNone: No errorbar. (Default)\n\nSee Different ways of specifying error bars for an example on\nthe usage of xerr and yerr.\n\necolorcolor or list of color, default: 'black'The line color of the errorbars.\n\ncapsizefloat, default: rcParams[\"errorbar.capsize\"] (default: 0.0)The length of the error bar caps in points.\n\nerror_kwdict, optionalDictionary of keyword arguments to be passed to the\nerrorbar method. Values of ecolor or capsize defined\nhere take precedence over the independent keyword arguments.\n\nlogbool, default: FalseIf True, set the y-axis to be log scale.\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n**kwargsRectangle properties\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nangle\nunknown\n\nanimated\nbool\n\nantialiased or aa\nbool or None\n\nbounds\n(left, bottom, width, height)\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor\ncolor\n\nedgecolor or ec\ncolor or None\n\nfacecolor or fc\ncolor or None\n\nfigure\nFigure\n\nfill\nbool\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nheight\nunknown\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat or None\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nNone or bool or float or callable\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nvisible\nbool\n\nwidth\nunknown\n\nx\nunknown\n\nxy\n(float, float)\n\ny\nunknown\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nbarhPlot a horizontal bar plot.\n\n\n\nNotes\nStacked bars can be achieved by passing individual bottom values per\nbar. See Stacked bar chart.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.barh",
    "class": {
        "class method": [
            {
                "method name": "Axes.barh(y, width, height=0.8, left=None, *, align='center', data=None, **kwargs)",
                "method text": "Make a horizontal bar plot.\nThe bars are positioned at y with the given alignment. Their\ndimensions are given by width and height. The horizontal baseline\nis left (default 0).\nMany parameters can take either a single value applying to all bars\nor a sequence of values, one for each bar.\n\nParameters:\n\nyfloat or array-likeThe y coordinates of the bars. See also align for the\nalignment of the bars to the coordinates.\n\nwidthfloat or array-likeThe width(s) of the bars.\nNote that if left has units (e.g. datetime), width should be in\nunits that are a difference from the value of left (e.g. timedelta).\n\nheightfloat or array-like, default: 0.8The heights of the bars.\nNote that if y has units (e.g. datetime), then height should be in\nunits that are a difference (e.g. timedelta) around the y values.\n\nleftfloat or array-like, default: 0The x coordinates of the left side(s) of the bars.\nNote that if left has units, then the x-axis will get a Locator and\nFormatter appropriate for the units (e.g. dates, or categorical).\n\nalign{'center', 'edge'}, default: 'center'Alignment of the base to the y coordinates*:\n\n'center': Center the bars on the y positions.\n'edge': Align the bottom edges of the bars with the y\npositions.\n\nTo align the bars on the top edge pass a negative height and\nalign='edge'.\n\n\n\nReturns:\n\nBarContainerContainer with all the bars and optionally errorbars.\n\n\n\nOther Parameters:\n\ncolorcolor or list of color, optionalThe colors of the bar faces.\n\nedgecolorcolor or list of color, optionalThe colors of the bar edges.\n\nlinewidthfloat or array-like, optionalWidth of the bar edge(s). If 0, don't draw edges.\n\ntick_labelstr or list of str, optionalThe tick labels of the bars.\nDefault: None (Use default numeric labels.)\n\nlabelstr or list of str, optionalA single label is attached to the resulting BarContainer as a\nlabel for the whole dataset.\nIf a list is provided, it must be the same length as y and\nlabels the individual bars. Repeated labels are not de-duplicated\nand will cause repeated label entries, so this is best used when\nbars also differ in style (e.g., by passing a list to color.)\n\nxerr, yerrfloat or array-like of shape(N,) or shape(2, N), optionalIf not None, add horizontal / vertical errorbars to the bar tips.\nThe values are +/- sizes relative to the data:\n\nscalar: symmetric +/- values for all bars\nshape(N,): symmetric +/- values for each bar\nshape(2, N): Separate - and + values for each bar. First row\ncontains the lower errors, the second row contains the upper\nerrors.\nNone: No errorbar. (default)\n\nSee Different ways of specifying error bars for an example on\nthe usage of xerr and yerr.\n\necolorcolor or list of color, default: 'black'The line color of the errorbars.\n\ncapsizefloat, default: rcParams[\"errorbar.capsize\"] (default: 0.0)The length of the error bar caps in points.\n\nerror_kwdict, optionalDictionary of keyword arguments to be passed to the\nerrorbar method. Values of ecolor or capsize defined\nhere take precedence over the independent keyword arguments.\n\nlogbool, default: FalseIf True, set the x-axis to be log scale.\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n**kwargsRectangle properties\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nangle\nunknown\n\nanimated\nbool\n\nantialiased or aa\nbool or None\n\nbounds\n(left, bottom, width, height)\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor\ncolor\n\nedgecolor or ec\ncolor or None\n\nfacecolor or fc\ncolor or None\n\nfigure\nFigure\n\nfill\nbool\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nheight\nunknown\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat or None\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nNone or bool or float or callable\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nvisible\nbool\n\nwidth\nunknown\n\nx\nunknown\n\nxy\n(float, float)\n\ny\nunknown\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nbarPlot a vertical bar plot.\n\n\n\nNotes\nStacked bars can be achieved by passing individual left values per\nbar. See\nDiscrete distribution as horizontal bar chart.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.bar_label",
    "class": {
        "class method": [
            {
                "method name": "Axes.bar_label(container, labels=None, *, fmt='%g', label_type='edge', padding=0, **kwargs)",
                "method text": "Label a bar plot.\nAdds labels to bars in the given BarContainer.\nYou may need to adjust the axis limits to fit the labels.\n\nParameters:\n\ncontainerBarContainerContainer with all the bars and optionally errorbars, likely\nreturned from bar or barh.\n\nlabelsarray-like, optionalA list of label texts, that should be displayed. If not given, the\nlabel texts will be the data values formatted with fmt.\n\nfmtstr or callable, default: '%g'An unnamed %-style or {}-style format string for the label or a\nfunction to call with the value as the first argument.\nWhen fmt is a string and can be interpreted in both formats,\n%-style takes precedence over {}-style.\n\nNew in version 3.7: Support for {}-style format string and callables.\n\n\nlabel_type{'edge', 'center'}, default: 'edge'The label type. Possible values:\n\n'edge': label placed at the end-point of the bar segment, and the\nvalue displayed will be the position of that end-point.\n'center': label placed in the center of the bar segment, and the\nvalue displayed will be the length of that segment.\n(useful for stacked bars, i.e.,\nBar Label Demo)\n\n\npaddingfloat, default: 0Distance of label from the end of the bar, in points.\n\n**kwargsAny remaining keyword arguments are passed through to\nAxes.annotate. The alignment parameters (\nhorizontalalignment / ha, verticalalignment / va) are\nnot supported because the labels are automatically aligned to\nthe bars.\n\n\n\nReturns:\n\nlist of AnnotationA list of Annotation instances for the labels.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.stem",
    "class": {
        "class method": [
            {
                "method name": "Axes.stem(*args, linefmt=None, markerfmt=None, basefmt=None, bottom=0, label=None, orientation='vertical', data=None)",
                "method text": "Create a stem plot.\nA stem plot draws lines perpendicular to a baseline at each location\nlocs from the baseline to heads, and places a marker there. For\nvertical stem plots (the default), the locs are x positions, and\nthe heads are y values. For horizontal stem plots, the locs are\ny positions, and the heads are x values.\nCall signature:\nstem([locs,] heads, linefmt=None, markerfmt=None, basefmt=None)\n\n\nThe locs-positions are optional. linefmt may be provided as\npositional, but all other formats must be provided as keyword\narguments.\n\nParameters:\n\nlocsarray-like, default: (0, 1, ..., len(heads) - 1)For vertical stem plots, the x-positions of the stems.\nFor horizontal stem plots, the y-positions of the stems.\n\nheadsarray-likeFor vertical stem plots, the y-values of the stem heads.\nFor horizontal stem plots, the x-values of the stem heads.\n\nlinefmtstr, optionalA string defining the color and/or linestyle of the vertical lines:\n\n\nCharacter\nLine Style\n\n\n\n'-'\nsolid line\n\n'--'\ndashed line\n\n'-.'\ndash-dot line\n\n':'\ndotted line\n\n\n\nDefault: 'C0-', i.e. solid line with the first color of the color\ncycle.\nNote: Markers specified through this parameter (e.g. 'x') will be\nsilently ignored. Instead, markers should be specified using\nmarkerfmt.\n\nmarkerfmtstr, optionalA string defining the color and/or shape of the markers at the stem\nheads. If the marker is not given, use the marker 'o', i.e. filled\ncircles. If the color is not given, use the color from linefmt.\n\nbasefmtstr, default: 'C3-' ('C2-' in classic mode)A format string defining the properties of the baseline.\n\norientation{'vertical', 'horizontal'}, default: 'vertical'If 'vertical', will produce a plot with stems oriented vertically,\nIf 'horizontal', the stems will be oriented horizontally.\n\nbottomfloat, default: 0The y/x-position of the baseline (depending on orientation).\n\nlabelstr, default: NoneThe label to use for the stems in legends.\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n\n\nReturns:\n\nStemContainerThe container may be treated like a tuple\n(markerline, stemlines, baseline)\n\n\n\n\nNotes\n\nSee also\nThe MATLAB function\nstem\nwhich inspired this method.\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.eventplot",
    "class": {
        "class method": [
            {
                "method name": "Axes.eventplot(positions, orientation='horizontal', lineoffsets=1, linelengths=1, linewidths=None, colors=None, alpha=None, linestyles='solid', *, data=None, **kwargs)",
                "method text": "Plot identical parallel lines at the given positions.\nThis type of plot is commonly used in neuroscience for representing\nneural events, where it is usually called a spike raster, dot raster,\nor raster plot.\nHowever, it is useful in any situation where you wish to show the\ntiming or position of multiple sets of discrete events, such as the\narrival times of people to a business on each day of the month or the\ndate of hurricanes each year of the last century.\n\nParameters:\n\npositionsarray-like or list of array-likeA 1D array-like defines the positions of one sequence of events.\nMultiple groups of events may be passed as a list of array-likes.\nEach group can be styled independently by passing lists of values\nto lineoffsets, linelengths, linewidths, colors and\nlinestyles.\nNote that positions can be a 2D array, but in practice different\nevent groups usually have different counts so that one will use a\nlist of different-length arrays rather than a 2D array.\n\norientation{'horizontal', 'vertical'}, default: 'horizontal'The direction of the event sequence:\n\n'horizontal': the events are arranged horizontally.\nThe indicator lines are vertical.\n'vertical': the events are arranged vertically.\nThe indicator lines are horizontal.\n\n\nlineoffsetsfloat or array-like, default: 1The offset of the center of the lines from the origin, in the\ndirection orthogonal to orientation.\nIf positions is 2D, this can be a sequence with length matching\nthe length of positions.\n\nlinelengthsfloat or array-like, default: 1The total height of the lines (i.e. the lines stretches from\nlineoffset - linelength/2 to lineoffset + linelength/2).\nIf positions is 2D, this can be a sequence with length matching\nthe length of positions.\n\nlinewidthsfloat or array-like, default: rcParams[\"lines.linewidth\"] (default: 1.5)The line width(s) of the event lines, in points.\nIf positions is 2D, this can be a sequence with length matching\nthe length of positions.\n\ncolorscolor or list of colors, default: rcParams[\"lines.color\"] (default: 'C0')The color(s) of the event lines.\nIf positions is 2D, this can be a sequence with length matching\nthe length of positions.\n\nalphafloat or array-like, default: 1The alpha blending value(s), between 0 (transparent) and 1\n(opaque).\nIf positions is 2D, this can be a sequence with length matching\nthe length of positions.\n\nlinestylesstr or tuple or list of such values, default: 'solid'Default is 'solid'. Valid strings are ['solid', 'dashed',\n'dashdot', 'dotted', '-', '--', '-.', ':']. Dash tuples\nshould be of the form:\n(offset, onoffseq),\n\n\nwhere onoffseq is an even length tuple of on and off ink\nin points.\nIf positions is 2D, this can be a sequence with length matching\nthe length of positions.\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\npositions, lineoffsets, linelengths, linewidths, colors, linestyles\n\n**kwargsOther keyword arguments are line collection properties. See\nLineCollection for a list of the valid properties.\n\n\n\nReturns:\n\nlist of EventCollectionThe EventCollection that were added.\n\n\n\n\nNotes\nFor linelengths, linewidths, colors, alpha and linestyles, if\nonly a single value is given, that value is applied to all lines. If an\narray-like is given, it must have the same length as positions, and\neach value will be applied to the corresponding row of the array.\nExamples\n(Source code, 2x.png, png)\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.pie",
    "class": {
        "class method": [
            {
                "method name": "Axes.pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=0, radius=1, counterclock=True, wedgeprops=None, textprops=None, center=(0, 0), frame=False, rotatelabels=False, *, normalize=True, hatch=None, data=None)",
                "method text": "Plot a pie chart.\nMake a pie chart of array x. The fractional area of each wedge is\ngiven by x/sum(x).\nThe wedges are plotted counterclockwise, by default starting from the\nx-axis.\n\nParameters:\n\nx1D array-likeThe wedge sizes.\n\nexplodearray-like, default: NoneIf not None, is a len(x) array which specifies the fraction\nof the radius with which to offset each wedge.\n\nlabelslist, default: NoneA sequence of strings providing the labels for each wedge\n\ncolorscolor or array-like of color, default: NoneA sequence of colors through which the pie chart will cycle. If\nNone, will use the colors in the currently active cycle.\n\nhatchstr or list, default: NoneHatching pattern applied to all pie wedges or sequence of patterns\nthrough which the chart will cycle. For a list of valid patterns,\nsee Hatch style reference.\n\nNew in version 3.7.\n\n\nautopctNone or str or callable, default: NoneIf not None, autopct is a string or function used to label the\nwedges with their numeric value. The label will be placed inside\nthe wedge. If autopct is a format string, the label will be\nfmt % pct. If autopct is a function, then it will be called.\n\npctdistancefloat, default: 0.6The relative distance along the radius at which the text\ngenerated by autopct is drawn. To draw the text outside the pie,\nset pctdistance > 1. This parameter is ignored if autopct is\nNone.\n\nlabeldistancefloat or None, default: 1.1The relative distance along the radius at which the labels are\ndrawn. To draw the labels inside the pie, set labeldistance < 1.\nIf set to None, labels are not drawn but are still stored for\nuse in legend.\n\nshadowbool or dict, default: FalseIf bool, whether to draw a shadow beneath the pie. If dict, draw a shadow\npassing the properties in the dict to Shadow.\n\nNew in version 3.8: shadow can be a dict.\n\n\nstartanglefloat, default: 0 degreesThe angle by which the start of the pie is rotated,\ncounterclockwise from the x-axis.\n\nradiusfloat, default: 1The radius of the pie.\n\ncounterclockbool, default: TrueSpecify fractions direction, clockwise or counterclockwise.\n\nwedgepropsdict, default: NoneDict of arguments passed to each patches.Wedge of the pie.\nFor example, wedgeprops = {'linewidth': 3} sets the width of\nthe wedge border lines equal to 3. By default, clip_on=False.\nWhen there is a conflict between these properties and other\nkeywords, properties passed to wedgeprops take precedence.\n\ntextpropsdict, default: NoneDict of arguments to pass to the text objects.\n\ncenter(float, float), default: (0, 0)The coordinates of the center of the chart.\n\nframebool, default: FalsePlot Axes frame with the chart if true.\n\nrotatelabelsbool, default: FalseRotate each label to the angle of the corresponding slice if true.\n\nnormalizebool, default: TrueWhen True, always make a full pie by normalizing x so that\nsum(x) == 1. False makes a partial pie if sum(x) <= 1\nand raises a ValueError for sum(x) > 1.\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, explode, labels, colors\n\n\n\nReturns:\n\npatcheslistA sequence of matplotlib.patches.Wedge instances\n\ntextslistA list of the label Text instances.\n\nautotextslistA list of Text instances for the numeric labels. This will only\nbe returned if the parameter autopct is not None.\n\n\n\n\nNotes\nThe pie chart will probably look best if the figure and Axes are\nsquare, or the Axes aspect is equal.\nThis method sets the aspect ratio of the axis to \"equal\".\nThe Axes aspect ratio can be controlled with Axes.set_aspect.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.stackplot",
    "class": {
        "class method": [
            {
                "method name": "Axes.stackplot(x, *args, labels=(), colors=None, baseline='zero', data=None, **kwargs)",
                "method text": "Draw a stacked area plot.\n\nParameters:\n\nx(N,) array-like\ny(M, N) array-likeThe data is assumed to be unstacked. Each of the following\ncalls is legal:\nstackplot(x, y)           # where y has shape (M, N)\nstackplot(x, y1, y2, y3)  # where y1, y2, y3, y4 have length N\n\n\n\nbaseline{'zero', 'sym', 'wiggle', 'weighted_wiggle'}Method used to calculate the baseline:\n\n'zero': Constant zero baseline, i.e. a simple stacked plot.\n'sym': Symmetric around zero and is sometimes called\n'ThemeRiver'.\n'wiggle': Minimizes the sum of the squared slopes.\n'weighted_wiggle': Does the same but weights to account for\nsize of each layer. It is also called 'Streamgraph'-layout. More\ndetails can be found at http://leebyron.com/streamgraph/.\n\n\nlabelslist of str, optionalA sequence of labels to assign to each data series. If unspecified,\nthen no labels will be applied to artists.\n\ncolorslist of color, optionalA sequence of colors to be cycled through and used to color the stacked\nareas. The sequence need not be exactly the same length as the number\nof provided y, in which case the colors will repeat from the\nbeginning.\nIf not specified, the colors from the Axes property cycle will be used.\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n**kwargsAll other keyword arguments are passed to Axes.fill_between.\n\n\n\nReturns:\n\nlist of PolyCollectionA list of PolyCollection instances, one for each element in the\nstacked area plot.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.broken_barh",
    "class": {
        "class method": [
            {
                "method name": "Axes.broken_barh(xranges, yrange, *, data=None, **kwargs)",
                "method text": "Plot a horizontal sequence of rectangles.\nA rectangle is drawn for each element of xranges. All rectangles\nhave the same vertical position and size defined by yrange.\n\nParameters:\n\nxrangessequence of tuples (xmin, xwidth)The x-positions and extents of the rectangles. For each tuple\n(xmin, xwidth) a rectangle is drawn from xmin to xmin +\nxwidth.\n\nyrange(ymin, yheight)The y-position and extent for all the rectangles.\n\n\n\nReturns:\n\nPolyCollection\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n**kwargsPolyCollection propertiesEach kwarg can be either a single argument applying to all\nrectangles, e.g.:\nfacecolors='black'\n\n\nor a sequence of arguments over which is cycled, e.g.:\nfacecolors=('black', 'blue')\n\n\nwould create interleaving black and blue rectangles.\nSupported keywords:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\narray-like or scalar or None\n\nanimated\nbool\n\nantialiased or aa or antialiaseds\nbool or list of bools\n\narray\narray-like or None\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclim\n(vmin: float, vmax: float)\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncmap\nColormap or str or None\n\ncolor\ncolor or list of RGBA tuples\n\nedgecolor or ec or edgecolors\ncolor or list of colors or 'face'\n\nfacecolor or facecolors or fc\ncolor or list of colors\n\nfigure\nFigure\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or dashes or linestyles or ls\nstr or tuple or list thereof\n\nlinewidth or linewidths or lw\nfloat or list of floats\n\nmouseover\nbool\n\nnorm\nNormalize or str or None\n\noffset_transform or transOffset\nTransform\n\noffsets\n(N, 2) or (2,) array-like\n\npath_effects\nlist of AbstractPathEffect\n\npaths\nlist of array-like\n\npicker\nNone or bool or float or callable\n\npickradius\nfloat\n\nrasterized\nbool\n\nsizes\nnumpy.ndarray or None\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nurls\nlist of str or None\n\nverts\nlist of array-like\n\nverts_and_codes\nunknown\n\nvisible\nbool\n\nzorder\nfloat\n\n\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.vlines",
    "class": {
        "class method": [
            {
                "method name": "Axes.vlines(x, ymin, ymax, colors=None, linestyles='solid', label='', *, data=None, **kwargs)",
                "method text": "Plot vertical lines at each x from ymin to ymax.\n\nParameters:\n\nxfloat or array-likex-indexes where to plot the lines.\n\nymin, ymaxfloat or array-likeRespective beginning and end of each line. If scalars are\nprovided, all lines will have the same length.\n\ncolorscolor or list of colors, default: rcParams[\"lines.color\"] (default: 'C0')\nlinestyles{'solid', 'dashed', 'dashdot', 'dotted'}, default: 'solid'\nlabelstr, default: ''\n\n\nReturns:\n\nLineCollection\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, ymin, ymax, colors\n\n**kwargsLineCollection properties.\n\n\n\n\nSee also\n\nhlineshorizontal lines\n\naxvlinevertical line across the Axes\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.hlines",
    "class": {
        "class method": [
            {
                "method name": "Axes.hlines(y, xmin, xmax, colors=None, linestyles='solid', label='', *, data=None, **kwargs)",
                "method text": "Plot horizontal lines at each y from xmin to xmax.\n\nParameters:\n\nyfloat or array-likey-indexes where to plot the lines.\n\nxmin, xmaxfloat or array-likeRespective beginning and end of each line. If scalars are\nprovided, all lines will have the same length.\n\ncolorscolor or list of colors, default: rcParams[\"lines.color\"] (default: 'C0')\nlinestyles{'solid', 'dashed', 'dashdot', 'dotted'}, default: 'solid'\nlabelstr, default: ''\n\n\nReturns:\n\nLineCollection\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\ny, xmin, xmax, colors\n\n**kwargsLineCollection properties.\n\n\n\n\nSee also\n\nvlinesvertical lines\n\naxhlinehorizontal line across the Axes\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.fill",
    "class": {
        "class method": [
            {
                "method name": "Axes.fill(*args, data=None, **kwargs)",
                "method text": "Plot filled polygons.\n\nParameters:\n\n*argssequence of x, y, [color]Each polygon is defined by the lists of x and y positions of\nits nodes, optionally followed by a color specifier. See\nmatplotlib.colors for supported color specifiers. The\nstandard color cycle is used for polygons without a color\nspecifier.\nYou can plot multiple polygons by providing multiple x, y,\n[color] groups.\nFor example, each of the following is legal:\nax.fill(x, y)                    # a polygon with default color\nax.fill(x, y, \"b\")               # a blue polygon\nax.fill(x, y, x2, y2)            # two polygons\nax.fill(x, y, \"b\", x2, y2, \"r\")  # a blue and a red polygon\n\n\n\ndataindexable object, optionalAn object with labelled data. If given, provide the label names to\nplot in x and y, e.g.:\nax.fill(\"time\", \"signal\",\n        data={\"time\": [0, 1, 2], \"signal\": [0, 1, 0]})\n\n\n\n\n\nReturns:\n\nlist of Polygon\n\n\nOther Parameters:\n\n**kwargsPolygon properties\n\n\n\nNotes\nUse fill_between() if you would like to fill the region between\ntwo curves.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.axhline",
    "class": {
        "class method": [
            {
                "method name": "Axes.axhline(y=0, xmin=0, xmax=1, **kwargs)",
                "method text": "Add a horizontal line across the Axes.\n\nParameters:\n\nyfloat, default: 0y position in data coordinates of the horizontal line.\n\nxminfloat, default: 0Should be between 0 and 1, 0 being the far left of the plot, 1 the\nfar right of the plot.\n\nxmaxfloat, default: 1Should be between 0 and 1, 0 being the far left of the plot, 1 the\nfar right of the plot.\n\n\n\nReturns:\n\nLine2D\n\n\nOther Parameters:\n\n**kwargsValid keyword arguments are Line2D properties, except for\n'transform':\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nhlinesAdd horizontal lines in data coordinates.\n\naxhspanAdd a horizontal span (rectangle) across the axis.\n\naxlineAdd a line with an arbitrary slope.\n\n\n\nExamples\n\ndraw a thick red hline at 'y' = 0 that spans the xrange:\n>>> axhline(linewidth=4, color='r')\n\n\n\ndraw a default hline at 'y' = 1 that spans the xrange:\n>>> axhline(y=1)\n\n\n\ndraw a default hline at 'y' = .5 that spans the middle half of\nthe xrange:\n>>> axhline(y=.5, xmin=0.25, xmax=0.75)\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.axhspan",
    "class": {
        "class method": [
            {
                "method name": "Axes.axhspan(ymin, ymax, xmin=0, xmax=1, **kwargs)",
                "method text": "Add a horizontal span (rectangle) across the Axes.\nThe rectangle spans from ymin to ymax vertically, and, by default,\nthe whole x-axis horizontally. The x-span can be set using xmin\n(default: 0) and xmax (default: 1) which are in axis units; e.g.\nxmin = 0.5 always refers to the middle of the x-axis regardless of\nthe limits set by set_xlim.\n\nParameters:\n\nyminfloatLower y-coordinate of the span, in data units.\n\nymaxfloatUpper y-coordinate of the span, in data units.\n\nxminfloat, default: 0Lower x-coordinate of the span, in x-axis (0-1) units.\n\nxmaxfloat, default: 1Upper x-coordinate of the span, in x-axis (0-1) units.\n\n\n\nReturns:\n\nPolygonHorizontal span (rectangle) from (xmin, ymin) to (xmax, ymax).\n\n\n\nOther Parameters:\n\n**kwargsPolygon properties\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool or None\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\nclosed\nbool\n\ncolor\ncolor\n\nedgecolor or ec\ncolor or None\n\nfacecolor or fc\ncolor or None\n\nfigure\nFigure\n\nfill\nbool\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat or None\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nNone or bool or float or callable\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nvisible\nbool\n\nxy\n(N, 2) array-like\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\naxvspanAdd a vertical span across the Axes.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.axvline",
    "class": {
        "class method": [
            {
                "method name": "Axes.axvline(x=0, ymin=0, ymax=1, **kwargs)",
                "method text": "Add a vertical line across the Axes.\n\nParameters:\n\nxfloat, default: 0x position in data coordinates of the vertical line.\n\nyminfloat, default: 0Should be between 0 and 1, 0 being the bottom of the plot, 1 the\ntop of the plot.\n\nymaxfloat, default: 1Should be between 0 and 1, 0 being the bottom of the plot, 1 the\ntop of the plot.\n\n\n\nReturns:\n\nLine2D\n\n\nOther Parameters:\n\n**kwargsValid keyword arguments are Line2D properties, except for\n'transform':\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nvlinesAdd vertical lines in data coordinates.\n\naxvspanAdd a vertical span (rectangle) across the axis.\n\naxlineAdd a line with an arbitrary slope.\n\n\n\nExamples\n\ndraw a thick red vline at x = 0 that spans the yrange:\n>>> axvline(linewidth=4, color='r')\n\n\n\ndraw a default vline at x = 1 that spans the yrange:\n>>> axvline(x=1)\n\n\n\ndraw a default vline at x = .5 that spans the middle half of\nthe yrange:\n>>> axvline(x=.5, ymin=0.25, ymax=0.75)\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.axvspan",
    "class": {
        "class method": [
            {
                "method name": "Axes.axvspan(xmin, xmax, ymin=0, ymax=1, **kwargs)",
                "method text": "Add a vertical span (rectangle) across the Axes.\nThe rectangle spans from xmin to xmax horizontally, and, by\ndefault, the whole y-axis vertically. The y-span can be set using\nymin (default: 0) and ymax (default: 1) which are in axis units;\ne.g. ymin = 0.5 always refers to the middle of the y-axis\nregardless of the limits set by set_ylim.\n\nParameters:\n\nxminfloatLower x-coordinate of the span, in data units.\n\nxmaxfloatUpper x-coordinate of the span, in data units.\n\nyminfloat, default: 0Lower y-coordinate of the span, in y-axis units (0-1).\n\nymaxfloat, default: 1Upper y-coordinate of the span, in y-axis units (0-1).\n\n\n\nReturns:\n\nPolygonVertical span (rectangle) from (xmin, ymin) to (xmax, ymax).\n\n\n\nOther Parameters:\n\n**kwargsPolygon properties\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool or None\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\nclosed\nbool\n\ncolor\ncolor\n\nedgecolor or ec\ncolor or None\n\nfacecolor or fc\ncolor or None\n\nfigure\nFigure\n\nfill\nbool\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat or None\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nNone or bool or float or callable\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nvisible\nbool\n\nxy\n(N, 2) array-like\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\naxhspanAdd a horizontal span across the Axes.\n\n\n\nExamples\nDraw a vertical, green, translucent rectangle from x = 1.25 to\nx = 1.55 that spans the yrange of the Axes.\n>>> axvspan(1.25, 1.55, facecolor='g', alpha=0.5)\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.axline",
    "class": {
        "class method": [
            {
                "method name": "Axes.axline(xy1, xy2=None, *, slope=None, **kwargs)",
                "method text": "Add an infinitely long straight line.\nThe line can be defined either by two points xy1 and xy2, or\nby one point xy1 and a slope.\nThis draws a straight line \"on the screen\", regardless of the x and y\nscales, and is thus also suitable for drawing exponential decays in\nsemilog plots, power laws in loglog plots, etc. However, slope\nshould only be used with linear scales; It has no clear meaning for\nall other scales, and thus the behavior is undefined. Please specify\nthe line using the points xy1, xy2 for non-linear scales.\nThe transform keyword argument only applies to the points xy1,\nxy2. The slope (if given) is always in data coordinates. This can\nbe used e.g. with ax.transAxes for drawing grid lines with a fixed\nslope.\n\nParameters:\n\nxy1, xy2(float, float)Points for the line to pass through.\nEither xy2 or slope has to be given.\n\nslopefloat, optionalThe slope of the line. Either xy2 or slope has to be given.\n\n\n\nReturns:\n\nLine2D\n\n\nOther Parameters:\n\n**kwargsValid kwargs are Line2D properties\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\naxhlinefor horizontal lines\n\naxvlinefor vertical lines\n\n\n\nExamples\nDraw a thick red line passing through (0, 0) and (1, 1):\n>>> axline((0, 0), (1, 1), linewidth=4, color='r')\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.acorr",
    "class": {
        "class method": [
            {
                "method name": "Axes.acorr(x, *, data=None, **kwargs)",
                "method text": "Plot the autocorrelation of x.\n\nParameters:\n\nxarray-like\ndetrendcallable, default: mlab.detrend_none (no detrending)A detrending function applied to x. It must have the\nsignature\ndetrend(x: np.ndarray) -> np.ndarray\n\n\n\nnormedbool, default: TrueIf True, input vectors are normalised to unit length.\n\nusevlinesbool, default: TrueDetermines the plot style.\nIf True, vertical lines are plotted from 0 to the acorr value\nusing Axes.vlines. Additionally, a horizontal line is plotted\nat y=0 using Axes.axhline.\nIf False, markers are plotted at the acorr values using\nAxes.plot.\n\nmaxlagsint, default: 10Number of lags to show. If None, will return all\n2 * len(x) - 1 lags.\n\n\n\nReturns:\n\nlagsarray (length 2*maxlags+1)The lag vector.\n\ncarray (length 2*maxlags+1)The auto correlation vector.\n\nlineLineCollection or Line2DArtist added to the Axes of the correlation:\n\nLineCollection if usevlines is True.\nLine2D if usevlines is False.\n\n\nbLine2D or NoneHorizontal line at 0 if usevlines is True\nNone usevlines is False.\n\n\n\nOther Parameters:\n\nlinestyleLine2D property, optionalThe linestyle for plotting the data points.\nOnly used if usevlines is False.\n\nmarkerstr, default: 'o'The marker for plotting the data points.\nOnly used if usevlines is False.\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx\n\n**kwargsAdditional parameters are passed to Axes.vlines and\nAxes.axhline if usevlines is True; otherwise they are\npassed to Axes.plot.\n\n\n\n\nNotes\nThe cross correlation is performed with numpy.correlate with\nmode = \"full\".\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.angle_spectrum",
    "class": {
        "class method": [
            {
                "method name": "Axes.angle_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, *, data=None, **kwargs)",
                "method text": "Plot the angle spectrum.\nCompute the angle spectrum (wrapped phase spectrum) of x.\nData is padded to a length of pad_to and the windowing function\nwindow is applied to the signal.\n\nParameters:\n\nx1-D array or sequenceArray or sequence containing the data.\n\nFsfloat, default: 2The sampling frequency (samples per time unit). It is used to calculate\nthe Fourier frequencies, freqs, in cycles per time unit.\n\nwindowcallable or ndarray, default: window_hanningA function or a vector of length NFFT. To create window vectors see\nwindow_hanning, window_none, numpy.blackman, numpy.hamming,\nnumpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a\nfunction is passed as the argument, it must take a data segment as an\nargument and return the windowed version of the segment.\n\nsides{'default', 'onesided', 'twosided'}, optionalWhich sides of the spectrum to return. 'default' is one-sided for real\ndata and two-sided for complex data. 'onesided' forces the return of a\none-sided spectrum, while 'twosided' forces two-sided.\n\npad_toint, optionalThe number of points to which the data segment is padded when performing\nthe FFT. While not increasing the actual resolution of the spectrum (the\nminimum distance between resolvable peaks), this can give more points in\nthe plot, allowing for more detail. This corresponds to the n parameter\nin the call to fft. The default is None, which sets pad_to\nequal to the length of the input signal (i.e. no padding).\n\nFcint, default: 0The center frequency of x, which offsets the x extents of the\nplot to reflect the frequency range used when a signal is acquired\nand then filtered and downsampled to baseband.\n\n\n\nReturns:\n\nspectrum1-D arrayThe values for the angle spectrum in radians (real valued).\n\nfreqs1-D arrayThe frequencies corresponding to the elements in spectrum.\n\nlineLine2DThe line created by this function.\n\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx\n\n**kwargsKeyword arguments control the Line2D properties:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nmagnitude_spectrumPlots the magnitudes of the corresponding frequencies.\n\nphase_spectrumPlots the unwrapped version of this function.\n\nspecgramCan plot the angle spectrum of segments within the signal in a colormap.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.cohere",
    "class": {
        "class method": [
            {
                "method name": "Axes.cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend=<function detrend_none>, window=<function window_hanning>, noverlap=0, pad_to=None, sides='default', scale_by_freq=None, *, data=None, **kwargs)",
                "method text": "Plot the coherence between x and y.\nCoherence is the normalized cross spectral density:\n\n\\[C_{xy} = \\frac{|P_{xy}|^2}{P_{xx}P_{yy}}\\]\n\nParameters:\n\nFsfloat, default: 2The sampling frequency (samples per time unit). It is used to calculate\nthe Fourier frequencies, freqs, in cycles per time unit.\n\nwindowcallable or ndarray, default: window_hanningA function or a vector of length NFFT. To create window vectors see\nwindow_hanning, window_none, numpy.blackman, numpy.hamming,\nnumpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a\nfunction is passed as the argument, it must take a data segment as an\nargument and return the windowed version of the segment.\n\nsides{'default', 'onesided', 'twosided'}, optionalWhich sides of the spectrum to return. 'default' is one-sided for real\ndata and two-sided for complex data. 'onesided' forces the return of a\none-sided spectrum, while 'twosided' forces two-sided.\n\npad_toint, optionalThe number of points to which the data segment is padded when performing\nthe FFT. This can be different from NFFT, which specifies the number\nof data points used. While not increasing the actual resolution of the\nspectrum (the minimum distance between resolvable peaks), this can give\nmore points in the plot, allowing for more detail. This corresponds to\nthe n parameter in the call to fft. The default is None,\nwhich sets pad_to equal to NFFT\n\nNFFTint, default: 256The number of data points used in each block for the FFT. A power 2 is\nmost efficient. This should NOT be used to get zero padding, or the\nscaling of the result will be incorrect; use pad_to for this instead.\n\ndetrend{'none', 'mean', 'linear'} or callable, default: 'none'The function applied to each segment before fft-ing, designed to remove\nthe mean or linear trend. Unlike in MATLAB, where the detrend parameter\nis a vector, in Matplotlib it is a function. The mlab\nmodule defines detrend_none, detrend_mean, and detrend_linear,\nbut you can use a custom function as well. You can also use a string to\nchoose one of the functions: 'none' calls detrend_none. 'mean' calls\ndetrend_mean. 'linear' calls detrend_linear.\n\nscale_by_freqbool, default: TrueWhether the resulting density values should be scaled by the scaling\nfrequency, which gives density in units of 1/Hz. This allows for\nintegration over the returned frequency values. The default is True for\nMATLAB compatibility.\n\nnoverlapint, default: 0 (no overlap)The number of points of overlap between blocks.\n\nFcint, default: 0The center frequency of x, which offsets the x extents of the\nplot to reflect the frequency range used when a signal is acquired\nand then filtered and downsampled to baseband.\n\n\n\nReturns:\n\nCxy1-D arrayThe coherence vector.\n\nfreqs1-D arrayThe frequencies for the elements in Cxy.\n\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, y\n\n**kwargsKeyword arguments control the Line2D properties:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\nReferences\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures,\nJohn Wiley & Sons (1986)\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.csd",
    "class": {
        "class method": [
            {
                "method name": "Axes.csd(x, y, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, *, data=None, **kwargs)",
                "method text": "Plot the cross-spectral density.\nThe cross spectral density \\(P_{xy}\\) by Welch's average\nperiodogram method. The vectors x and y are divided into\nNFFT length segments. Each segment is detrended by function\ndetrend and windowed by function window. noverlap gives\nthe length of the overlap between segments. The product of\nthe direct FFTs of x and y are averaged over each segment\nto compute \\(P_{xy}\\), with a scaling to correct for power\nloss due to windowing.\nIf len(x) < NFFT or len(y) < NFFT, they will be zero\npadded to NFFT.\n\nParameters:\n\nx, y1-D arrays or sequencesArrays or sequences containing the data.\n\nFsfloat, default: 2The sampling frequency (samples per time unit). It is used to calculate\nthe Fourier frequencies, freqs, in cycles per time unit.\n\nwindowcallable or ndarray, default: window_hanningA function or a vector of length NFFT. To create window vectors see\nwindow_hanning, window_none, numpy.blackman, numpy.hamming,\nnumpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a\nfunction is passed as the argument, it must take a data segment as an\nargument and return the windowed version of the segment.\n\nsides{'default', 'onesided', 'twosided'}, optionalWhich sides of the spectrum to return. 'default' is one-sided for real\ndata and two-sided for complex data. 'onesided' forces the return of a\none-sided spectrum, while 'twosided' forces two-sided.\n\npad_toint, optionalThe number of points to which the data segment is padded when performing\nthe FFT. This can be different from NFFT, which specifies the number\nof data points used. While not increasing the actual resolution of the\nspectrum (the minimum distance between resolvable peaks), this can give\nmore points in the plot, allowing for more detail. This corresponds to\nthe n parameter in the call to fft. The default is None,\nwhich sets pad_to equal to NFFT\n\nNFFTint, default: 256The number of data points used in each block for the FFT. A power 2 is\nmost efficient. This should NOT be used to get zero padding, or the\nscaling of the result will be incorrect; use pad_to for this instead.\n\ndetrend{'none', 'mean', 'linear'} or callable, default: 'none'The function applied to each segment before fft-ing, designed to remove\nthe mean or linear trend. Unlike in MATLAB, where the detrend parameter\nis a vector, in Matplotlib it is a function. The mlab\nmodule defines detrend_none, detrend_mean, and detrend_linear,\nbut you can use a custom function as well. You can also use a string to\nchoose one of the functions: 'none' calls detrend_none. 'mean' calls\ndetrend_mean. 'linear' calls detrend_linear.\n\nscale_by_freqbool, default: TrueWhether the resulting density values should be scaled by the scaling\nfrequency, which gives density in units of 1/Hz. This allows for\nintegration over the returned frequency values. The default is True for\nMATLAB compatibility.\n\nnoverlapint, default: 0 (no overlap)The number of points of overlap between segments.\n\nFcint, default: 0The center frequency of x, which offsets the x extents of the\nplot to reflect the frequency range used when a signal is acquired\nand then filtered and downsampled to baseband.\n\nreturn_linebool, default: FalseWhether to include the line object plotted in the returned values.\n\n\n\nReturns:\n\nPxy1-D arrayThe values for the cross spectrum \\(P_{xy}\\) before scaling\n(complex valued).\n\nfreqs1-D arrayThe frequencies corresponding to the elements in Pxy.\n\nlineLine2DThe line created by this function.\nOnly returned if return_line is True.\n\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, y\n\n**kwargsKeyword arguments control the Line2D properties:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\npsdis equivalent to setting y = x.\n\n\n\nNotes\nFor plotting, the power is plotted as\n\\(10 \\log_{10}(P_{xy})\\) for decibels, though \\(P_{xy}\\) itself\nis returned.\nReferences\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures,\nJohn Wiley & Sons (1986)\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.magnitude_spectrum",
    "class": {
        "class method": [
            {
                "method name": "Axes.magnitude_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, scale=None, *, data=None, **kwargs)",
                "method text": "Plot the magnitude spectrum.\nCompute the magnitude spectrum of x. Data is padded to a\nlength of pad_to and the windowing function window is applied to\nthe signal.\n\nParameters:\n\nx1-D array or sequenceArray or sequence containing the data.\n\nFsfloat, default: 2The sampling frequency (samples per time unit). It is used to calculate\nthe Fourier frequencies, freqs, in cycles per time unit.\n\nwindowcallable or ndarray, default: window_hanningA function or a vector of length NFFT. To create window vectors see\nwindow_hanning, window_none, numpy.blackman, numpy.hamming,\nnumpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a\nfunction is passed as the argument, it must take a data segment as an\nargument and return the windowed version of the segment.\n\nsides{'default', 'onesided', 'twosided'}, optionalWhich sides of the spectrum to return. 'default' is one-sided for real\ndata and two-sided for complex data. 'onesided' forces the return of a\none-sided spectrum, while 'twosided' forces two-sided.\n\npad_toint, optionalThe number of points to which the data segment is padded when performing\nthe FFT. While not increasing the actual resolution of the spectrum (the\nminimum distance between resolvable peaks), this can give more points in\nthe plot, allowing for more detail. This corresponds to the n parameter\nin the call to fft. The default is None, which sets pad_to\nequal to the length of the input signal (i.e. no padding).\n\nscale{'default', 'linear', 'dB'}The scaling of the values in the spec. 'linear' is no scaling.\n'dB' returns the values in dB scale, i.e., the dB amplitude\n(20 * log10). 'default' is 'linear'.\n\nFcint, default: 0The center frequency of x, which offsets the x extents of the\nplot to reflect the frequency range used when a signal is acquired\nand then filtered and downsampled to baseband.\n\n\n\nReturns:\n\nspectrum1-D arrayThe values for the magnitude spectrum before scaling (real valued).\n\nfreqs1-D arrayThe frequencies corresponding to the elements in spectrum.\n\nlineLine2DThe line created by this function.\n\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx\n\n**kwargsKeyword arguments control the Line2D properties:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\npsdPlots the power spectral density.\n\nangle_spectrumPlots the angles of the corresponding frequencies.\n\nphase_spectrumPlots the phase (unwrapped angle) of the corresponding frequencies.\n\nspecgramCan plot the magnitude spectrum of segments within the signal in a colormap.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.phase_spectrum",
    "class": {
        "class method": [
            {
                "method name": "Axes.phase_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None, *, data=None, **kwargs)",
                "method text": "Plot the phase spectrum.\nCompute the phase spectrum (unwrapped angle spectrum) of x.\nData is padded to a length of pad_to and the windowing function\nwindow is applied to the signal.\n\nParameters:\n\nx1-D array or sequenceArray or sequence containing the data\n\nFsfloat, default: 2The sampling frequency (samples per time unit). It is used to calculate\nthe Fourier frequencies, freqs, in cycles per time unit.\n\nwindowcallable or ndarray, default: window_hanningA function or a vector of length NFFT. To create window vectors see\nwindow_hanning, window_none, numpy.blackman, numpy.hamming,\nnumpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a\nfunction is passed as the argument, it must take a data segment as an\nargument and return the windowed version of the segment.\n\nsides{'default', 'onesided', 'twosided'}, optionalWhich sides of the spectrum to return. 'default' is one-sided for real\ndata and two-sided for complex data. 'onesided' forces the return of a\none-sided spectrum, while 'twosided' forces two-sided.\n\npad_toint, optionalThe number of points to which the data segment is padded when performing\nthe FFT. While not increasing the actual resolution of the spectrum (the\nminimum distance between resolvable peaks), this can give more points in\nthe plot, allowing for more detail. This corresponds to the n parameter\nin the call to fft. The default is None, which sets pad_to\nequal to the length of the input signal (i.e. no padding).\n\nFcint, default: 0The center frequency of x, which offsets the x extents of the\nplot to reflect the frequency range used when a signal is acquired\nand then filtered and downsampled to baseband.\n\n\n\nReturns:\n\nspectrum1-D arrayThe values for the phase spectrum in radians (real valued).\n\nfreqs1-D arrayThe frequencies corresponding to the elements in spectrum.\n\nlineLine2DThe line created by this function.\n\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx\n\n**kwargsKeyword arguments control the Line2D properties:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nmagnitude_spectrumPlots the magnitudes of the corresponding frequencies.\n\nangle_spectrumPlots the wrapped version of this function.\n\nspecgramCan plot the phase spectrum of segments within the signal in a colormap.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.psd",
    "class": {
        "class method": [
            {
                "method name": "Axes.psd(x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, pad_to=None, sides=None, scale_by_freq=None, return_line=None, *, data=None, **kwargs)",
                "method text": "Plot the power spectral density.\nThe power spectral density \\(P_{xx}\\) by Welch's average\nperiodogram method. The vector x is divided into NFFT length\nsegments. Each segment is detrended by function detrend and\nwindowed by function window. noverlap gives the length of\nthe overlap between segments. The \\(|\\mathrm{fft}(i)|^2\\)\nof each segment \\(i\\) are averaged to compute \\(P_{xx}\\),\nwith a scaling to correct for power loss due to windowing.\nIf len(x) < NFFT, it will be zero padded to NFFT.\n\nParameters:\n\nx1-D array or sequenceArray or sequence containing the data\n\nFsfloat, default: 2The sampling frequency (samples per time unit). It is used to calculate\nthe Fourier frequencies, freqs, in cycles per time unit.\n\nwindowcallable or ndarray, default: window_hanningA function or a vector of length NFFT. To create window vectors see\nwindow_hanning, window_none, numpy.blackman, numpy.hamming,\nnumpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a\nfunction is passed as the argument, it must take a data segment as an\nargument and return the windowed version of the segment.\n\nsides{'default', 'onesided', 'twosided'}, optionalWhich sides of the spectrum to return. 'default' is one-sided for real\ndata and two-sided for complex data. 'onesided' forces the return of a\none-sided spectrum, while 'twosided' forces two-sided.\n\npad_toint, optionalThe number of points to which the data segment is padded when performing\nthe FFT. This can be different from NFFT, which specifies the number\nof data points used. While not increasing the actual resolution of the\nspectrum (the minimum distance between resolvable peaks), this can give\nmore points in the plot, allowing for more detail. This corresponds to\nthe n parameter in the call to fft. The default is None,\nwhich sets pad_to equal to NFFT\n\nNFFTint, default: 256The number of data points used in each block for the FFT. A power 2 is\nmost efficient. This should NOT be used to get zero padding, or the\nscaling of the result will be incorrect; use pad_to for this instead.\n\ndetrend{'none', 'mean', 'linear'} or callable, default: 'none'The function applied to each segment before fft-ing, designed to remove\nthe mean or linear trend. Unlike in MATLAB, where the detrend parameter\nis a vector, in Matplotlib it is a function. The mlab\nmodule defines detrend_none, detrend_mean, and detrend_linear,\nbut you can use a custom function as well. You can also use a string to\nchoose one of the functions: 'none' calls detrend_none. 'mean' calls\ndetrend_mean. 'linear' calls detrend_linear.\n\nscale_by_freqbool, default: TrueWhether the resulting density values should be scaled by the scaling\nfrequency, which gives density in units of 1/Hz. This allows for\nintegration over the returned frequency values. The default is True for\nMATLAB compatibility.\n\nnoverlapint, default: 0 (no overlap)The number of points of overlap between segments.\n\nFcint, default: 0The center frequency of x, which offsets the x extents of the\nplot to reflect the frequency range used when a signal is acquired\nand then filtered and downsampled to baseband.\n\nreturn_linebool, default: FalseWhether to include the line object plotted in the returned values.\n\n\n\nReturns:\n\nPxx1-D arrayThe values for the power spectrum \\(P_{xx}\\) before scaling\n(real valued).\n\nfreqs1-D arrayThe frequencies corresponding to the elements in Pxx.\n\nlineLine2DThe line created by this function.\nOnly returned if return_line is True.\n\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx\n\n**kwargsKeyword arguments control the Line2D properties:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nspecgramDiffers in the default overlap; in not returning the mean of the segment periodograms; in returning the times of the segments; and in plotting a colormap instead of a line.\n\nmagnitude_spectrumPlots the magnitude spectrum.\n\ncsdPlots the spectral density between two signals.\n\n\n\nNotes\nFor plotting, the power is plotted as\n\\(10\\log_{10}(P_{xx})\\) for decibels, though Pxx itself\nis returned.\nReferences\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures,\nJohn Wiley & Sons (1986)\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.specgram",
    "class": {
        "class method": [
            {
                "method name": "Axes.specgram(x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None, noverlap=None, cmap=None, xextent=None, pad_to=None, sides=None, scale_by_freq=None, mode=None, scale=None, vmin=None, vmax=None, *, data=None, **kwargs)",
                "method text": "Plot a spectrogram.\nCompute and plot a spectrogram of data in x. Data are split into\nNFFT length segments and the spectrum of each section is\ncomputed. The windowing function window is applied to each\nsegment, and the amount of overlap of each segment is\nspecified with noverlap. The spectrogram is plotted as a colormap\n(using imshow).\n\nParameters:\n\nx1-D array or sequenceArray or sequence containing the data.\n\nFsfloat, default: 2The sampling frequency (samples per time unit). It is used to calculate\nthe Fourier frequencies, freqs, in cycles per time unit.\n\nwindowcallable or ndarray, default: window_hanningA function or a vector of length NFFT. To create window vectors see\nwindow_hanning, window_none, numpy.blackman, numpy.hamming,\nnumpy.bartlett, scipy.signal, scipy.signal.get_window, etc. If a\nfunction is passed as the argument, it must take a data segment as an\nargument and return the windowed version of the segment.\n\nsides{'default', 'onesided', 'twosided'}, optionalWhich sides of the spectrum to return. 'default' is one-sided for real\ndata and two-sided for complex data. 'onesided' forces the return of a\none-sided spectrum, while 'twosided' forces two-sided.\n\npad_toint, optionalThe number of points to which the data segment is padded when performing\nthe FFT. This can be different from NFFT, which specifies the number\nof data points used. While not increasing the actual resolution of the\nspectrum (the minimum distance between resolvable peaks), this can give\nmore points in the plot, allowing for more detail. This corresponds to\nthe n parameter in the call to fft. The default is None,\nwhich sets pad_to equal to NFFT\n\nNFFTint, default: 256The number of data points used in each block for the FFT. A power 2 is\nmost efficient. This should NOT be used to get zero padding, or the\nscaling of the result will be incorrect; use pad_to for this instead.\n\ndetrend{'none', 'mean', 'linear'} or callable, default: 'none'The function applied to each segment before fft-ing, designed to remove\nthe mean or linear trend. Unlike in MATLAB, where the detrend parameter\nis a vector, in Matplotlib it is a function. The mlab\nmodule defines detrend_none, detrend_mean, and detrend_linear,\nbut you can use a custom function as well. You can also use a string to\nchoose one of the functions: 'none' calls detrend_none. 'mean' calls\ndetrend_mean. 'linear' calls detrend_linear.\n\nscale_by_freqbool, default: TrueWhether the resulting density values should be scaled by the scaling\nfrequency, which gives density in units of 1/Hz. This allows for\nintegration over the returned frequency values. The default is True for\nMATLAB compatibility.\n\nmode{'default', 'psd', 'magnitude', 'angle', 'phase'}What sort of spectrum to use. Default is 'psd', which takes the\npower spectral density. 'magnitude' returns the magnitude\nspectrum. 'angle' returns the phase spectrum without unwrapping.\n'phase' returns the phase spectrum with unwrapping.\n\nnoverlapint, default: 128The number of points of overlap between blocks.\n\nscale{'default', 'linear', 'dB'}The scaling of the values in the spec. 'linear' is no scaling.\n'dB' returns the values in dB scale. When mode is 'psd',\nthis is dB power (10 * log10). Otherwise, this is dB amplitude\n(20 * log10). 'default' is 'dB' if mode is 'psd' or\n'magnitude' and 'linear' otherwise. This must be 'linear'\nif mode is 'angle' or 'phase'.\n\nFcint, default: 0The center frequency of x, which offsets the x extents of the\nplot to reflect the frequency range used when a signal is acquired\nand then filtered and downsampled to baseband.\n\ncmapColormap, default: rcParams[\"image.cmap\"] (default: 'viridis')\nxextentNone or (xmin, xmax)The image extent along the x-axis. The default sets xmin to the\nleft border of the first bin (spectrum column) and xmax to the\nright border of the last bin. Note that for noverlap>0 the width\nof the bins is smaller than those of the segments.\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx\n\n**kwargsAdditional keyword arguments are passed on to imshow\nwhich makes the specgram image. The origin keyword argument\nis not supported.\n\n\n\nReturns:\n\nspectrum2D arrayColumns are the periodograms of successive segments.\n\nfreqs1-D arrayThe frequencies corresponding to the rows in spectrum.\n\nt1-D arrayThe times corresponding to midpoints of segments (i.e., the columns\nin spectrum).\n\nimAxesImageThe image created by imshow containing the spectrogram.\n\n\n\n\n\nSee also\n\npsdDiffers in the default overlap; in returning the mean of the segment periodograms; in not returning times; and in generating a line plot instead of colormap.\n\nmagnitude_spectrumA single spectrum, similar to having a single segment when mode is 'magnitude'. Plots a line instead of a colormap.\n\nangle_spectrumA single spectrum, similar to having a single segment when mode is 'angle'. Plots a line instead of a colormap.\n\nphase_spectrumA single spectrum, similar to having a single segment when mode is 'phase'. Plots a line instead of a colormap.\n\n\n\nNotes\nThe parameters detrend and scale_by_freq do only apply when mode\nis set to 'psd'.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.xcorr",
    "class": {
        "class method": [
            {
                "method name": "Axes.xcorr(x, y, normed=True, detrend=<function detrend_none>, usevlines=True, maxlags=10, *, data=None, **kwargs)",
                "method text": "Plot the cross correlation between x and y.\nThe correlation with lag k is defined as\n\\(\\sum_n x[n+k] \\cdot y^*[n]\\), where \\(y^*\\) is the complex\nconjugate of \\(y\\).\n\nParameters:\n\nx, yarray-like of length n\ndetrendcallable, default: mlab.detrend_none (no detrending)A detrending function applied to x and y. It must have the\nsignature\ndetrend(x: np.ndarray) -> np.ndarray\n\n\n\nnormedbool, default: TrueIf True, input vectors are normalised to unit length.\n\nusevlinesbool, default: TrueDetermines the plot style.\nIf True, vertical lines are plotted from 0 to the xcorr value\nusing Axes.vlines. Additionally, a horizontal line is plotted\nat y=0 using Axes.axhline.\nIf False, markers are plotted at the xcorr values using\nAxes.plot.\n\nmaxlagsint, default: 10Number of lags to show. If None, will return all 2 * len(x) - 1\nlags.\n\n\n\nReturns:\n\nlagsarray (length 2*maxlags+1)The lag vector.\n\ncarray (length 2*maxlags+1)The auto correlation vector.\n\nlineLineCollection or Line2DArtist added to the Axes of the correlation:\n\nLineCollection if usevlines is True.\nLine2D if usevlines is False.\n\n\nbLine2D or NoneHorizontal line at 0 if usevlines is True\nNone usevlines is False.\n\n\n\nOther Parameters:\n\nlinestyleLine2D property, optionalThe linestyle for plotting the data points.\nOnly used if usevlines is False.\n\nmarkerstr, default: 'o'The marker for plotting the data points.\nOnly used if usevlines is False.\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, y\n\n**kwargsAdditional parameters are passed to Axes.vlines and\nAxes.axhline if usevlines is True; otherwise they are\npassed to Axes.plot.\n\n\n\n\nNotes\nThe cross correlation is performed with numpy.correlate with\nmode = \"full\".\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.ecdf",
    "class": {
        "class method": [
            {
                "method name": "Axes.ecdf(x, weights=None, *, complementary=False, orientation='vertical', compress=False, data=None, **kwargs)",
                "method text": "Compute and plot the empirical cumulative distribution function of x.\n\nNew in version 3.8.\n\n\nParameters:\n\nx1d array-likeThe input data. Infinite entries are kept (and move the relevant\nend of the ecdf from 0/1), but NaNs and masked values are errors.\n\nweights1d array-like or None, default: NoneThe weights of the entries; must have the same shape as x.\nWeights corresponding to NaN data points are dropped, and then the\nremaining weights are normalized to sum to 1. If unset, all\nentries have the same weight.\n\ncomplementarybool, default: FalseWhether to plot a cumulative distribution function, which increases\nfrom 0 to 1 (the default), or a complementary cumulative\ndistribution function, which decreases from 1 to 0.\n\norientation{\"vertical\", \"horizontal\"}, default: \"vertical\"Whether the entries are plotted along the x-axis (\"vertical\", the\ndefault) or the y-axis (\"horizontal\"). This parameter takes the\nsame values as in hist.\n\ncompressbool, default: FalseWhether multiple entries with the same values are grouped together\n(with a summed weight) before plotting. This is mainly useful if\nx contains many identical data points, to decrease the rendering\ncomplexity of the plot. If x contains no duplicate points, this\nhas no effect and just uses some time and memory.\n\n\n\nReturns:\n\nLine2D\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, weights\n\n**kwargsKeyword arguments control the Line2D properties:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\nNotes\nThe ecdf plot can be thought of as a cumulative histogram with one bin\nper data entry; i.e. it reports on the entire dataset without any\narbitrary binning.\nIf x contains NaNs or masked entries, either remove them first from\nthe array (if they should not taken into account), or replace them by\n-inf or +inf (if they should be sorted at the beginning or the end of\nthe array).\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.boxplot",
    "class": {
        "class method": [
            {
                "method name": "Axes.boxplot(x, notch=None, sym=None, vert=None, whis=None, positions=None, widths=None, patch_artist=None, bootstrap=None, usermedians=None, conf_intervals=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None, manage_ticks=True, autorange=False, zorder=None, capwidths=None, *, data=None)",
                "method text": "Draw a box and whisker plot.\nThe box extends from the first quartile (Q1) to the third\nquartile (Q3) of the data, with a line at the median.\nThe whiskers extend from the box to the farthest data point\nlying within 1.5x the inter-quartile range (IQR) from the box.\nFlier points are those past the end of the whiskers.\nSee https://en.wikipedia.org/wiki/Box_plot for reference.\n     Q1-1.5IQR   Q1   median  Q3   Q3+1.5IQR\n                  |-----:-----|\n  o      |--------|     :     |--------|    o  o\n                  |-----:-----|\nflier             <----------->            fliers\n                       IQR\n\n\n\nParameters:\n\nxArray or a sequence of vectors.The input data. If a 2D array, a boxplot is drawn for each column\nin x. If a sequence of 1D arrays, a boxplot is drawn for each\narray in x.\n\nnotchbool, default: FalseWhether to draw a notched boxplot (True), or a rectangular\nboxplot (False). The notches represent the confidence interval\n(CI) around the median. The documentation for bootstrap\ndescribes how the locations of the notches are computed by\ndefault, but their locations may also be overridden by setting the\nconf_intervals parameter.\n\nNote\nIn cases where the values of the CI are less than the\nlower quartile or greater than the upper quartile, the\nnotches will extend beyond the box, giving it a\ndistinctive \"flipped\" appearance. This is expected\nbehavior and consistent with other statistical\nvisualization packages.\n\n\nsymstr, optionalThe default symbol for flier points. An empty string ('') hides\nthe fliers. If None, then the fliers default to 'b+'. More\ncontrol is provided by the flierprops parameter.\n\nvertbool, default: TrueIf True, draws vertical boxes.\nIf False, draw horizontal boxes.\n\nwhisfloat or (float, float), default: 1.5The position of the whiskers.\nIf a float, the lower whisker is at the lowest datum above\nQ1 - whis*(Q3-Q1), and the upper whisker at the highest datum\nbelow Q3 + whis*(Q3-Q1), where Q1 and Q3 are the first and\nthird quartiles. The default value of whis = 1.5 corresponds\nto Tukey's original definition of boxplots.\nIf a pair of floats, they indicate the percentiles at which to\ndraw the whiskers (e.g., (5, 95)). In particular, setting this to\n(0, 100) results in whiskers covering the whole range of the data.\nIn the edge case where Q1 == Q3, whis is automatically set\nto (0, 100) (cover the whole range of the data) if autorange is\nTrue.\nBeyond the whiskers, data are considered outliers and are plotted\nas individual points.\n\nbootstrapint, optionalSpecifies whether to bootstrap the confidence intervals\naround the median for notched boxplots. If bootstrap is\nNone, no bootstrapping is performed, and notches are\ncalculated using a Gaussian-based asymptotic approximation\n(see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and\nKendall and Stuart, 1967). Otherwise, bootstrap specifies\nthe number of times to bootstrap the median to determine its\n95% confidence intervals. Values between 1000 and 10000 are\nrecommended.\n\nusermedians1D array-like, optionalA 1D array-like of length len(x). Each entry that is not\nNone forces the value of the median for the corresponding\ndataset. For entries that are None, the medians are computed\nby Matplotlib as normal.\n\nconf_intervalsarray-like, optionalA 2D array-like of shape (len(x), 2). Each entry that is not\nNone forces the location of the corresponding notch (which is\nonly drawn if notch is True). For entries that are None,\nthe notches are computed by the method specified by the other\nparameters (e.g., bootstrap).\n\npositionsarray-like, optionalThe positions of the boxes. The ticks and limits are\nautomatically set to match the positions. Defaults to\nrange(1, N+1) where N is the number of boxes to be drawn.\n\nwidthsfloat or array-likeThe widths of the boxes. The default is 0.5, or 0.15*(distance\nbetween extreme positions), if that is smaller.\n\npatch_artistbool, default: FalseIf False produces boxes with the Line2D artist. Otherwise,\nboxes are drawn with Patch artists.\n\nlabelssequence, optionalLabels for each dataset (one per dataset).\n\nmanage_ticksbool, default: TrueIf True, the tick locations and labels will be adjusted to match\nthe boxplot positions.\n\nautorangebool, default: FalseWhen True and the data are distributed such that the 25th and\n75th percentiles are equal, whis is set to (0, 100) such\nthat the whisker ends are at the minimum and maximum of the data.\n\nmeanlinebool, default: FalseIf True (and showmeans is True), will try to render the\nmean as a line spanning the full width of the box according to\nmeanprops (see below). Not recommended if shownotches is also\nTrue. Otherwise, means will be shown as points.\n\nzorderfloat, default: Line2D.zorder = 2The zorder of the boxplot.\n\n\n\nReturns:\n\ndictA dictionary mapping each component of the boxplot to a list\nof the Line2D instances created. That dictionary has the\nfollowing keys (assuming vertical boxplots):\n\nboxes: the main body of the boxplot showing the\nquartiles and the median's confidence intervals if\nenabled.\nmedians: horizontal lines at the median of each box.\nwhiskers: the vertical lines extending to the most\nextreme, non-outlier data points.\ncaps: the horizontal lines at the ends of the\nwhiskers.\nfliers: points representing data that extend beyond\nthe whiskers (fliers).\nmeans: points or lines representing the means.\n\n\n\n\nOther Parameters:\n\nshowcapsbool, default: TrueShow the caps on the ends of whiskers.\n\nshowboxbool, default: TrueShow the central box.\n\nshowfliersbool, default: TrueShow the outliers beyond the caps.\n\nshowmeansbool, default: FalseShow the arithmetic means.\n\ncappropsdict, default: NoneThe style of the caps.\n\ncapwidthsfloat or array, default: NoneThe widths of the caps.\n\nboxpropsdict, default: NoneThe style of the box.\n\nwhiskerpropsdict, default: NoneThe style of the whiskers.\n\nflierpropsdict, default: NoneThe style of the fliers.\n\nmedianpropsdict, default: NoneThe style of the median.\n\nmeanpropsdict, default: NoneThe style of the mean.\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n\n\n\n\nSee also\n\nviolinplotDraw an estimate of the probability density function.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.violinplot",
    "class": {
        "class method": [
            {
                "method name": "Axes.violinplot(dataset, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False, quantiles=None, points=100, bw_method=None, *, data=None)",
                "method text": "Make a violin plot.\nMake a violin plot for each column of dataset or each vector in\nsequence dataset. Each filled area extends to represent the\nentire data range, with optional lines at the mean, the median,\nthe minimum, the maximum, and user-specified quantiles.\n\nParameters:\n\ndatasetArray or a sequence of vectors.The input data.\n\npositionsarray-like, default: [1, 2, ..., n]The positions of the violins. The ticks and limits are\nautomatically set to match the positions.\n\nvertbool, default: True.If true, creates a vertical violin plot.\nOtherwise, creates a horizontal violin plot.\n\nwidthsarray-like, default: 0.5Either a scalar or a vector that sets the maximal width of\neach violin. The default is 0.5, which uses about half of the\navailable horizontal space.\n\nshowmeansbool, default: FalseIf True, will toggle rendering of the means.\n\nshowextremabool, default: TrueIf True, will toggle rendering of the extrema.\n\nshowmediansbool, default: FalseIf True, will toggle rendering of the medians.\n\nquantilesarray-like, default: NoneIf not None, set a list of floats in interval [0, 1] for each violin,\nwhich stands for the quantiles that will be rendered for that\nviolin.\n\npointsint, default: 100Defines the number of points to evaluate each of the\ngaussian kernel density estimations at.\n\nbw_methodstr, scalar or callable, optionalThe method used to calculate the estimator bandwidth. This can be\n'scott', 'silverman', a scalar constant or a callable. If a\nscalar, this will be used directly as kde.factor. If a\ncallable, it should take a matplotlib.mlab.GaussianKDE instance as\nits only parameter and return a scalar. If None (default), 'scott'\nis used.\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\ndataset\n\n\n\nReturns:\n\ndictA dictionary mapping each component of the violinplot to a\nlist of the corresponding collection instances created. The\ndictionary has the following keys:\n\nbodies: A list of the PolyCollection\ninstances containing the filled area of each violin.\ncmeans: A LineCollection instance that marks\nthe mean values of each of the violin's distribution.\ncmins: A LineCollection instance that marks\nthe bottom of each violin's distribution.\ncmaxes: A LineCollection instance that marks\nthe top of each violin's distribution.\ncbars: A LineCollection instance that marks\nthe centers of each violin's distribution.\ncmedians: A LineCollection instance that\nmarks the median values of each of the violin's distribution.\ncquantiles: A LineCollection instance created\nto identify the quantile values of each of the violin's\ndistribution.\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.bxp",
    "class": {
        "class method": [
            {
                "method name": "Axes.bxp(bxpstats, positions=None, widths=None, vert=True, patch_artist=False, shownotches=False, showmeans=False, showcaps=True, showbox=True, showfliers=True, boxprops=None, whiskerprops=None, flierprops=None, medianprops=None, capprops=None, meanprops=None, meanline=False, manage_ticks=True, zorder=None, capwidths=None)",
                "method text": "Drawing function for box and whisker plots.\nMake a box and whisker plot for each column of x or each\nvector in sequence x. The box extends from the lower to\nupper quartile values of the data, with a line at the median.\nThe whiskers extend from the box to show the range of the\ndata. Flier points are those past the end of the whiskers.\n\nParameters:\n\nbxpstatslist of dictsA list of dictionaries containing stats for each boxplot.\nRequired keys are:\n\nmed: Median (scalar).\nq1, q3: First & third quartiles (scalars).\nwhislo, whishi: Lower & upper whisker positions (scalars).\n\nOptional keys are:\n\nmean: Mean (scalar). Needed if showmeans=True.\nfliers: Data beyond the whiskers (array-like).\nNeeded if showfliers=True.\ncilo, cihi: Lower & upper confidence intervals\nabout the median. Needed if shownotches=True.\nlabel: Name of the dataset (str). If available,\nthis will be used a tick label for the boxplot\n\n\npositionsarray-like, default: [1, 2, ..., n]The positions of the boxes. The ticks and limits\nare automatically set to match the positions.\n\nwidthsfloat or array-like, default: NoneThe widths of the boxes. The default is\nclip(0.15*(distance between extreme positions), 0.15, 0.5).\n\ncapwidthsfloat or array-like, default: NoneEither a scalar or a vector and sets the width of each cap.\nThe default is 0.5*(width of the box), see widths.\n\nvertbool, default: TrueIf True (default), makes the boxes vertical.\nIf False, makes horizontal boxes.\n\npatch_artistbool, default: FalseIf False produces boxes with the Line2D artist.\nIf True produces boxes with the Patch artist.\n\nshownotches, showmeans, showcaps, showbox, showfliersboolWhether to draw the CI notches, the mean value (both default to\nFalse), the caps, the box, and the fliers (all three default to\nTrue).\n\nboxprops, whiskerprops, capprops, flierprops, medianprops, meanpropsdict, optionalArtist properties for the boxes, whiskers, caps, fliers, medians, and\nmeans.\n\nmeanlinebool, default: FalseIf True (and showmeans is True), will try to render the mean\nas a line spanning the full width of the box according to\nmeanprops. Not recommended if shownotches is also True.\nOtherwise, means will be shown as points.\n\nmanage_ticksbool, default: TrueIf True, the tick locations and labels will be adjusted to match the\nboxplot positions.\n\nzorderfloat, default: Line2D.zorder = 2The zorder of the resulting boxplot.\n\n\n\nReturns:\n\ndictA dictionary mapping each component of the boxplot to a list\nof the Line2D instances created. That dictionary has the\nfollowing keys (assuming vertical boxplots):\n\nboxes: main bodies of the boxplot showing the quartiles, and\nthe median's confidence intervals if enabled.\nmedians: horizontal lines at the median of each box.\nwhiskers: vertical lines up to the last non-outlier data.\ncaps: horizontal lines at the ends of the whiskers.\nfliers: points representing data beyond the whiskers (fliers).\nmeans: points or lines representing the means.\n\n\n\n\n\nExamples\n(Source code, 2x.png, png)\n\n\n\n\n\n(2x.png, png)\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.violin",
    "class": {
        "class method": [
            {
                "method name": "Axes.violin(vpstats, positions=None, vert=True, widths=0.5, showmeans=False, showextrema=True, showmedians=False)",
                "method text": "Drawing function for violin plots.\nDraw a violin plot for each column of vpstats. Each filled area\nextends to represent the entire data range, with optional lines at the\nmean, the median, the minimum, the maximum, and the quantiles values.\n\nParameters:\n\nvpstatslist of dictsA list of dictionaries containing stats for each violin plot.\nRequired keys are:\n\ncoords: A list of scalars containing the coordinates that\nthe violin's kernel density estimate were evaluated at.\nvals: A list of scalars containing the values of the\nkernel density estimate at each of the coordinates given\nin coords.\nmean: The mean value for this violin's dataset.\nmedian: The median value for this violin's dataset.\nmin: The minimum value for this violin's dataset.\nmax: The maximum value for this violin's dataset.\n\nOptional keys are:\n\nquantiles: A list of scalars containing the quantile values\nfor this violin's dataset.\n\n\npositionsarray-like, default: [1, 2, ..., n]The positions of the violins. The ticks and limits are\nautomatically set to match the positions.\n\nvertbool, default: True.If true, plots the violins vertically.\nOtherwise, plots the violins horizontally.\n\nwidthsarray-like, default: 0.5Either a scalar or a vector that sets the maximal width of\neach violin. The default is 0.5, which uses about half of the\navailable horizontal space.\n\nshowmeansbool, default: FalseIf true, will toggle rendering of the means.\n\nshowextremabool, default: TrueIf true, will toggle rendering of the extrema.\n\nshowmediansbool, default: FalseIf true, will toggle rendering of the medians.\n\n\n\nReturns:\n\ndictA dictionary mapping each component of the violinplot to a\nlist of the corresponding collection instances created. The\ndictionary has the following keys:\n\nbodies: A list of the PolyCollection\ninstances containing the filled area of each violin.\ncmeans: A LineCollection instance that marks\nthe mean values of each of the violin's distribution.\ncmins: A LineCollection instance that marks\nthe bottom of each violin's distribution.\ncmaxes: A LineCollection instance that marks\nthe top of each violin's distribution.\ncbars: A LineCollection instance that marks\nthe centers of each violin's distribution.\ncmedians: A LineCollection instance that\nmarks the median values of each of the violin's distribution.\ncquantiles: A LineCollection instance created\nto identify the quantiles values of each of the violin's\ndistribution.\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.hexbin",
    "class": {
        "class method": [
            {
                "method name": "Axes.hexbin(x, y, C=None, gridsize=100, bins=None, xscale='linear', yscale='linear', extent=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, edgecolors='face', reduce_C_function=<function mean>, mincnt=None, marginals=False, *, data=None, **kwargs)",
                "method text": "Make a 2D hexagonal binning plot of points x, y.\nIf C is None, the value of the hexagon is determined by the number\nof points in the hexagon. Otherwise, C specifies values at the\ncoordinate (x[i], y[i]). For each hexagon, these values are reduced\nusing reduce_C_function.\n\nParameters:\n\nx, yarray-likeThe data positions. x and y must be of the same length.\n\nCarray-like, optionalIf given, these values are accumulated in the bins. Otherwise,\nevery point has a value of 1. Must be of the same length as x\nand y.\n\ngridsizeint or (int, int), default: 100If a single int, the number of hexagons in the x-direction.\nThe number of hexagons in the y-direction is chosen such that\nthe hexagons are approximately regular.\nAlternatively, if a tuple (nx, ny), the number of hexagons\nin the x-direction and the y-direction. In the\ny-direction, counting is done along vertically aligned\nhexagons, not along the zig-zag chains of hexagons; see the\nfollowing illustration.\n(Source code, 2x.png, png)\n\n\n\n\n\nTo get approximately regular hexagons, choose\n\\(n_x = \\sqrt{3}\\,n_y\\).\n\nbins'log' or int or sequence, default: NoneDiscretization of the hexagon values.\n\nIf None, no binning is applied; the color of each hexagon\ndirectly corresponds to its count value.\nIf 'log', use a logarithmic scale for the colormap.\nInternally, \\(log_{10}(i+1)\\) is used to determine the\nhexagon color. This is equivalent to norm=LogNorm().\nIf an integer, divide the counts in the specified number\nof bins, and color the hexagons accordingly.\nIf a sequence of values, the values of the lower bound of\nthe bins to be used.\n\n\nxscale{'linear', 'log'}, default: 'linear'Use a linear or log10 scale on the horizontal axis.\n\nyscale{'linear', 'log'}, default: 'linear'Use a linear or log10 scale on the vertical axis.\n\nmincntint > 0, default: NoneIf not None, only display cells with more than mincnt\nnumber of points in the cell.\n\nmarginalsbool, default: FalseIf marginals is True, plot the marginal density as\ncolormapped rectangles along the bottom of the x-axis and\nleft of the y-axis.\n\nextent4-tuple of float, default: NoneThe limits of the bins (xmin, xmax, ymin, ymax).\nThe default assigns the limits based on\ngridsize, x, y, xscale and yscale.\nIf xscale or yscale is set to 'log', the limits are\nexpected to be the exponent for a power of 10. E.g. for\nx-limits of 1 and 50 in 'linear' scale and y-limits\nof 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).\n\n\n\nReturns:\n\nPolyCollectionA PolyCollection defining the hexagonal bins.\n\nPolyCollection.get_offsets contains a Mx2 array containing\nthe x, y positions of the M hexagon centers.\nPolyCollection.get_array contains the values of the M\nhexagons.\n\nIf marginals is True, horizontal\nbar and vertical bar (both PolyCollections) will be attached\nto the return collection as attributes hbar and vbar.\n\n\n\nOther Parameters:\n\ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')The Colormap instance or registered colormap name used to map scalar data\nto colors.\n\nnormstr or Normalize, optionalThe normalization method used to scale scalar data to the [0, 1] range\nbefore mapping to colors using cmap. By default, a linear scaling is\nused, mapping the lowest value to 0 and the highest to 1.\nIf given, this can be one of the following:\n\nAn instance of Normalize or one of its subclasses\n(see Colormap Normalization).\nA scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc. For a\nlist of available scales, call matplotlib.scale.get_scale_names().\nIn that case, a suitable Normalize subclass is dynamically generated\nand instantiated.\n\n\nvmin, vmaxfloat, optionalWhen using scalar data and no explicit norm, vmin and vmax define\nthe data range that the colormap covers. By default, the colormap covers\nthe complete value range of the supplied data. It is an error to use\nvmin/vmax when a norm instance is given (but using a str norm\nname together with vmin/vmax is acceptable).\n\nalphafloat between 0 and 1, optionalThe alpha blending value, between 0 (transparent) and 1 (opaque).\n\nlinewidthsfloat, default: NoneIf None, defaults to rcParams[\"patch.linewidth\"] (default: 1.0).\n\nedgecolors{'face', 'none', None} or color, default: 'face'The color of the hexagon edges. Possible values are:\n\n'face': Draw the edges in the same color as the fill color.\n'none': No edges are drawn. This can sometimes lead to unsightly\nunpainted pixels between the hexagons.\nNone: Draw outlines in the default color.\nAn explicit color.\n\n\nreduce_C_functioncallable, default: numpy.meanThe function to aggregate C within the bins. It is ignored if\nC is not given. This must have the signature:\ndef reduce_C_function(C: array) -> float\n\n\nCommonly used functions are:\n\nnumpy.mean: average of the points\nnumpy.sum: integral of the point values\nnumpy.amax: value taken from the largest point\n\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, y, C\n\n**kwargsPolyCollection propertiesAll other keyword arguments are passed on to PolyCollection:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\narray-like or scalar or None\n\nanimated\nbool\n\nantialiased or aa or antialiaseds\nbool or list of bools\n\narray\narray-like or None\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclim\n(vmin: float, vmax: float)\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncmap\nColormap or str or None\n\ncolor\ncolor or list of RGBA tuples\n\nedgecolor or ec or edgecolors\ncolor or list of colors or 'face'\n\nfacecolor or facecolors or fc\ncolor or list of colors\n\nfigure\nFigure\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or dashes or linestyles or ls\nstr or tuple or list thereof\n\nlinewidth or linewidths or lw\nfloat or list of floats\n\nmouseover\nbool\n\nnorm\nNormalize or str or None\n\noffset_transform or transOffset\nTransform\n\noffsets\n(N, 2) or (2,) array-like\n\npath_effects\nlist of AbstractPathEffect\n\npaths\nlist of array-like\n\npicker\nNone or bool or float or callable\n\npickradius\nfloat\n\nrasterized\nbool\n\nsizes\nnumpy.ndarray or None\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nurls\nlist of str or None\n\nverts\nlist of array-like\n\nverts_and_codes\nunknown\n\nvisible\nbool\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nhist2d2D histogram rectangular bins\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.hist",
    "class": {
        "class method": [
            {
                "method name": "Axes.hist(x, bins=None, range=None, density=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, *, data=None, **kwargs)",
                "method text": "Compute and plot a histogram.\nThis method uses numpy.histogram to bin the data in x and count the\nnumber of values in each bin, then draws the distribution either as a\nBarContainer or Polygon. The bins, range, density, and\nweights parameters are forwarded to numpy.histogram.\nIf the data has already been binned and counted, use bar or\nstairs to plot the distribution:\ncounts, bins = np.histogram(x)\nplt.stairs(counts, bins)\n\n\nAlternatively, plot pre-computed bins and counts using hist() by\ntreating each bin as a single point with a weight equal to its count:\nplt.hist(bins[:-1], bins, weights=counts)\n\n\nThe data input x can be a singular array, a list of datasets of\npotentially different lengths ([x0, x1, ...]), or a 2D ndarray in\nwhich each column is a dataset. Note that the ndarray form is\ntransposed relative to the list form. If the input is an array, then\nthe return value is a tuple (n, bins, patches); if the input is a\nsequence of arrays, then the return value is a tuple\n([n0, n1, ...], bins, [patches0, patches1, ...]).\nMasked arrays are not supported.\n\nParameters:\n\nx(n,) array or sequence of (n,) arraysInput values, this takes either a single array or a sequence of\narrays which are not required to be of the same length.\n\nbinsint or sequence or str, default: rcParams[\"hist.bins\"] (default: 10)If bins is an integer, it defines the number of equal-width bins\nin the range.\nIf bins is a sequence, it defines the bin edges, including the\nleft edge of the first bin and the right edge of the last bin;\nin this case, bins may be unequally spaced. All but the last\n(righthand-most) bin is half-open. In other words, if bins is:\n[1, 2, 3, 4]\n\n\nthen the first bin is [1, 2) (including 1, but excluding 2) and\nthe second [2, 3). The last bin, however, is [3, 4], which\nincludes 4.\nIf bins is a string, it is one of the binning strategies\nsupported by numpy.histogram_bin_edges: 'auto', 'fd', 'doane',\n'scott', 'stone', 'rice', 'sturges', or 'sqrt'.\n\nrangetuple or None, default: NoneThe lower and upper range of the bins. Lower and upper outliers\nare ignored. If not provided, range is (x.min(), x.max()).\nRange has no effect if bins is a sequence.\nIf bins is a sequence or range is specified, autoscaling\nis based on the specified bin range instead of the\nrange of x.\n\ndensitybool, default: FalseIf True, draw and return a probability density: each bin\nwill display the bin's raw count divided by the total number of\ncounts and the bin width\n(density = counts / (sum(counts) * np.diff(bins))),\nso that the area under the histogram integrates to 1\n(np.sum(density * np.diff(bins)) == 1).\nIf stacked is also True, the sum of the histograms is\nnormalized to 1.\n\nweights(n,) array-like or None, default: NoneAn array of weights, of the same shape as x. Each value in\nx only contributes its associated weight towards the bin count\n(instead of 1). If density is True, the weights are\nnormalized, so that the integral of the density over the range\nremains 1.\n\ncumulativebool or -1, default: FalseIf True, then a histogram is computed where each bin gives the\ncounts in that bin plus all bins for smaller values. The last bin\ngives the total number of datapoints.\nIf density is also True then the histogram is normalized such\nthat the last bin equals 1.\nIf cumulative is a number less than 0 (e.g., -1), the direction\nof accumulation is reversed. In this case, if density is also\nTrue, then the histogram is normalized such that the first bin\nequals 1.\n\nbottomarray-like, scalar, or None, default: NoneLocation of the bottom of each bin, i.e. bins are drawn from\nbottom to bottom + hist(x, bins) If a scalar, the bottom\nof each bin is shifted by the same amount. If an array, each bin\nis shifted independently and the length of bottom must match the\nnumber of bins. If None, defaults to 0.\n\nhisttype{'bar', 'barstacked', 'step', 'stepfilled'}, default: 'bar'The type of histogram to draw.\n\n'bar' is a traditional bar-type histogram. If multiple data\nare given the bars are arranged side by side.\n'barstacked' is a bar-type histogram where multiple\ndata are stacked on top of each other.\n'step' generates a lineplot that is by default unfilled.\n'stepfilled' generates a lineplot that is by default filled.\n\n\nalign{'left', 'mid', 'right'}, default: 'mid'The horizontal alignment of the histogram bars.\n\n'left': bars are centered on the left bin edges.\n'mid': bars are centered between the bin edges.\n'right': bars are centered on the right bin edges.\n\n\norientation{'vertical', 'horizontal'}, default: 'vertical'If 'horizontal', barh will be used for bar-type histograms\nand the bottom kwarg will be the left edges.\n\nrwidthfloat or None, default: NoneThe relative width of the bars as a fraction of the bin width. If\nNone, automatically compute the width.\nIgnored if histtype is 'step' or 'stepfilled'.\n\nlogbool, default: FalseIf True, the histogram axis will be set to a log scale.\n\ncolorcolor or array-like of colors or None, default: NoneColor or sequence of colors, one per dataset. Default (None)\nuses the standard line color sequence.\n\nlabelstr or None, default: NoneString, or sequence of strings to match multiple datasets. Bar\ncharts yield multiple patches per dataset, but only the first gets\nthe label, so that legend will work as expected.\n\nstackedbool, default: FalseIf True, multiple data are stacked on top of each other If\nFalse multiple data are arranged side by side if histtype is\n'bar' or on top of each other if histtype is 'step'\n\n\n\nReturns:\n\nnarray or list of arraysThe values of the histogram bins. See density and weights for a\ndescription of the possible semantics. If input x is an array,\nthen this is an array of length nbins. If input is a sequence of\narrays [data1, data2, ...], then this is a list of arrays with\nthe values of the histograms for each of the arrays in the same\norder. The dtype of the array n (or of its element arrays) will\nalways be float even if no weighting or normalization is used.\n\nbinsarrayThe edges of the bins. Length nbins + 1 (nbins left edges and right\nedge of last bin). Always a single array even when multiple data\nsets are passed in.\n\npatchesBarContainer or list of a single Polygon or list of such objectsContainer of individual artists used to create the histogram\nor list of such containers if there are multiple input datasets.\n\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, weights\n\n**kwargsPatch properties\n\n\n\n\n\nSee also\n\nhist2d2D histogram with rectangular bins\n\nhexbin2D histogram with hexagonal bins\n\nstairsPlot a pre-computed histogram\n\nbarPlot a pre-computed histogram\n\n\n\nNotes\nFor large numbers of bins (>1000), plotting can be significantly\naccelerated by using stairs to plot a pre-computed histogram\n(plt.stairs(*np.histogram(data))), or by setting histtype to\n'step' or 'stepfilled' rather than 'bar' or 'barstacked'.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.hist2d",
    "class": {
        "class method": [
            {
                "method name": "Axes.hist2d(x, y, bins=10, range=None, density=False, weights=None, cmin=None, cmax=None, *, data=None, **kwargs)",
                "method text": "Make a 2D histogram plot.\n\nParameters:\n\nx, yarray-like, shape (n, )Input values\n\nbinsNone or int or [int, int] or array-like or [array, array]The bin specification:\n\nIf int, the number of bins for the two dimensions\n(nx = ny = bins).\nIf [int, int], the number of bins in each dimension\n(nx, ny = bins).\nIf array-like, the bin edges for the two dimensions\n(x_edges = y_edges = bins).\nIf [array, array], the bin edges in each dimension\n(x_edges, y_edges = bins).\n\nThe default value is 10.\n\nrangearray-like shape(2, 2), optionalThe leftmost and rightmost edges of the bins along each dimension\n(if not specified explicitly in the bins parameters): [[xmin,\nxmax], [ymin, ymax]]. All values outside of this range will be\nconsidered outliers and not tallied in the histogram.\n\ndensitybool, default: FalseNormalize histogram. See the documentation for the density\nparameter of hist for more details.\n\nweightsarray-like, shape (n, ), optionalAn array of values w_i weighing each sample (x_i, y_i).\n\ncmin, cmaxfloat, default: NoneAll bins that has count less than cmin or more than cmax will not be\ndisplayed (set to NaN before passing to pcolormesh) and these count\nvalues in the return value count histogram will also be set to nan upon\nreturn.\n\n\n\nReturns:\n\nh2D arrayThe bi-dimensional histogram of samples x and y. Values in x are\nhistogrammed along the first dimension and values in y are\nhistogrammed along the second dimension.\n\nxedges1D arrayThe bin edges along the x-axis.\n\nyedges1D arrayThe bin edges along the y-axis.\n\nimageQuadMesh\n\n\nOther Parameters:\n\ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')The Colormap instance or registered colormap name used to map scalar data\nto colors.\n\nnormstr or Normalize, optionalThe normalization method used to scale scalar data to the [0, 1] range\nbefore mapping to colors using cmap. By default, a linear scaling is\nused, mapping the lowest value to 0 and the highest to 1.\nIf given, this can be one of the following:\n\nAn instance of Normalize or one of its subclasses\n(see Colormap Normalization).\nA scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc. For a\nlist of available scales, call matplotlib.scale.get_scale_names().\nIn that case, a suitable Normalize subclass is dynamically generated\nand instantiated.\n\n\nvmin, vmaxfloat, optionalWhen using scalar data and no explicit norm, vmin and vmax define\nthe data range that the colormap covers. By default, the colormap covers\nthe complete value range of the supplied data. It is an error to use\nvmin/vmax when a norm instance is given (but using a str norm\nname together with vmin/vmax is acceptable).\n\nalpha0 <= scalar <= 1 or None, optionalThe alpha blending value.\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, y, weights\n\n**kwargsAdditional parameters are passed along to the\npcolormesh method and QuadMesh\nconstructor.\n\n\n\n\n\nSee also\n\nhist1D histogram plotting\n\nhexbin2D histogram with hexagonal bins\n\n\n\nNotes\n\nCurrently hist2d calculates its own axis limits, and any limits\npreviously set are ignored.\nRendering the histogram with a logarithmic color scale is\naccomplished by passing a colors.LogNorm instance to the norm\nkeyword argument. Likewise, power-law normalization (similar\nin effect to gamma correction) can be accomplished with\ncolors.PowerNorm.\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.stairs",
    "class": {
        "class method": [
            {
                "method name": "Axes.stairs(values, edges=None, *, orientation='vertical', baseline=0, fill=False, data=None, **kwargs)",
                "method text": "A stepwise constant function as a line with bounding edges\nor a filled plot.\n\nParameters:\n\nvaluesarray-likeThe step heights.\n\nedgesarray-likeThe edge positions, with len(edges) == len(vals) + 1,\nbetween which the curve takes on vals values.\n\norientation{'vertical', 'horizontal'}, default: 'vertical'The direction of the steps. Vertical means that values are along\nthe y-axis, and edges are along the x-axis.\n\nbaselinefloat, array-like or None, default: 0The bottom value of the bounding edges or when\nfill=True, position of lower edge. If fill is\nTrue or an array is passed to baseline, a closed\npath is drawn.\n\nfillbool, default: FalseWhether the area under the step curve should be filled.\n\n\n\nReturns:\n\nStepPatchStepPatch\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n**kwargsStepPatch properties\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.clabel",
    "class": {
        "class method": [
            {
                "method name": "Axes.clabel(CS, levels=None, **kwargs)",
                "method text": "Label a contour plot.\nAdds labels to line contours in given ContourSet.\n\nParameters:\n\nCSContourSet instanceLine contours to label.\n\nlevelsarray-like, optionalA list of level values, that should be labeled. The list must be\na subset of CS.levels. If not given, all levels are labeled.\n\n**kwargsAll other parameters are documented in clabel.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.contour",
    "class": {
        "class method": [
            {
                "method name": "Axes.contour(*args, data=None, **kwargs)",
                "method text": "Plot contour lines.\nCall signature:\ncontour([X, Y,] Z, [levels], **kwargs)\n\n\ncontour and contourf draw contour lines and filled contours,\nrespectively. Except as noted, function signatures and return values\nare the same for both versions.\n\nParameters:\n\nX, Yarray-like, optionalThe coordinates of the values in Z.\nX and Y must both be 2D with the same shape as Z (e.g.\ncreated via numpy.meshgrid), or they must both be 1-D such\nthat len(X) == N is the number of columns in Z and\nlen(Y) == M is the number of rows in Z.\nX and Y must both be ordered monotonically.\nIf not given, they are assumed to be integer indices, i.e.\nX = range(N), Y = range(M).\n\nZ(M, N) array-likeThe height values over which the contour is drawn. Color-mapping is\ncontrolled by cmap, norm, vmin, and vmax.\n\nlevelsint or array-like, optionalDetermines the number and positions of the contour lines / regions.\nIf an int n, use MaxNLocator, which tries\nto automatically choose no more than n+1 \"nice\" contour levels\nbetween minimum and maximum numeric values of Z.\nIf array-like, draw contour lines at the specified levels.\nThe values must be in increasing order.\n\n\n\nReturns:\n\nQuadContourSet\n\n\nOther Parameters:\n\ncorner_maskbool, default: rcParams[\"contour.corner_mask\"] (default: True)Enable/disable corner masking, which only has an effect if Z is\na masked array. If False, any quad touching a masked point is\nmasked out. If True, only the triangular corners of quads\nnearest those points are always masked out, other triangular\ncorners comprising three unmasked points are contoured as usual.\n\ncolorscolor string or sequence of colors, optionalThe colors of the levels, i.e. the lines for contour and the\nareas for contourf.\nThe sequence is cycled for the levels in ascending order. If the\nsequence is shorter than the number of levels, it's repeated.\nAs a shortcut, single color strings may be used in place of\none-element lists, i.e. 'red' instead of ['red'] to color\nall levels with the same color. This shortcut does only work for\ncolor strings, not for other ways of specifying colors.\nBy default (value None), the colormap specified by cmap\nwill be used.\n\nalphafloat, default: 1The alpha blending value, between 0 (transparent) and 1 (opaque).\n\ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')The Colormap instance or registered colormap name used to map scalar data\nto colors.\nThis parameter is ignored if colors is set.\n\nnormstr or Normalize, optionalThe normalization method used to scale scalar data to the [0, 1] range\nbefore mapping to colors using cmap. By default, a linear scaling is\nused, mapping the lowest value to 0 and the highest to 1.\nIf given, this can be one of the following:\n\nAn instance of Normalize or one of its subclasses\n(see Colormap Normalization).\nA scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc. For a\nlist of available scales, call matplotlib.scale.get_scale_names().\nIn that case, a suitable Normalize subclass is dynamically generated\nand instantiated.\n\nThis parameter is ignored if colors is set.\n\nvmin, vmaxfloat, optionalWhen using scalar data and no explicit norm, vmin and vmax define\nthe data range that the colormap covers. By default, the colormap covers\nthe complete value range of the supplied data. It is an error to use\nvmin/vmax when a norm instance is given (but using a str norm\nname together with vmin/vmax is acceptable).\nIf vmin or vmax are not given, the default color scaling is based on\nlevels.\nThis parameter is ignored if colors is set.\n\norigin{None, 'upper', 'lower', 'image'}, default: NoneDetermines the orientation and exact position of Z by specifying\nthe position of Z[0, 0]. This is only relevant, if X, Y\nare not given.\n\nNone: Z[0, 0] is at X=0, Y=0 in the lower left corner.\n'lower': Z[0, 0] is at X=0.5, Y=0.5 in the lower left corner.\n'upper': Z[0, 0] is at X=N+0.5, Y=0.5 in the upper left\ncorner.\n'image': Use the value from rcParams[\"image.origin\"] (default: 'upper').\n\n\nextent(x0, x1, y0, y1), optionalIf origin is not None, then extent is interpreted as in\nimshow: it gives the outer pixel boundaries. In this case, the\nposition of Z[0, 0] is the center of the pixel, not a corner. If\norigin is None, then (x0, y0) is the position of Z[0, 0],\nand (x1, y1) is the position of Z[-1, -1].\nThis argument is ignored if X and Y are specified in the call\nto contour.\n\nlocatorticker.Locator subclass, optionalThe locator is used to determine the contour levels if they\nare not given explicitly via levels.\nDefaults to MaxNLocator.\n\nextend{'neither', 'both', 'min', 'max'}, default: 'neither'Determines the contourf-coloring of values that are outside the\nlevels range.\nIf 'neither', values outside the levels range are not colored.\nIf 'min', 'max' or 'both', color the values below, above or below\nand above the levels range.\nValues below min(levels) and above max(levels) are mapped\nto the under/over values of the Colormap. Note that most\ncolormaps do not have dedicated colors for these by default, so\nthat the over and under values are the edge values of the colormap.\nYou may want to set these values explicitly using\nColormap.set_under and Colormap.set_over.\n\nNote\nAn existing QuadContourSet does not get notified if\nproperties of its colormap are changed. Therefore, an explicit\ncall QuadContourSet.changed() is needed after modifying the\ncolormap. The explicit call can be left out, if a colorbar is\nassigned to the QuadContourSet because it internally calls\nQuadContourSet.changed().\n\nExample:\nx = np.arange(1, 10)\ny = x.reshape(-1, 1)\nh = x * y\n\ncs = plt.contourf(h, levels=[10, 30, 50],\n    colors=['#808080', '#A0A0A0', '#C0C0C0'], extend='both')\ncs.cmap.set_over('red')\ncs.cmap.set_under('blue')\ncs.changed()\n\n\n\nxunits, yunitsregistered units, optionalOverride axis units by specifying an instance of a\nmatplotlib.units.ConversionInterface.\n\nantialiasedbool, optionalEnable antialiasing, overriding the defaults. For\nfilled contours, the default is False. For line contours,\nit is taken from rcParams[\"lines.antialiased\"] (default: True).\n\nnchunkint >= 0, optionalIf 0, no subdivision of the domain. Specify a positive integer to\ndivide the domain into subdomains of nchunk by nchunk quads.\nChunking reduces the maximum length of polygons generated by the\ncontouring algorithm which reduces the rendering workload passed\non to the backend and also requires slightly less RAM. It can\nhowever introduce rendering artifacts at chunk boundaries depending\non the backend, the antialiased flag and value of alpha.\n\nlinewidthsfloat or array-like, default: rcParams[\"contour.linewidth\"] (default: None)Only applies to contour.\nThe line width of the contour lines.\nIf a number, all levels will be plotted with this linewidth.\nIf a sequence, the levels in ascending order will be plotted with\nthe linewidths in the order specified.\nIf None, this falls back to rcParams[\"lines.linewidth\"] (default: 1.5).\n\nlinestyles{None, 'solid', 'dashed', 'dashdot', 'dotted'}, optionalOnly applies to contour.\nIf linestyles is None, the default is 'solid' unless the lines are\nmonochrome. In that case, negative contours will instead take their\nlinestyle from the negative_linestyles argument.\nlinestyles can also be an iterable of the above strings specifying a set\nof linestyles to be used. If this iterable is shorter than the number of\ncontour levels it will be repeated as necessary.\n\nnegative_linestyles{None, 'solid', 'dashed', 'dashdot', 'dotted'}, optionalOnly applies to contour.\nIf linestyles is None and the lines are monochrome, this argument\nspecifies the line style for negative contours.\nIf negative_linestyles is None, the default is taken from\nrcParams[\"contour.negative_linestyles\"].\nnegative_linestyles can also be an iterable of the above strings\nspecifying a set of linestyles to be used. If this iterable is shorter than\nthe number of contour levels it will be repeated as necessary.\n\nhatcheslist[str], optionalOnly applies to contourf.\nA list of cross hatch patterns to use on the filled areas.\nIf None, no hatching will be added to the contour.\nHatching is supported in the PostScript, PDF, SVG and Agg\nbackends only.\n\nalgorithm{'mpl2005', 'mpl2014', 'serial', 'threaded'}, optionalWhich contouring algorithm to use to calculate the contour lines and\npolygons. The algorithms are implemented in\nContourPy, consult the\nContourPy documentation for\nfurther information.\nThe default is taken from rcParams[\"contour.algorithm\"] (default: 'mpl2014').\n\nclip_pathPatch or Path or TransformedPathSet the clip path. See set_clip_path.\n\nNew in version 3.8.\n\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n\n\n\nNotes\n\ncontourf differs from the MATLAB version in that it does not draw\nthe polygon edges. To draw edges, add line contours with calls to\ncontour.\ncontourf fills intervals that are closed at the top; that is, for\nboundaries z1 and z2, the filled region is:\nz1 < Z <= z2\n\n\nexcept for the lowest interval, which is closed on both sides (i.e.\nit includes the lowest value).\n\ncontour and contourf use a marching squares algorithm to\ncompute contour locations. More information can be found in\nContourPy documentation.\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.contourf",
    "class": {
        "class method": [
            {
                "method name": "Axes.contourf(*args, data=None, **kwargs)",
                "method text": "Plot filled contours.\nCall signature:\ncontourf([X, Y,] Z, [levels], **kwargs)\n\n\ncontour and contourf draw contour lines and filled contours,\nrespectively. Except as noted, function signatures and return values\nare the same for both versions.\n\nParameters:\n\nX, Yarray-like, optionalThe coordinates of the values in Z.\nX and Y must both be 2D with the same shape as Z (e.g.\ncreated via numpy.meshgrid), or they must both be 1-D such\nthat len(X) == N is the number of columns in Z and\nlen(Y) == M is the number of rows in Z.\nX and Y must both be ordered monotonically.\nIf not given, they are assumed to be integer indices, i.e.\nX = range(N), Y = range(M).\n\nZ(M, N) array-likeThe height values over which the contour is drawn. Color-mapping is\ncontrolled by cmap, norm, vmin, and vmax.\n\nlevelsint or array-like, optionalDetermines the number and positions of the contour lines / regions.\nIf an int n, use MaxNLocator, which tries\nto automatically choose no more than n+1 \"nice\" contour levels\nbetween minimum and maximum numeric values of Z.\nIf array-like, draw contour lines at the specified levels.\nThe values must be in increasing order.\n\n\n\nReturns:\n\nQuadContourSet\n\n\nOther Parameters:\n\ncorner_maskbool, default: rcParams[\"contour.corner_mask\"] (default: True)Enable/disable corner masking, which only has an effect if Z is\na masked array. If False, any quad touching a masked point is\nmasked out. If True, only the triangular corners of quads\nnearest those points are always masked out, other triangular\ncorners comprising three unmasked points are contoured as usual.\n\ncolorscolor string or sequence of colors, optionalThe colors of the levels, i.e. the lines for contour and the\nareas for contourf.\nThe sequence is cycled for the levels in ascending order. If the\nsequence is shorter than the number of levels, it's repeated.\nAs a shortcut, single color strings may be used in place of\none-element lists, i.e. 'red' instead of ['red'] to color\nall levels with the same color. This shortcut does only work for\ncolor strings, not for other ways of specifying colors.\nBy default (value None), the colormap specified by cmap\nwill be used.\n\nalphafloat, default: 1The alpha blending value, between 0 (transparent) and 1 (opaque).\n\ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')The Colormap instance or registered colormap name used to map scalar data\nto colors.\nThis parameter is ignored if colors is set.\n\nnormstr or Normalize, optionalThe normalization method used to scale scalar data to the [0, 1] range\nbefore mapping to colors using cmap. By default, a linear scaling is\nused, mapping the lowest value to 0 and the highest to 1.\nIf given, this can be one of the following:\n\nAn instance of Normalize or one of its subclasses\n(see Colormap Normalization).\nA scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc. For a\nlist of available scales, call matplotlib.scale.get_scale_names().\nIn that case, a suitable Normalize subclass is dynamically generated\nand instantiated.\n\nThis parameter is ignored if colors is set.\n\nvmin, vmaxfloat, optionalWhen using scalar data and no explicit norm, vmin and vmax define\nthe data range that the colormap covers. By default, the colormap covers\nthe complete value range of the supplied data. It is an error to use\nvmin/vmax when a norm instance is given (but using a str norm\nname together with vmin/vmax is acceptable).\nIf vmin or vmax are not given, the default color scaling is based on\nlevels.\nThis parameter is ignored if colors is set.\n\norigin{None, 'upper', 'lower', 'image'}, default: NoneDetermines the orientation and exact position of Z by specifying\nthe position of Z[0, 0]. This is only relevant, if X, Y\nare not given.\n\nNone: Z[0, 0] is at X=0, Y=0 in the lower left corner.\n'lower': Z[0, 0] is at X=0.5, Y=0.5 in the lower left corner.\n'upper': Z[0, 0] is at X=N+0.5, Y=0.5 in the upper left\ncorner.\n'image': Use the value from rcParams[\"image.origin\"] (default: 'upper').\n\n\nextent(x0, x1, y0, y1), optionalIf origin is not None, then extent is interpreted as in\nimshow: it gives the outer pixel boundaries. In this case, the\nposition of Z[0, 0] is the center of the pixel, not a corner. If\norigin is None, then (x0, y0) is the position of Z[0, 0],\nand (x1, y1) is the position of Z[-1, -1].\nThis argument is ignored if X and Y are specified in the call\nto contour.\n\nlocatorticker.Locator subclass, optionalThe locator is used to determine the contour levels if they\nare not given explicitly via levels.\nDefaults to MaxNLocator.\n\nextend{'neither', 'both', 'min', 'max'}, default: 'neither'Determines the contourf-coloring of values that are outside the\nlevels range.\nIf 'neither', values outside the levels range are not colored.\nIf 'min', 'max' or 'both', color the values below, above or below\nand above the levels range.\nValues below min(levels) and above max(levels) are mapped\nto the under/over values of the Colormap. Note that most\ncolormaps do not have dedicated colors for these by default, so\nthat the over and under values are the edge values of the colormap.\nYou may want to set these values explicitly using\nColormap.set_under and Colormap.set_over.\n\nNote\nAn existing QuadContourSet does not get notified if\nproperties of its colormap are changed. Therefore, an explicit\ncall QuadContourSet.changed() is needed after modifying the\ncolormap. The explicit call can be left out, if a colorbar is\nassigned to the QuadContourSet because it internally calls\nQuadContourSet.changed().\n\nExample:\nx = np.arange(1, 10)\ny = x.reshape(-1, 1)\nh = x * y\n\ncs = plt.contourf(h, levels=[10, 30, 50],\n    colors=['#808080', '#A0A0A0', '#C0C0C0'], extend='both')\ncs.cmap.set_over('red')\ncs.cmap.set_under('blue')\ncs.changed()\n\n\n\nxunits, yunitsregistered units, optionalOverride axis units by specifying an instance of a\nmatplotlib.units.ConversionInterface.\n\nantialiasedbool, optionalEnable antialiasing, overriding the defaults. For\nfilled contours, the default is False. For line contours,\nit is taken from rcParams[\"lines.antialiased\"] (default: True).\n\nnchunkint >= 0, optionalIf 0, no subdivision of the domain. Specify a positive integer to\ndivide the domain into subdomains of nchunk by nchunk quads.\nChunking reduces the maximum length of polygons generated by the\ncontouring algorithm which reduces the rendering workload passed\non to the backend and also requires slightly less RAM. It can\nhowever introduce rendering artifacts at chunk boundaries depending\non the backend, the antialiased flag and value of alpha.\n\nlinewidthsfloat or array-like, default: rcParams[\"contour.linewidth\"] (default: None)Only applies to contour.\nThe line width of the contour lines.\nIf a number, all levels will be plotted with this linewidth.\nIf a sequence, the levels in ascending order will be plotted with\nthe linewidths in the order specified.\nIf None, this falls back to rcParams[\"lines.linewidth\"] (default: 1.5).\n\nlinestyles{None, 'solid', 'dashed', 'dashdot', 'dotted'}, optionalOnly applies to contour.\nIf linestyles is None, the default is 'solid' unless the lines are\nmonochrome. In that case, negative contours will instead take their\nlinestyle from the negative_linestyles argument.\nlinestyles can also be an iterable of the above strings specifying a set\nof linestyles to be used. If this iterable is shorter than the number of\ncontour levels it will be repeated as necessary.\n\nnegative_linestyles{None, 'solid', 'dashed', 'dashdot', 'dotted'}, optionalOnly applies to contour.\nIf linestyles is None and the lines are monochrome, this argument\nspecifies the line style for negative contours.\nIf negative_linestyles is None, the default is taken from\nrcParams[\"contour.negative_linestyles\"].\nnegative_linestyles can also be an iterable of the above strings\nspecifying a set of linestyles to be used. If this iterable is shorter than\nthe number of contour levels it will be repeated as necessary.\n\nhatcheslist[str], optionalOnly applies to contourf.\nA list of cross hatch patterns to use on the filled areas.\nIf None, no hatching will be added to the contour.\nHatching is supported in the PostScript, PDF, SVG and Agg\nbackends only.\n\nalgorithm{'mpl2005', 'mpl2014', 'serial', 'threaded'}, optionalWhich contouring algorithm to use to calculate the contour lines and\npolygons. The algorithms are implemented in\nContourPy, consult the\nContourPy documentation for\nfurther information.\nThe default is taken from rcParams[\"contour.algorithm\"] (default: 'mpl2014').\n\nclip_pathPatch or Path or TransformedPathSet the clip path. See set_clip_path.\n\nNew in version 3.8.\n\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n\n\n\nNotes\n\ncontourf differs from the MATLAB version in that it does not draw\nthe polygon edges. To draw edges, add line contours with calls to\ncontour.\ncontourf fills intervals that are closed at the top; that is, for\nboundaries z1 and z2, the filled region is:\nz1 < Z <= z2\n\n\nexcept for the lowest interval, which is closed on both sides (i.e.\nit includes the lowest value).\n\ncontour and contourf use a marching squares algorithm to\ncompute contour locations. More information can be found in\nContourPy documentation.\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.imshow",
    "class": {
        "class method": [
            {
                "method name": "Axes.imshow(X, cmap=None, norm=None, *, aspect=None, interpolation=None, alpha=None, vmin=None, vmax=None, origin=None, extent=None, interpolation_stage=None, filternorm=True, filterrad=4.0, resample=None, url=None, data=None, **kwargs)",
                "method text": "Display data as an image, i.e., on a 2D regular raster.\nThe input may either be actual RGB(A) data, or 2D scalar data, which\nwill be rendered as a pseudocolor image. For displaying a grayscale\nimage, set up the colormapping using the parameters\ncmap='gray', vmin=0, vmax=255.\nThe number of pixels used to render an image is set by the Axes size\nand the figure dpi. This can lead to aliasing artifacts when\nthe image is resampled, because the displayed image size will usually\nnot match the size of X (see\nImage antialiasing).\nThe resampling can be controlled via the interpolation parameter\nand/or rcParams[\"image.interpolation\"] (default: 'antialiased').\n\nParameters:\n\nXarray-like or PIL imageThe image data. Supported array shapes are:\n\n(M, N): an image with scalar data. The values are mapped to\ncolors using normalization and a colormap. See parameters norm,\ncmap, vmin, vmax.\n(M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n(M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\ni.e. including transparency.\n\nThe first two dimensions (M, N) define the rows and columns of\nthe image.\nOut-of-range RGB(A) values are clipped.\n\ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')The Colormap instance or registered colormap name used to map scalar data\nto colors.\nThis parameter is ignored if X is RGB(A).\n\nnormstr or Normalize, optionalThe normalization method used to scale scalar data to the [0, 1] range\nbefore mapping to colors using cmap. By default, a linear scaling is\nused, mapping the lowest value to 0 and the highest to 1.\nIf given, this can be one of the following:\n\nAn instance of Normalize or one of its subclasses\n(see Colormap Normalization).\nA scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc. For a\nlist of available scales, call matplotlib.scale.get_scale_names().\nIn that case, a suitable Normalize subclass is dynamically generated\nand instantiated.\n\nThis parameter is ignored if X is RGB(A).\n\nvmin, vmaxfloat, optionalWhen using scalar data and no explicit norm, vmin and vmax define\nthe data range that the colormap covers. By default, the colormap covers\nthe complete value range of the supplied data. It is an error to use\nvmin/vmax when a norm instance is given (but using a str norm\nname together with vmin/vmax is acceptable).\nThis parameter is ignored if X is RGB(A).\n\naspect{'equal', 'auto'} or float or None, default: NoneThe aspect ratio of the Axes. This parameter is particularly\nrelevant for images since it determines whether data pixels are\nsquare.\nThis parameter is a shortcut for explicitly calling\nAxes.set_aspect. See there for further details.\n\n'equal': Ensures an aspect ratio of 1. Pixels will be square\n(unless pixel sizes are explicitly made non-square in data\ncoordinates using extent).\n'auto': The Axes is kept fixed and the aspect is adjusted so\nthat the data fit in the Axes. In general, this will result in\nnon-square pixels.\n\nNormally, None (the default) means to use rcParams[\"image.aspect\"] (default: 'equal'). However, if\nthe image uses a transform that does not contain the axes data transform,\nthen None means to not modify the axes aspect at all (in that case, directly\ncall Axes.set_aspect if desired).\n\ninterpolationstr, default: rcParams[\"image.interpolation\"] (default: 'antialiased')The interpolation method used.\nSupported values are 'none', 'antialiased', 'nearest', 'bilinear',\n'bicubic', 'spline16', 'spline36', 'hanning', 'hamming', 'hermite',\n'kaiser', 'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell',\n'sinc', 'lanczos', 'blackman'.\nThe data X is resampled to the pixel size of the image on the\nfigure canvas, using the interpolation method to either up- or\ndownsample the data.\nIf interpolation is 'none', then for the ps, pdf, and svg\nbackends no down- or upsampling occurs, and the image data is\npassed to the backend as a native image. Note that different ps,\npdf, and svg viewers may display these raw pixels differently. On\nother backends, 'none' is the same as 'nearest'.\nIf interpolation is the default 'antialiased', then 'nearest'\ninterpolation is used if the image is upsampled by more than a\nfactor of three (i.e. the number of display pixels is at least\nthree times the size of the data array). If the upsampling rate is\nsmaller than 3, or the image is downsampled, then 'hanning'\ninterpolation is used to act as an anti-aliasing filter, unless the\nimage happens to be upsampled by exactly a factor of two or one.\nSee\nInterpolations for imshow\nfor an overview of the supported interpolation methods, and\nImage antialiasing for\na discussion of image antialiasing.\nSome interpolation methods require an additional radius parameter,\nwhich can be set by filterrad. Additionally, the antigrain image\nresize filter is controlled by the parameter filternorm.\n\ninterpolation_stage{'data', 'rgba'}, default: 'data'If 'data', interpolation\nis carried out on the data provided by the user. If 'rgba', the\ninterpolation is carried out after the colormapping has been\napplied (visual interpolation).\n\nalphafloat or array-like, optionalThe alpha blending value, between 0 (transparent) and 1 (opaque).\nIf alpha is an array, the alpha blending values are applied pixel\nby pixel, and alpha must have the same shape as X.\n\norigin{'upper', 'lower'}, default: rcParams[\"image.origin\"] (default: 'upper')Place the [0, 0] index of the array in the upper left or lower\nleft corner of the Axes. The convention (the default) 'upper' is\ntypically used for matrices and images.\nNote that the vertical axis points upward for 'lower'\nbut downward for 'upper'.\nSee the origin and extent in imshow tutorial for\nexamples and a more detailed description.\n\nextentfloats (left, right, bottom, top), optionalThe bounding box in data coordinates that the image will fill.\nThese values may be unitful and match the units of the Axes.\nThe image is stretched individually along x and y to fill the box.\nThe default extent is determined by the following conditions.\nPixels have unit size in data coordinates. Their centers are on\ninteger coordinates, and their center coordinates range from 0 to\ncolumns-1 horizontally and from 0 to rows-1 vertically.\nNote that the direction of the vertical axis and thus the default\nvalues for top and bottom depend on origin:\n\nFor origin == 'upper' the default is\n(-0.5, numcols-0.5, numrows-0.5, -0.5).\nFor origin == 'lower' the default is\n(-0.5, numcols-0.5, -0.5, numrows-0.5).\n\nSee the origin and extent in imshow tutorial for\nexamples and a more detailed description.\n\nfilternormbool, default: TrueA parameter for the antigrain image resize filter (see the\nantigrain documentation). If filternorm is set, the filter\nnormalizes integer values and corrects the rounding errors. It\ndoesn't do anything with the source floating point values, it\ncorrects only integers according to the rule of 1.0 which means\nthat any sum of pixel weights must be equal to 1.0. So, the\nfilter function must produce a graph of the proper shape.\n\nfilterradfloat > 0, default: 4.0The filter radius for filters that have a radius parameter, i.e.\nwhen interpolation is one of: 'sinc', 'lanczos' or 'blackman'.\n\nresamplebool, default: rcParams[\"image.resample\"] (default: True)When True, use a full resampling method. When False, only\nresample when the output image is larger than the input image.\n\nurlstr, optionalSet the url of the created AxesImage. See Artist.set_url.\n\n\n\nReturns:\n\nAxesImage\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n**kwargsArtist propertiesThese parameters are passed on to the constructor of the\nAxesImage artist.\n\n\n\n\n\nSee also\n\nmatshowPlot a matrix or an array as an image.\n\n\n\nNotes\nUnless extent is used, pixel centers will be located at integer\ncoordinates. In other words: the origin will coincide with the center\nof pixel (0, 0).\nThere are two common representations for RGB images with an alpha\nchannel:\n\nStraight (unassociated) alpha: R, G, and B channels represent the\ncolor of the pixel, disregarding its opacity.\nPremultiplied (associated) alpha: R, G, and B channels represent\nthe color of the pixel, adjusted for its opacity by multiplication.\n\nimshow expects RGB images adopting the straight\n(unassociated) alpha representation.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.matshow",
    "class": {
        "class method": [
            {
                "method name": "Axes.matshow(Z, **kwargs)",
                "method text": "Plot the values of a 2D matrix or array as color-coded image.\nThe matrix will be shown the way it would be printed, with the first\nrow at the top. Row and column numbering is zero-based.\n\nParameters:\n\nZ(M, N) array-likeThe matrix to be displayed.\n\n\n\nReturns:\n\nAxesImage\n\n\nOther Parameters:\n\n**kwargsimshow arguments\n\n\n\n\nSee also\n\nimshowMore general function to plot data on a 2D regular raster.\n\n\n\nNotes\nThis is just a convenience function wrapping imshow to set useful\ndefaults for displaying a matrix. In particular:\n\nSet origin='upper'.\nSet interpolation='nearest'.\nSet aspect='equal'.\nTicks are placed to the left and above.\nTicks are formatted to show integer indices.\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.pcolor",
    "class": {
        "class method": [
            {
                "method name": "Axes.pcolor(*args, shading=None, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, data=None, **kwargs)",
                "method text": "Create a pseudocolor plot with a non-regular rectangular grid.\nCall signature:\npcolor([X, Y,] C, **kwargs)\n\n\nX and Y can be used to specify the corners of the quadrilaterals.\n\nHint\npcolor() can be very slow for large arrays. In most\ncases you should use the similar but much faster\npcolormesh instead. See\nDifferences between pcolor() and pcolormesh() for a discussion of the\ndifferences.\n\n\nParameters:\n\nC2D array-likeThe color-mapped values. Color-mapping is controlled by cmap,\nnorm, vmin, and vmax.\n\nX, Yarray-like, optionalThe coordinates of the corners of quadrilaterals of a pcolormesh:\n(X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])\n                      \u25cf\u2576\u2500\u2500\u2500\u2574\u25cf\n                      \u2502     \u2502\n                      \u25cf\u2576\u2500\u2500\u2500\u2574\u25cf\n    (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])\n\n\nNote that the column index corresponds to the x-coordinate, and\nthe row index corresponds to y. For details, see the\nNotes section below.\nIf shading='flat' the dimensions of X and Y should be one\ngreater than those of C, and the quadrilateral is colored due\nto the value at C[i, j]. If X, Y and C have equal\ndimensions, a warning will be raised and the last row and column\nof C will be ignored.\nIf shading='nearest', the dimensions of X and Y should be\nthe same as those of C (if not, a ValueError will be raised). The\ncolor C[i, j] will be centered on (X[i, j], Y[i, j]).\nIf X and/or Y are 1-D arrays or column vectors they will be\nexpanded as needed into the appropriate 2D arrays, making a\nrectangular grid.\n\nshading{'flat', 'nearest', 'auto'}, default: rcParams[\"pcolor.shading\"] (default: 'auto')The fill style for the quadrilateral. Possible values:\n\n'flat': A solid color is used for each quad. The color of the\nquad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by\nC[i, j]. The dimensions of X and Y should be\none greater than those of C; if they are the same as C,\nthen a deprecation warning is raised, and the last row\nand column of C are dropped.\n'nearest': Each grid point will have a color centered on it,\nextending halfway between the adjacent grid centers. The\ndimensions of X and Y must be the same as C.\n'auto': Choose 'flat' if dimensions of X and Y are one\nlarger than C. Choose 'nearest' if dimensions are the same.\n\nSee pcolormesh grids and shading\nfor more description.\n\ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')The Colormap instance or registered colormap name used to map scalar data\nto colors.\n\nnormstr or Normalize, optionalThe normalization method used to scale scalar data to the [0, 1] range\nbefore mapping to colors using cmap. By default, a linear scaling is\nused, mapping the lowest value to 0 and the highest to 1.\nIf given, this can be one of the following:\n\nAn instance of Normalize or one of its subclasses\n(see Colormap Normalization).\nA scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc. For a\nlist of available scales, call matplotlib.scale.get_scale_names().\nIn that case, a suitable Normalize subclass is dynamically generated\nand instantiated.\n\n\nvmin, vmaxfloat, optionalWhen using scalar data and no explicit norm, vmin and vmax define\nthe data range that the colormap covers. By default, the colormap covers\nthe complete value range of the supplied data. It is an error to use\nvmin/vmax when a norm instance is given (but using a str norm\nname together with vmin/vmax is acceptable).\n\nedgecolors{'none', None, 'face', color, color sequence}, optionalThe color of the edges. Defaults to 'none'. Possible values:\n\n'none' or '': No edge.\nNone: rcParams[\"patch.edgecolor\"] (default: 'black') will be used. Note that currently\nrcParams[\"patch.force_edgecolor\"] (default: False) has to be True for this to work.\n'face': Use the adjacent face color.\nA color or sequence of colors will set the edge color.\n\nThe singular form edgecolor works as an alias.\n\nalphafloat, default: NoneThe alpha blending value of the face color, between 0 (transparent)\nand 1 (opaque). Note: The edgecolor is currently not affected by\nthis.\n\nsnapbool, default: FalseWhether to snap the mesh to pixel boundaries.\n\n\n\nReturns:\n\nmatplotlib.collections.PolyQuadMesh\n\n\nOther Parameters:\n\nantialiasedsbool, default: FalseThe default antialiaseds is False if the default\nedgecolors=\"none\" is used. This eliminates artificial lines\nat patch boundaries, and works regardless of the value of alpha.\nIf edgecolors is not \"none\", then the default antialiaseds\nis taken from rcParams[\"patch.antialiased\"] (default: True).\nStroking the edges may be preferred if alpha is 1, but will\ncause artifacts otherwise.\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n**kwargsAdditionally, the following arguments are allowed. They are passed\nalong to the PolyQuadMesh constructor:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\narray-like or scalar or None\n\nanimated\nbool\n\nantialiased or aa or antialiaseds\nbool or list of bools\n\narray\narray-like or None\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclim\n(vmin: float, vmax: float)\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncmap\nColormap or str or None\n\ncolor\ncolor or list of RGBA tuples\n\nedgecolor or ec or edgecolors\ncolor or list of colors or 'face'\n\nfacecolor or facecolors or fc\ncolor or list of colors\n\nfigure\nFigure\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or dashes or linestyles or ls\nstr or tuple or list thereof\n\nlinewidth or linewidths or lw\nfloat or list of floats\n\nmouseover\nbool\n\nnorm\nNormalize or str or None\n\noffset_transform or transOffset\nTransform\n\noffsets\n(N, 2) or (2,) array-like\n\npath_effects\nlist of AbstractPathEffect\n\npaths\nlist of array-like\n\npicker\nNone or bool or float or callable\n\npickradius\nfloat\n\nrasterized\nbool\n\nsizes\nnumpy.ndarray or None\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nurls\nlist of str or None\n\nverts\nlist of array-like\n\nverts_and_codes\nunknown\n\nvisible\nbool\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\npcolormeshfor an explanation of the differences between pcolor and pcolormesh.\n\nimshowIf X and Y are each equidistant, imshow can be a faster alternative.\n\n\n\nNotes\nMasked arrays\nX, Y and C may be masked arrays. If either C[i, j], or one\nof the vertices surrounding C[i, j] (X or Y at\n[i, j], [i+1, j], [i, j+1], [i+1, j+1]) is masked, nothing is\nplotted.\nGrid orientation\nThe grid orientation follows the standard matrix convention: An array\nC with shape (nrows, ncolumns) is plotted with the column number as\nX and the row number as Y.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.pcolorfast",
    "class": {
        "class method": [
            {
                "method name": "Axes.pcolorfast(*args, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, data=None, **kwargs)",
                "method text": "Create a pseudocolor plot with a non-regular rectangular grid.\nCall signature:\nax.pcolorfast([X, Y], C, /, **kwargs)\n\n\nThis method is similar to pcolor and pcolormesh.\nIt's designed to provide the fastest pcolor-type plotting with the\nAgg backend. To achieve this, it uses different algorithms internally\ndepending on the complexity of the input grid (regular rectangular,\nnon-regular rectangular or arbitrary quadrilateral).\n\nWarning\nThis method is experimental. Compared to pcolor or\npcolormesh it has some limitations:\n\nIt supports only flat shading (no outlines)\nIt lacks support for log scaling of the axes.\nIt does not have a pyplot wrapper.\n\n\n\nParameters:\n\nCarray-likeThe image data. Supported array shapes are:\n\n(M, N): an image with scalar data. Color-mapping is controlled\nby cmap, norm, vmin, and vmax.\n(M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n(M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\ni.e. including transparency.\n\nThe first two dimensions (M, N) define the rows and columns of\nthe image.\nThis parameter can only be passed positionally.\n\nX, Ytuple or array-like, default: (0, N), (0, M)X and Y are used to specify the coordinates of the\nquadrilaterals. There are different ways to do this:\n\nUse tuples X=(xmin, xmax) and Y=(ymin, ymax) to define\na uniform rectangular grid.\nThe tuples define the outer edges of the grid. All individual\nquadrilaterals will be of the same size. This is the fastest\nversion.\n\nUse 1D arrays X, Y to specify a non-uniform rectangular\ngrid.\nIn this case X and Y have to be monotonic 1D arrays of length\nN+1 and M+1, specifying the x and y boundaries of the cells.\nThe speed is intermediate. Note: The grid is checked, and if\nfound to be uniform the fast version is used.\n\nUse 2D arrays X, Y if you need an arbitrary quadrilateral\ngrid (i.e. if the quadrilaterals are not rectangular).\nIn this case X and Y are 2D arrays with shape (M + 1, N + 1),\nspecifying the x and y coordinates of the corners of the colored\nquadrilaterals.\nThis is the most general, but the slowest to render. It may\nproduce faster and more compact output using ps, pdf, and\nsvg backends, however.\n\n\nThese arguments can only be passed positionally.\n\ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')The Colormap instance or registered colormap name used to map scalar data\nto colors.\nThis parameter is ignored if C is RGB(A).\n\nnormstr or Normalize, optionalThe normalization method used to scale scalar data to the [0, 1] range\nbefore mapping to colors using cmap. By default, a linear scaling is\nused, mapping the lowest value to 0 and the highest to 1.\nIf given, this can be one of the following:\n\nAn instance of Normalize or one of its subclasses\n(see Colormap Normalization).\nA scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc. For a\nlist of available scales, call matplotlib.scale.get_scale_names().\nIn that case, a suitable Normalize subclass is dynamically generated\nand instantiated.\n\nThis parameter is ignored if C is RGB(A).\n\nvmin, vmaxfloat, optionalWhen using scalar data and no explicit norm, vmin and vmax define\nthe data range that the colormap covers. By default, the colormap covers\nthe complete value range of the supplied data. It is an error to use\nvmin/vmax when a norm instance is given (but using a str norm\nname together with vmin/vmax is acceptable).\nThis parameter is ignored if C is RGB(A).\n\nalphafloat, default: NoneThe alpha blending value, between 0 (transparent) and 1 (opaque).\n\nsnapbool, default: FalseWhether to snap the mesh to pixel boundaries.\n\n\n\nReturns:\n\nAxesImage or PcolorImage or QuadMeshThe return type depends on the type of grid:\n\nAxesImage for a regular rectangular grid.\nPcolorImage for a non-regular rectangular grid.\nQuadMesh for a non-rectangular grid.\n\n\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n**kwargsSupported additional parameters depend on the type of grid.\nSee return types of image for further description.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.pcolormesh",
    "class": {
        "class method": [
            {
                "method name": "Axes.pcolormesh(*args, alpha=None, norm=None, cmap=None, vmin=None, vmax=None, shading=None, antialiased=False, data=None, **kwargs)",
                "method text": "Create a pseudocolor plot with a non-regular rectangular grid.\nCall signature:\npcolormesh([X, Y,] C, **kwargs)\n\n\nX and Y can be used to specify the corners of the quadrilaterals.\n\nHint\npcolormesh is similar to pcolor. It is much faster\nand preferred in most cases. For a detailed discussion on the\ndifferences see Differences between pcolor() and pcolormesh().\n\n\nParameters:\n\nCarray-likeThe mesh data. Supported array shapes are:\n\n(M, N) or M*N: a mesh with scalar data. The values are mapped to\ncolors using normalization and a colormap. See parameters norm,\ncmap, vmin, vmax.\n(M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n(M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\ni.e. including transparency.\n\nThe first two dimensions (M, N) define the rows and columns of\nthe mesh data.\n\nX, Yarray-like, optionalThe coordinates of the corners of quadrilaterals of a pcolormesh:\n(X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])\n                      \u25cf\u2576\u2500\u2500\u2500\u2574\u25cf\n                      \u2502     \u2502\n                      \u25cf\u2576\u2500\u2500\u2500\u2574\u25cf\n    (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])\n\n\nNote that the column index corresponds to the x-coordinate, and\nthe row index corresponds to y. For details, see the\nNotes section below.\nIf shading='flat' the dimensions of X and Y should be one\ngreater than those of C, and the quadrilateral is colored due\nto the value at C[i, j]. If X, Y and C have equal\ndimensions, a warning will be raised and the last row and column\nof C will be ignored.\nIf shading='nearest' or 'gouraud', the dimensions of X\nand Y should be the same as those of C (if not, a ValueError\nwill be raised). For 'nearest' the color C[i, j] is\ncentered on (X[i, j], Y[i, j]). For 'gouraud', a smooth\ninterpolation is caried out between the quadrilateral corners.\nIf X and/or Y are 1-D arrays or column vectors they will be\nexpanded as needed into the appropriate 2D arrays, making a\nrectangular grid.\n\ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')The Colormap instance or registered colormap name used to map scalar data\nto colors.\n\nnormstr or Normalize, optionalThe normalization method used to scale scalar data to the [0, 1] range\nbefore mapping to colors using cmap. By default, a linear scaling is\nused, mapping the lowest value to 0 and the highest to 1.\nIf given, this can be one of the following:\n\nAn instance of Normalize or one of its subclasses\n(see Colormap Normalization).\nA scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc. For a\nlist of available scales, call matplotlib.scale.get_scale_names().\nIn that case, a suitable Normalize subclass is dynamically generated\nand instantiated.\n\n\nvmin, vmaxfloat, optionalWhen using scalar data and no explicit norm, vmin and vmax define\nthe data range that the colormap covers. By default, the colormap covers\nthe complete value range of the supplied data. It is an error to use\nvmin/vmax when a norm instance is given (but using a str norm\nname together with vmin/vmax is acceptable).\n\nedgecolors{'none', None, 'face', color, color sequence}, optionalThe color of the edges. Defaults to 'none'. Possible values:\n\n'none' or '': No edge.\nNone: rcParams[\"patch.edgecolor\"] (default: 'black') will be used. Note that currently\nrcParams[\"patch.force_edgecolor\"] (default: False) has to be True for this to work.\n'face': Use the adjacent face color.\nA color or sequence of colors will set the edge color.\n\nThe singular form edgecolor works as an alias.\n\nalphafloat, default: NoneThe alpha blending value, between 0 (transparent) and 1 (opaque).\n\nshading{'flat', 'nearest', 'gouraud', 'auto'}, optionalThe fill style for the quadrilateral; defaults to\nrcParams[\"pcolor.shading\"] (default: 'auto'). Possible values:\n\n'flat': A solid color is used for each quad. The color of the\nquad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by\nC[i, j]. The dimensions of X and Y should be\none greater than those of C; if they are the same as C,\nthen a deprecation warning is raised, and the last row\nand column of C are dropped.\n'nearest': Each grid point will have a color centered on it,\nextending halfway between the adjacent grid centers. The\ndimensions of X and Y must be the same as C.\n'gouraud': Each quad will be Gouraud shaded: The color of the\ncorners (i', j') are given by C[i', j']. The color values of\nthe area in between is interpolated from the corner values.\nThe dimensions of X and Y must be the same as C. When\nGouraud shading is used, edgecolors is ignored.\n'auto': Choose 'flat' if dimensions of X and Y are one\nlarger than C. Choose 'nearest' if dimensions are the same.\n\nSee pcolormesh grids and shading\nfor more description.\n\nsnapbool, default: FalseWhether to snap the mesh to pixel boundaries.\n\nrasterizedbool, optionalRasterize the pcolormesh when drawing vector graphics. This can\nspeed up rendering and produce smaller files for large data sets.\nSee also Rasterization for vector graphics.\n\n\n\nReturns:\n\nmatplotlib.collections.QuadMesh\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n**kwargsAdditionally, the following arguments are allowed. They are passed\nalong to the QuadMesh constructor:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\narray-like or scalar or None\n\nanimated\nbool\n\nantialiased or aa or antialiaseds\nbool or list of bools\n\narray\narray-like\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclim\n(vmin: float, vmax: float)\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncmap\nColormap or str or None\n\ncolor\ncolor or list of RGBA tuples\n\nedgecolor or ec or edgecolors\ncolor or list of colors or 'face'\n\nfacecolor or facecolors or fc\ncolor or list of colors\n\nfigure\nFigure\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or dashes or linestyles or ls\nstr or tuple or list thereof\n\nlinewidth or linewidths or lw\nfloat or list of floats\n\nmouseover\nbool\n\nnorm\nNormalize or str or None\n\noffset_transform or transOffset\nTransform\n\noffsets\n(N, 2) or (2,) array-like\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nNone or bool or float or callable\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nurls\nlist of str or None\n\nvisible\nbool\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\npcolorAn alternative implementation with slightly different features. For a detailed discussion on the differences see Differences between pcolor() and pcolormesh().\n\nimshowIf X and Y are each equidistant, imshow can be a faster alternative.\n\n\n\nNotes\nMasked arrays\nC may be a masked array. If C[i, j] is masked, the corresponding\nquadrilateral will be transparent. Masking of X and Y is not\nsupported. Use pcolor if you need this functionality.\nGrid orientation\nThe grid orientation follows the standard matrix convention: An array\nC with shape (nrows, ncolumns) is plotted with the column number as\nX and the row number as Y.\nDifferences between pcolor() and pcolormesh()\nBoth methods are used to create a pseudocolor plot of a 2D array\nusing quadrilaterals.\nThe main difference lies in the created object and internal data\nhandling:\nWhile pcolor returns a PolyQuadMesh, pcolormesh\nreturns a QuadMesh. The latter is more specialized for the given\npurpose and thus is faster. It should almost always be preferred.\nThere is also a slight difference in the handling of masked arrays.\nBoth pcolor and pcolormesh support masked arrays\nfor C. However, only pcolor supports masked arrays for X\nand Y. The reason lies in the internal handling of the masked values.\npcolor leaves out the respective polygons from the\nPolyQuadMesh. pcolormesh sets the facecolor of the masked\nelements to transparent. You can see the difference when using\nedgecolors. While all edges are drawn irrespective of masking in a\nQuadMesh, the edge between two adjacent masked quadrilaterals in\npcolor is not drawn as the corresponding polygons do not\nexist in the PolyQuadMesh. Because PolyQuadMesh draws each individual\npolygon, it also supports applying hatches and linestyles to the collection.\nAnother difference is the support of Gouraud shading in\npcolormesh, which is not available with pcolor.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.spy",
    "class": {
        "class method": [
            {
                "method name": "Axes.spy(Z, precision=0, marker=None, markersize=None, aspect='equal', origin='upper', **kwargs)",
                "method text": "Plot the sparsity pattern of a 2D array.\nThis visualizes the non-zero values of the array.\nTwo plotting styles are available: image and marker. Both\nare available for full arrays, but only the marker style\nworks for scipy.sparse.spmatrix instances.\nImage style\nIf marker and markersize are None, imshow is used. Any\nextra remaining keyword arguments are passed to this method.\nMarker style\nIf Z is a scipy.sparse.spmatrix or marker or markersize are\nNone, a Line2D object will be returned with the value of marker\ndetermining the marker type, and any remaining keyword arguments\npassed to plot.\n\nParameters:\n\nZ(M, N) array-likeThe array to be plotted.\n\nprecisionfloat or 'present', default: 0If precision is 0, any non-zero value will be plotted. Otherwise,\nvalues of \\(|Z| > precision\\) will be plotted.\nFor scipy.sparse.spmatrix instances, you can also\npass 'present'. In this case any value present in the array\nwill be plotted, even if it is identically zero.\n\naspect{'equal', 'auto', None} or float, default: 'equal'The aspect ratio of the Axes. This parameter is particularly\nrelevant for images since it determines whether data pixels are\nsquare.\nThis parameter is a shortcut for explicitly calling\nAxes.set_aspect. See there for further details.\n\n'equal': Ensures an aspect ratio of 1. Pixels will be square.\n'auto': The Axes is kept fixed and the aspect is adjusted so\nthat the data fit in the Axes. In general, this will result in\nnon-square pixels.\nNone: Use rcParams[\"image.aspect\"] (default: 'equal').\n\n\norigin{'upper', 'lower'}, default: rcParams[\"image.origin\"] (default: 'upper')Place the [0, 0] index of the array in the upper left or lower left\ncorner of the Axes. The convention 'upper' is typically used for\nmatrices and images.\n\n\n\nReturns:\n\nAxesImage or Line2DThe return type depends on the plotting style (see above).\n\n\n\nOther Parameters:\n\n**kwargsThe supported additional parameters depend on the plotting style.\nFor the image style, you can pass the following additional\nparameters of imshow:\n\ncmap\nalpha\nurl\nany Artist properties (passed on to the AxesImage)\n\nFor the marker style, you can pass any Line2D property except\nfor linestyle:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.tripcolor",
    "class": {
        "class method": [
            {
                "method name": "Axes.tripcolor(*args, alpha=1.0, norm=None, cmap=None, vmin=None, vmax=None, shading='flat', facecolors=None, **kwargs)",
                "method text": "Create a pseudocolor plot of an unstructured triangular grid.\nCall signatures:\ntripcolor(triangulation, c, *, ...)\ntripcolor(x, y, c, *, [triangles=triangles], [mask=mask], ...)\n\n\nThe triangular grid can be specified either by passing a Triangulation\nobject as the first parameter, or by passing the points x, y and\noptionally the triangles and a mask. See Triangulation for an\nexplanation of these parameters.\nIt is possible to pass the triangles positionally, i.e.\ntripcolor(x, y, triangles, c, ...). However, this is discouraged.\nFor more clarity, pass triangles via keyword argument.\nIf neither of triangulation or triangles are given, the triangulation\nis calculated on the fly. In this case, it does not make sense to provide\ncolors at the triangle faces via c or facecolors because there are\nmultiple possible triangulations for a group of points and you don't know\nwhich triangles will be constructed.\n\nParameters:\n\ntriangulationTriangulationAn already created triangular grid.\n\nx, y, triangles, maskParameters defining the triangular grid. See Triangulation.\nThis is mutually exclusive with specifying triangulation.\n\ncarray-likeThe color values, either for the points or for the triangles. Which one\nis automatically inferred from the length of c, i.e. does it match\nthe number of points or the number of triangles. If there are the same\nnumber of points and triangles in the triangulation it is assumed that\ncolor values are defined at points; to force the use of color values at\ntriangles use the keyword argument facecolors=c instead of just\nc.\nThis parameter is position-only.\n\nfacecolorsarray-like, optionalCan be used alternatively to c to specify colors at the triangle\nfaces. This parameter takes precedence over c.\n\nshading{'flat', 'gouraud'}, default: 'flat'If 'flat' and the color values c are defined at points, the color\nvalues used for each triangle are from the mean c of the triangle's\nthree points. If shading is 'gouraud' then color values must be\ndefined at points.\n\nother_parametersAll other parameters are the same as for pcolor.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.triplot",
    "class": {
        "class method": [
            {
                "method name": "Axes.triplot(*args, **kwargs)",
                "method text": "Draw an unstructured triangular grid as lines and/or markers.\nCall signatures:\ntriplot(triangulation, ...)\ntriplot(x, y, [triangles], *, [mask=mask], ...)\n\n\nThe triangular grid can be specified either by passing a Triangulation\nobject as the first parameter, or by passing the points x, y and\noptionally the triangles and a mask. If neither of triangulation or\ntriangles are given, the triangulation is calculated on the fly.\n\nParameters:\n\ntriangulationTriangulationAn already created triangular grid.\n\nx, y, triangles, maskParameters defining the triangular grid. See Triangulation.\nThis is mutually exclusive with specifying triangulation.\n\nother_parametersAll other args and kwargs are forwarded to plot.\n\n\n\nReturns:\n\nlinesLine2DThe drawn triangles edges.\n\nmarkersLine2DThe drawn marker nodes.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.tricontour",
    "class": {
        "class method": [
            {
                "method name": "Axes.tricontour(*args, **kwargs)",
                "method text": "Draw contour lines on an unstructured triangular grid.\nCall signatures:\ntricontour(triangulation, z, [levels], ...)\ntricontour(x, y, z, [levels], *, [triangles=triangles], [mask=mask], ...)\n\n\nThe triangular grid can be specified either by passing a Triangulation\nobject as the first parameter, or by passing the points x, y and\noptionally the triangles and a mask. See Triangulation for an\nexplanation of these parameters. If neither of triangulation or\ntriangles are given, the triangulation is calculated on the fly.\nIt is possible to pass triangles positionally, i.e.\ntricontour(x, y, triangles, z, ...). However, this is discouraged. For more\nclarity, pass triangles via keyword argument.\n\nParameters:\n\ntriangulationTriangulation, optionalAn already created triangular grid.\n\nx, y, triangles, maskParameters defining the triangular grid. See Triangulation.\nThis is mutually exclusive with specifying triangulation.\n\nzarray-likeThe height values over which the contour is drawn. Color-mapping is\ncontrolled by cmap, norm, vmin, and vmax.\n\nNote\nAll values in z must be finite. Hence, nan and inf values must\neither be removed or set_mask be used.\n\n\nlevelsint or array-like, optionalDetermines the number and positions of the contour lines / regions.\nIf an int n, use MaxNLocator, which tries to\nautomatically choose no more than n+1 \"nice\" contour levels between\nbetween minimum and maximum numeric values of Z.\nIf array-like, draw contour lines at the specified levels. The values must\nbe in increasing order.\n\n\n\nReturns:\n\nTriContourSet\n\n\nOther Parameters:\n\ncolorscolor string or sequence of colors, optionalThe colors of the levels, i.e., the contour lines.\nThe sequence is cycled for the levels in ascending order. If the sequence\nis shorter than the number of levels, it is repeated.\nAs a shortcut, single color strings may be used in place of one-element\nlists, i.e. 'red' instead of ['red'] to color all levels with the\nsame color. This shortcut does only work for color strings, not for other\nways of specifying colors.\nBy default (value None), the colormap specified by cmap will be used.\n\nalphafloat, default: 1The alpha blending value, between 0 (transparent) and 1 (opaque).\n\ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')The Colormap instance or registered colormap name used to map scalar data\nto colors.\nThis parameter is ignored if colors is set.\n\nnormstr or Normalize, optionalThe normalization method used to scale scalar data to the [0, 1] range\nbefore mapping to colors using cmap. By default, a linear scaling is\nused, mapping the lowest value to 0 and the highest to 1.\nIf given, this can be one of the following:\n\nAn instance of Normalize or one of its subclasses\n(see Colormap Normalization).\nA scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc. For a\nlist of available scales, call matplotlib.scale.get_scale_names().\nIn that case, a suitable Normalize subclass is dynamically generated\nand instantiated.\n\nThis parameter is ignored if colors is set.\n\nvmin, vmaxfloat, optionalWhen using scalar data and no explicit norm, vmin and vmax define\nthe data range that the colormap covers. By default, the colormap covers\nthe complete value range of the supplied data. It is an error to use\nvmin/vmax when a norm instance is given (but using a str norm\nname together with vmin/vmax is acceptable).\nIf vmin or vmax are not given, the default color scaling is based on\nlevels.\nThis parameter is ignored if colors is set.\n\norigin{None, 'upper', 'lower', 'image'}, default: NoneDetermines the orientation and exact position of z by specifying the\nposition of z[0, 0]. This is only relevant, if X, Y are not given.\n\nNone: z[0, 0] is at X=0, Y=0 in the lower left corner.\n'lower': z[0, 0] is at X=0.5, Y=0.5 in the lower left corner.\n'upper': z[0, 0] is at X=N+0.5, Y=0.5 in the upper left corner.\n'image': Use the value from rcParams[\"image.origin\"] (default: 'upper').\n\n\nextent(x0, x1, y0, y1), optionalIf origin is not None, then extent is interpreted as in imshow: it\ngives the outer pixel boundaries. In this case, the position of z[0, 0] is\nthe center of the pixel, not a corner. If origin is None, then\n(x0, y0) is the position of z[0, 0], and (x1, y1) is the position\nof z[-1, -1].\nThis argument is ignored if X and Y are specified in the call to\ncontour.\n\nlocatorticker.Locator subclass, optionalThe locator is used to determine the contour levels if they are not given\nexplicitly via levels.\nDefaults to MaxNLocator.\n\nextend{'neither', 'both', 'min', 'max'}, default: 'neither'Determines the tricontour-coloring of values that are outside the\nlevels range.\nIf 'neither', values outside the levels range are not colored. If 'min',\n'max' or 'both', color the values below, above or below and above the\nlevels range.\nValues below min(levels) and above max(levels) are mapped to the\nunder/over values of the Colormap. Note that most colormaps do not have\ndedicated colors for these by default, so that the over and under values\nare the edge values of the colormap. You may want to set these values\nexplicitly using Colormap.set_under and Colormap.set_over.\n\nNote\nAn existing TriContourSet does not get notified if properties of its\ncolormap are changed. Therefore, an explicit call to\nContourSet.changed() is needed after modifying the colormap. The\nexplicit call can be left out, if a colorbar is assigned to the\nTriContourSet because it internally calls ContourSet.changed().\n\n\nxunits, yunitsregistered units, optionalOverride axis units by specifying an instance of a\nmatplotlib.units.ConversionInterface.\n\nantialiasedbool, optionalEnable antialiasing, overriding the defaults. For\nfilled contours, the default is True. For line contours,\nit is taken from rcParams[\"lines.antialiased\"] (default: True).\n\nlinewidthsfloat or array-like, default: rcParams[\"contour.linewidth\"] (default: None)The line width of the contour lines.\nIf a number, all levels will be plotted with this linewidth.\nIf a sequence, the levels in ascending order will be plotted with\nthe linewidths in the order specified.\nIf None, this falls back to rcParams[\"lines.linewidth\"] (default: 1.5).\n\nlinestyles{None, 'solid', 'dashed', 'dashdot', 'dotted'}, optionalIf linestyles is None, the default is 'solid' unless the lines are\nmonochrome. In that case, negative contours will take their linestyle\nfrom rcParams[\"contour.negative_linestyle\"] (default: 'dashed') setting.\nlinestyles can also be an iterable of the above strings specifying a\nset of linestyles to be used. If this iterable is shorter than the\nnumber of contour levels it will be repeated as necessary.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.tricontourf",
    "class": {
        "class method": [
            {
                "method name": "Axes.tricontourf(*args, **kwargs)",
                "method text": "Draw contour regions on an unstructured triangular grid.\nCall signatures:\ntricontourf(triangulation, z, [levels], ...)\ntricontourf(x, y, z, [levels], *, [triangles=triangles], [mask=mask], ...)\n\n\nThe triangular grid can be specified either by passing a Triangulation\nobject as the first parameter, or by passing the points x, y and\noptionally the triangles and a mask. See Triangulation for an\nexplanation of these parameters. If neither of triangulation or\ntriangles are given, the triangulation is calculated on the fly.\nIt is possible to pass triangles positionally, i.e.\ntricontourf(x, y, triangles, z, ...). However, this is discouraged. For more\nclarity, pass triangles via keyword argument.\n\nParameters:\n\ntriangulationTriangulation, optionalAn already created triangular grid.\n\nx, y, triangles, maskParameters defining the triangular grid. See Triangulation.\nThis is mutually exclusive with specifying triangulation.\n\nzarray-likeThe height values over which the contour is drawn. Color-mapping is\ncontrolled by cmap, norm, vmin, and vmax.\n\nNote\nAll values in z must be finite. Hence, nan and inf values must\neither be removed or set_mask be used.\n\n\nlevelsint or array-like, optionalDetermines the number and positions of the contour lines / regions.\nIf an int n, use MaxNLocator, which tries to\nautomatically choose no more than n+1 \"nice\" contour levels between\nbetween minimum and maximum numeric values of Z.\nIf array-like, draw contour lines at the specified levels. The values must\nbe in increasing order.\n\n\n\nReturns:\n\nTriContourSet\n\n\nOther Parameters:\n\ncolorscolor string or sequence of colors, optionalThe colors of the levels, i.e., the contour regions.\nThe sequence is cycled for the levels in ascending order. If the sequence\nis shorter than the number of levels, it is repeated.\nAs a shortcut, single color strings may be used in place of one-element\nlists, i.e. 'red' instead of ['red'] to color all levels with the\nsame color. This shortcut does only work for color strings, not for other\nways of specifying colors.\nBy default (value None), the colormap specified by cmap will be used.\n\nalphafloat, default: 1The alpha blending value, between 0 (transparent) and 1 (opaque).\n\ncmapstr or Colormap, default: rcParams[\"image.cmap\"] (default: 'viridis')The Colormap instance or registered colormap name used to map scalar data\nto colors.\nThis parameter is ignored if colors is set.\n\nnormstr or Normalize, optionalThe normalization method used to scale scalar data to the [0, 1] range\nbefore mapping to colors using cmap. By default, a linear scaling is\nused, mapping the lowest value to 0 and the highest to 1.\nIf given, this can be one of the following:\n\nAn instance of Normalize or one of its subclasses\n(see Colormap Normalization).\nA scale name, i.e. one of \"linear\", \"log\", \"symlog\", \"logit\", etc. For a\nlist of available scales, call matplotlib.scale.get_scale_names().\nIn that case, a suitable Normalize subclass is dynamically generated\nand instantiated.\n\nThis parameter is ignored if colors is set.\n\nvmin, vmaxfloat, optionalWhen using scalar data and no explicit norm, vmin and vmax define\nthe data range that the colormap covers. By default, the colormap covers\nthe complete value range of the supplied data. It is an error to use\nvmin/vmax when a norm instance is given (but using a str norm\nname together with vmin/vmax is acceptable).\nIf vmin or vmax are not given, the default color scaling is based on\nlevels.\nThis parameter is ignored if colors is set.\n\norigin{None, 'upper', 'lower', 'image'}, default: NoneDetermines the orientation and exact position of z by specifying the\nposition of z[0, 0]. This is only relevant, if X, Y are not given.\n\nNone: z[0, 0] is at X=0, Y=0 in the lower left corner.\n'lower': z[0, 0] is at X=0.5, Y=0.5 in the lower left corner.\n'upper': z[0, 0] is at X=N+0.5, Y=0.5 in the upper left corner.\n'image': Use the value from rcParams[\"image.origin\"] (default: 'upper').\n\n\nextent(x0, x1, y0, y1), optionalIf origin is not None, then extent is interpreted as in imshow: it\ngives the outer pixel boundaries. In this case, the position of z[0, 0] is\nthe center of the pixel, not a corner. If origin is None, then\n(x0, y0) is the position of z[0, 0], and (x1, y1) is the position\nof z[-1, -1].\nThis argument is ignored if X and Y are specified in the call to\ncontour.\n\nlocatorticker.Locator subclass, optionalThe locator is used to determine the contour levels if they are not given\nexplicitly via levels.\nDefaults to MaxNLocator.\n\nextend{'neither', 'both', 'min', 'max'}, default: 'neither'Determines the tricontourf-coloring of values that are outside the\nlevels range.\nIf 'neither', values outside the levels range are not colored. If 'min',\n'max' or 'both', color the values below, above or below and above the\nlevels range.\nValues below min(levels) and above max(levels) are mapped to the\nunder/over values of the Colormap. Note that most colormaps do not have\ndedicated colors for these by default, so that the over and under values\nare the edge values of the colormap. You may want to set these values\nexplicitly using Colormap.set_under and Colormap.set_over.\n\nNote\nAn existing TriContourSet does not get notified if properties of its\ncolormap are changed. Therefore, an explicit call to\nContourSet.changed() is needed after modifying the colormap. The\nexplicit call can be left out, if a colorbar is assigned to the\nTriContourSet because it internally calls ContourSet.changed().\n\n\nxunits, yunitsregistered units, optionalOverride axis units by specifying an instance of a\nmatplotlib.units.ConversionInterface.\n\nantialiasedbool, optionalEnable antialiasing, overriding the defaults. For\nfilled contours, the default is True. For line contours,\nit is taken from rcParams[\"lines.antialiased\"] (default: True).\n\nhatcheslist[str], optionalA list of crosshatch patterns to use on the filled areas.\nIf None, no hatching will be added to the contour.\nHatching is supported in the PostScript, PDF, SVG and Agg\nbackends only.\n\n\n\n\nNotes\ntricontourf fills intervals that are closed at the top; that is, for\nboundaries z1 and z2, the filled region is:\nz1 < Z <= z2\n\n\nexcept for the lowest interval, which is closed on both sides (i.e. it\nincludes the lowest value).\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.annotate",
    "class": {
        "class method": [
            {
                "method name": "Axes.annotate(text, xy, xytext=None, xycoords='data', textcoords=None, arrowprops=None, annotation_clip=None, **kwargs)",
                "method text": "Annotate the point xy with text text.\nIn the simplest form, the text is placed at xy.\nOptionally, the text can be displayed in another position xytext.\nAn arrow pointing from the text to the annotated point xy can then\nbe added by defining arrowprops.\n\nParameters:\n\ntextstrThe text of the annotation.\n\nxy(float, float)The point (x, y) to annotate. The coordinate system is determined\nby xycoords.\n\nxytext(float, float), default: xyThe position (x, y) to place the text at. The coordinate system\nis determined by textcoords.\n\nxycoordssingle or two-tuple of str or Artist or Transform or callable, default: 'data'The coordinate system that xy is given in. The following types\nof values are supported:\n\nOne of the following strings:\n\n\nValue\nDescription\n\n\n\n'figure points'\nPoints from the lower left of the figure\n\n'figure pixels'\nPixels from the lower left of the figure\n\n'figure fraction'\nFraction of figure from lower left\n\n'subfigure points'\nPoints from the lower left of the subfigure\n\n'subfigure pixels'\nPixels from the lower left of the subfigure\n\n'subfigure fraction'\nFraction of subfigure from lower left\n\n'axes points'\nPoints from lower left corner of axes\n\n'axes pixels'\nPixels from lower left corner of axes\n\n'axes fraction'\nFraction of axes from lower left\n\n'data'\nUse the coordinate system of the object\nbeing annotated (default)\n\n'polar'\n(theta, r) if not native 'data'\ncoordinates\n\n\n\nNote that 'subfigure pixels' and 'figure pixels' are the same\nfor the parent figure, so users who want code that is usable in\na subfigure can use 'subfigure pixels'.\n\nAn Artist: xy is interpreted as a fraction of the artist's\nBbox. E.g. (0, 0) would be the lower\nleft corner of the bounding box and (0.5, 1) would be the\ncenter top of the bounding box.\nA Transform to transform xy to screen coordinates.\nA function with one of the following signatures:\ndef transform(renderer) -> Bbox\ndef transform(renderer) -> Transform\n\n\nwhere renderer is a RendererBase subclass.\nThe result of the function is interpreted like the Artist and\nTransform cases above.\n\nA tuple (xcoords, ycoords) specifying separate coordinate\nsystems for x and y. xcoords and ycoords must each be\nof one of the above described types.\n\nSee Advanced annotation for more details.\n\ntextcoordssingle or two-tuple of str or Artist or Transform or callable, default: value of xycoordsThe coordinate system that xytext is given in.\nAll xycoords values are valid as well as the following strings:\n\n\nValue\nDescription\n\n\n\n'offset points'\nOffset, in points, from the xy value\n\n'offset pixels'\nOffset, in pixels, from the xy value\n\n'offset fontsize'\nOffset, relative to fontsize, from the xy value\n\n\n\n\narrowpropsdict, optionalThe properties used to draw a FancyArrowPatch arrow between the\npositions xy and xytext. Defaults to None, i.e. no arrow is\ndrawn.\nFor historical reasons there are two different ways to specify\narrows, \"simple\" and \"fancy\":\nSimple arrow:\nIf arrowprops does not contain the key 'arrowstyle' the\nallowed keys are:\n\n\nKey\nDescription\n\n\n\nwidth\nThe width of the arrow in points\n\nheadwidth\nThe width of the base of the arrow head in points\n\nheadlength\nThe length of the arrow head in points\n\nshrink\nFraction of total length to shrink from both ends\n\n?\nAny FancyArrowPatch property\n\n\n\nThe arrow is attached to the edge of the text box, the exact\nposition (corners or centers) depending on where it's pointing to.\nFancy arrow:\nThis is used if 'arrowstyle' is provided in the arrowprops.\nValid keys are the following FancyArrowPatch parameters:\n\n\nKey\nDescription\n\n\n\narrowstyle\nThe arrow style\n\nconnectionstyle\nThe connection style\n\nrelpos\nSee below; default is (0.5, 0.5)\n\npatchA\nDefault is bounding box of the text\n\npatchB\nDefault is None\n\nshrinkA\nDefault is 2 points\n\nshrinkB\nDefault is 2 points\n\nmutation_scale\nDefault is text size (in points)\n\nmutation_aspect\nDefault is 1\n\n?\nAny FancyArrowPatch property\n\n\n\nThe exact starting point position of the arrow is defined by\nrelpos. It's a tuple of relative coordinates of the text box,\nwhere (0, 0) is the lower left corner and (1, 1) is the upper\nright corner. Values <0 and >1 are supported and specify points\noutside the text box. By default (0.5, 0.5), so the starting point\nis centered in the text box.\n\nannotation_clipbool or None, default: NoneWhether to clip (i.e. not draw) the annotation when the annotation\npoint xy is outside the axes area.\n\nIf True, the annotation will be clipped when xy is outside\nthe axes.\nIf False, the annotation will always be drawn.\nIf None, the annotation will be clipped when xy is outside\nthe axes and xycoords is 'data'.\n\n\n**kwargsAdditional kwargs are passed to Text.\n\n\n\nReturns:\n\nAnnotation\n\n\n\n\nSee also\n\nAdvanced annotation\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.text",
    "class": {
        "class method": [
            {
                "method name": "Axes.text(x, y, s, fontdict=None, **kwargs)",
                "method text": "Add text to the Axes.\nAdd the text s to the Axes at location x, y in data coordinates.\n\nParameters:\n\nx, yfloatThe position to place the text. By default, this is in data\ncoordinates. The coordinate system can be changed using the\ntransform parameter.\n\nsstrThe text.\n\nfontdictdict, default: None\nDiscouraged\nThe use of fontdict is discouraged. Parameters should be passed as\nindividual keyword arguments or using dictionary-unpacking\ntext(..., **fontdict).\n\nA dictionary to override the default text properties. If fontdict\nis None, the defaults are determined by rcParams.\n\n\n\nReturns:\n\nTextThe created Text instance.\n\n\n\nOther Parameters:\n\n**kwargsText properties.Other miscellaneous text parameters.\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased\nbool\n\nbackgroundcolor\ncolor\n\nbbox\ndict with properties for patches.FancyBboxPatch\n\nclip_box\nunknown\n\nclip_on\nunknown\n\nclip_path\nunknown\n\ncolor or c\ncolor\n\nfigure\nFigure\n\nfontfamily or family or fontname\n{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}\n\nfontproperties or font or font_properties\nfont_manager.FontProperties or str or pathlib.Path\n\nfontsize or size\nfloat or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}\n\nfontstretch or stretch\n{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}\n\nfontstyle or style\n{'normal', 'italic', 'oblique'}\n\nfontvariant or variant\n{'normal', 'small-caps'}\n\nfontweight or weight\n{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}\n\ngid\nstr\n\nhorizontalalignment or ha\n{'left', 'center', 'right'}\n\nin_layout\nbool\n\nlabel\nobject\n\nlinespacing\nfloat (multiple of font size)\n\nmath_fontfamily\nstr\n\nmouseover\nbool\n\nmultialignment or ma\n{'left', 'right', 'center'}\n\nparse_math\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nNone or bool or float or callable\n\nposition\n(float, float)\n\nrasterized\nbool\n\nrotation\nfloat or {'vertical', 'horizontal'}\n\nrotation_mode\n{None, 'default', 'anchor'}\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntext\nobject\n\ntransform\nTransform\n\ntransform_rotates_text\nbool\n\nurl\nstr\n\nusetex\nbool or None\n\nverticalalignment or va\n{'bottom', 'baseline', 'center', 'center_baseline', 'top'}\n\nvisible\nbool\n\nwrap\nbool\n\nx\nfloat\n\ny\nfloat\n\nzorder\nfloat\n\n\n\n\n\n\n\nExamples\nIndividual keyword arguments can be used to override any given\nparameter:\n>>> text(x, y, s, fontsize=12)\n\n\nThe default transform specifies that text is in data coords,\nalternatively, you can specify text in axis coords ((0, 0) is\nlower-left and (1, 1) is upper-right). The example below places\ntext in the center of the Axes:\n>>> text(0.5, 0.5, 'matplotlib', horizontalalignment='center',\n...      verticalalignment='center', transform=ax.transAxes)\n\n\nYou can put a rectangular box around the text instance (e.g., to\nset a background color) by using the keyword bbox. bbox is\na dictionary of Rectangle\nproperties. For example:\n>>> text(x, y, s, bbox=dict(facecolor='red', alpha=0.5))\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.table",
    "class": {
        "class method": [
            {
                "method name": "Axes.table(cellText=None, cellColours=None, cellLoc='right', colWidths=None, rowLabels=None, rowColours=None, rowLoc='left', colLabels=None, colColours=None, colLoc='center', loc='bottom', bbox=None, edges='closed', **kwargs)",
                "method text": "Add a table to an Axes.\nAt least one of cellText or cellColours must be specified. These\nparameters must be 2D lists, in which the outer lists define the rows and\nthe inner list define the column values per row. Each row must have the\nsame number of elements.\nThe table can optionally have row and column headers, which are configured\nusing rowLabels, rowColours, rowLoc and colLabels, colColours,\ncolLoc respectively.\nFor finer grained control over tables, use the Table class and add it to\nthe axes with Axes.add_table.\n\nParameters:\n\ncellText2D list of str, optionalThe texts to place into the table cells.\nNote: Line breaks in the strings are currently not accounted for and\nwill result in the text exceeding the cell boundaries.\n\ncellColours2D list of colors, optionalThe background colors of the cells.\n\ncellLoc{'left', 'center', 'right'}, default: 'right'The alignment of the text within the cells.\n\ncolWidthslist of float, optionalThe column widths in units of the axes. If not given, all columns will\nhave a width of 1 / ncols.\n\nrowLabelslist of str, optionalThe text of the row header cells.\n\nrowColourslist of colors, optionalThe colors of the row header cells.\n\nrowLoc{'left', 'center', 'right'}, default: 'left'The text alignment of the row header cells.\n\ncolLabelslist of str, optionalThe text of the column header cells.\n\ncolColourslist of colors, optionalThe colors of the column header cells.\n\ncolLoc{'left', 'center', 'right'}, default: 'left'The text alignment of the column header cells.\n\nlocstr, optionalThe position of the cell with respect to ax. This must be one of\nthe codes.\n\nbboxBbox or [xmin, ymin, width, height], optionalA bounding box to draw the table into. If this is not None, this\noverrides loc.\n\nedgessubstring of 'BRTL' or {'open', 'closed', 'horizontal', 'vertical'}The cell edges to be drawn with a line. See also\nvisible_edges.\n\n\n\nReturns:\n\nTableThe created table.\n\n\n\nOther Parameters:\n\n**kwargsTable properties.\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\nfigure\nFigure\n\nfontsize\nfloat\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nNone or bool or float or callable\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nvisible\nbool\n\nzorder\nfloat\n\n\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.arrow",
    "class": {
        "class method": [
            {
                "method name": "Axes.arrow(x, y, dx, dy, **kwargs)",
                "method text": "Add an arrow to the Axes.\nThis draws an arrow from (x, y) to (x+dx, y+dy).\n\nParameters:\n\nx, yfloatThe x and y coordinates of the arrow base.\n\ndx, dyfloatThe length of the arrow along x and y direction.\n\nwidthfloat, default: 0.001Width of full arrow tail.\n\nlength_includes_headbool, default: FalseTrue if head is to be counted in calculating the length.\n\nhead_widthfloat or None, default: 3*widthTotal width of the full arrow head.\n\nhead_lengthfloat or None, default: 1.5*head_widthLength of arrow head.\n\nshape{'full', 'left', 'right'}, default: 'full'Draw the left-half, right-half, or full arrow.\n\noverhangfloat, default: 0Fraction that the arrow is swept back (0 overhang means\ntriangular shape). Can be negative or greater than one.\n\nhead_starts_at_zerobool, default: FalseIf True, the head starts being drawn at coordinate 0\ninstead of ending at coordinate 0.\n\n**kwargsPatch properties:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nunknown\n\nanimated\nbool\n\nantialiased or aa\nbool or None\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor\ncolor\n\nedgecolor or ec\ncolor or None\n\nfacecolor or fc\ncolor or None\n\nfigure\nFigure\n\nfill\nbool\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat or None\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nNone or bool or float or callable\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nvisible\nbool\n\nzorder\nfloat\n\n\n\n\n\n\nReturns:\n\nFancyArrowThe created FancyArrow object.\n\n\n\n\nNotes\nThe resulting arrow is affected by the Axes aspect ratio and limits.\nThis may produce an arrow whose head is not square with its stem. To\ncreate an arrow whose head is square with its stem,\nuse annotate() for example:\n>>> ax.annotate(\"\", xy=(0.5, 0.5), xytext=(0, 0),\n...             arrowprops=dict(arrowstyle=\"->\"))\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.inset_axes",
    "class": {
        "class method": [
            {
                "method name": "Axes.inset_axes(bounds, *, transform=None, zorder=5, **kwargs)",
                "method text": "Add a child inset Axes to this existing Axes.\n\nParameters:\n\nbounds[x0, y0, width, height]Lower-left corner of inset Axes, and its width and height.\n\ntransformTransformDefaults to ax.transAxes, i.e. the units of rect are in\nAxes-relative coordinates.\n\nprojection{None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar', 'rectilinear', str}, optionalThe projection type of the inset Axes. str is the name\nof a custom projection, see projections. The default\nNone results in a 'rectilinear' projection.\n\npolarbool, default: FalseIf True, equivalent to projection='polar'.\n\naxes_classsubclass type of Axes, optionalThe axes.Axes subclass that is instantiated. This parameter\nis incompatible with projection and polar. See\naxisartist for examples.\n\nzordernumberDefaults to 5 (same as Axes.legend). Adjust higher or lower\nto change whether it is above or below data plotted on the\nparent Axes.\n\n**kwargsOther keyword arguments are passed on to the inset Axes class.\n\n\n\nReturns:\n\naxThe created Axes instance.\n\n\n\n\n\nWarning\nThis method is experimental as of 3.0, and the API may change.\n\nExamples\nThis example makes two inset Axes, the first is in Axes-relative\ncoordinates, and the second in data-coordinates:\nfig, ax = plt.subplots()\nax.plot(range(10))\naxin1 = ax.inset_axes([0.8, 0.1, 0.15, 0.15])\naxin2 = ax.inset_axes(\n        [5, 7, 2.3, 2.3], transform=ax.transData)\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.indicate_inset",
    "class": {
        "class method": [
            {
                "method name": "Axes.indicate_inset(bounds, inset_ax=None, *, transform=None, facecolor='none', edgecolor='0.5', alpha=0.5, zorder=4.99, **kwargs)",
                "method text": "Add an inset indicator to the Axes. This is a rectangle on the plot\nat the position indicated by bounds that optionally has lines that\nconnect the rectangle to an inset Axes (Axes.inset_axes).\n\nParameters:\n\nbounds[x0, y0, width, height]Lower-left corner of rectangle to be marked, and its width\nand height.\n\ninset_axAxesAn optional inset Axes to draw connecting lines to. Two lines are\ndrawn connecting the indicator box to the inset Axes on corners\nchosen so as to not overlap with the indicator box.\n\ntransformTransformTransform for the rectangle coordinates. Defaults to\nax.transAxes, i.e. the units of rect are in Axes-relative\ncoordinates.\n\nfacecolorcolor, default: 'none'Facecolor of the rectangle.\n\nedgecolorcolor, default: '0.5'Color of the rectangle and color of the connecting lines.\n\nalphafloat, default: 0.5Transparency of the rectangle and connector lines.\n\nzorderfloat, default: 4.99Drawing order of the rectangle and connector lines. The default,\n4.99, is just below the default level of inset Axes.\n\n**kwargsOther keyword arguments are passed on to the Rectangle patch:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nangle\nunknown\n\nanimated\nbool\n\nantialiased or aa\nbool or None\n\nbounds\n(left, bottom, width, height)\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor\ncolor\n\nedgecolor or ec\ncolor or None\n\nfacecolor or fc\ncolor or None\n\nfigure\nFigure\n\nfill\nbool\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nheight\nunknown\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat or None\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nNone or bool or float or callable\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nvisible\nbool\n\nwidth\nunknown\n\nx\nunknown\n\nxy\n(float, float)\n\ny\nunknown\n\nzorder\nfloat\n\n\n\n\n\n\nReturns:\n\nrectangle_patchpatches.RectangleThe indicator frame.\n\nconnector_lines4-tuple of patches.ConnectionPatchThe four connector lines connecting to (lower_left, upper_left,\nlower_right upper_right) corners of inset_ax. Two lines are\nset with visibility to False, but the user can set the\nvisibility to True if the automatic choice is not deemed correct.\n\n\n\n\n\nWarning\nThis method is experimental as of 3.0, and the API may change.\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.indicate_inset_zoom",
    "class": {
        "class method": [
            {
                "method name": "Axes.indicate_inset_zoom(inset_ax, **kwargs)",
                "method text": "Add an inset indicator rectangle to the Axes based on the axis\nlimits for an inset_ax and draw connectors between inset_ax\nand the rectangle.\n\nParameters:\n\ninset_axAxesInset Axes to draw connecting lines to. Two lines are\ndrawn connecting the indicator box to the inset Axes on corners\nchosen so as to not overlap with the indicator box.\n\n**kwargsOther keyword arguments are passed on to Axes.indicate_inset\n\n\n\nReturns:\n\nrectangle_patchpatches.RectangleRectangle artist.\n\nconnector_lines4-tuple of patches.ConnectionPatchEach of four connector lines coming from the rectangle drawn on\nthis axis, in the order lower left, upper left, lower right,\nupper right.\nTwo are set with visibility to False, but the user can\nset the visibility to True if the automatic choice is not deemed\ncorrect.\n\n\n\n\n\nWarning\nThis method is experimental as of 3.0, and the API may change.\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.secondary_xaxis",
    "class": {
        "class method": [
            {
                "method name": "Axes.secondary_xaxis(location, *, functions=None, **kwargs)",
                "method text": "Add a second x-axis to this Axes.\nFor example if we want to have a second scale for the data plotted on\nthe xaxis.\n\nParameters:\n\nlocation{'top', 'bottom', 'left', 'right'} or floatThe position to put the secondary axis. Strings can be 'top' or\n'bottom' for orientation='x' and 'right' or 'left' for\norientation='y'. A float indicates the relative position on the\nparent axes to put the new axes, 0.0 being the bottom (or left)\nand 1.0 being the top (or right).\n\nfunctions2-tuple of func, or Transform with an inverseIf a 2-tuple of functions, the user specifies the transform\nfunction and its inverse. i.e.\nfunctions=(lambda x: 2 / x, lambda x: 2 / x) would be an\nreciprocal transform with a factor of 2. Both functions must accept\nnumpy arrays as input.\nThe user can also directly supply a subclass of\ntransforms.Transform so long as it has an inverse.\nSee Secondary Axis\nfor examples of making these conversions.\n\n\n\nReturns:\n\naxaxes._secondary_axes.SecondaryAxis\n\n\nOther Parameters:\n\n**kwargsAxes properties.Other miscellaneous axes parameters.\n\n\n\n\n\nWarning\nThis method is experimental as of 3.1, and the API may change.\n\nExamples\nThe main axis shows frequency, and the secondary axis shows period.\n(Source code, 2x.png, png)\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.secondary_yaxis",
    "class": {
        "class method": [
            {
                "method name": "Axes.secondary_yaxis(location, *, functions=None, **kwargs)",
                "method text": "Add a second y-axis to this Axes.\nFor example if we want to have a second scale for the data plotted on\nthe yaxis.\n\nParameters:\n\nlocation{'top', 'bottom', 'left', 'right'} or floatThe position to put the secondary axis. Strings can be 'top' or\n'bottom' for orientation='x' and 'right' or 'left' for\norientation='y'. A float indicates the relative position on the\nparent axes to put the new axes, 0.0 being the bottom (or left)\nand 1.0 being the top (or right).\n\nfunctions2-tuple of func, or Transform with an inverseIf a 2-tuple of functions, the user specifies the transform\nfunction and its inverse. i.e.\nfunctions=(lambda x: 2 / x, lambda x: 2 / x) would be an\nreciprocal transform with a factor of 2. Both functions must accept\nnumpy arrays as input.\nThe user can also directly supply a subclass of\ntransforms.Transform so long as it has an inverse.\nSee Secondary Axis\nfor examples of making these conversions.\n\n\n\nReturns:\n\naxaxes._secondary_axes.SecondaryAxis\n\n\nOther Parameters:\n\n**kwargsAxes properties.Other miscellaneous axes parameters.\n\n\n\n\n\nWarning\nThis method is experimental as of 3.1, and the API may change.\n\nExamples\nAdd a secondary Axes that converts from radians to degrees\n(Source code, 2x.png, png)\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.barbs",
    "class": {
        "class method": [
            {
                "method name": "Axes.barbs(*args, data=None, **kwargs)",
                "method text": "Plot a 2D field of barbs.\nCall signature:\nbarbs([X, Y], U, V, [C], **kwargs)\n\n\nWhere X, Y define the barb locations, U, V define the barb\ndirections, and C optionally sets the color.\nAll arguments may be 1D or 2D. U, V, C may be masked arrays, but masked\nX, Y are not supported at present.\nBarbs are traditionally used in meteorology as a way to plot the speed\nand direction of wind observations, but can technically be used to\nplot any two dimensional vector quantity. As opposed to arrows, which\ngive vector magnitude by the length of the arrow, the barbs give more\nquantitative information about the vector magnitude by putting slanted\nlines or a triangle for various increments in magnitude, as show\nschematically below:\n:                   /\\    \\\n:                  /  \\    \\\n:                 /    \\    \\    \\\n:                /      \\    \\    \\\n:               ------------------------------\n\n\nThe largest increment is given by a triangle (or \"flag\"). After those\ncome full lines (barbs). The smallest increment is a half line. There\nis only, of course, ever at most 1 half line. If the magnitude is\nsmall and only needs a single half-line and no full lines or\ntriangles, the half-line is offset from the end of the barb so that it\ncan be easily distinguished from barbs with a single full line. The\nmagnitude for the barb shown above would nominally be 65, using the\nstandard increments of 50, 10, and 5.\nSee also https://en.wikipedia.org/wiki/Wind_barb.\n\nParameters:\n\nX, Y1D or 2D array-like, optionalThe x and y coordinates of the barb locations. See pivot for how the\nbarbs are drawn to the x, y positions.\nIf not given, they will be generated as a uniform integer meshgrid based\non the dimensions of U and V.\nIf X and Y are 1D but U, V are 2D, X, Y are expanded to 2D\nusing X, Y = np.meshgrid(X, Y). In this case len(X) and len(Y)\nmust match the column and row dimensions of U and V.\n\nU, V1D or 2D array-likeThe x and y components of the barb shaft.\n\nC1D or 2D array-like, optionalNumeric data that defines the barb colors by colormapping via norm and\ncmap.\nThis does not support explicit colors. If you want to set colors directly,\nuse barbcolor instead.\n\nlengthfloat, default: 7Length of the barb in points; the other parts of the barb\nare scaled against this.\n\npivot{'tip', 'middle'} or float, default: 'tip'The part of the arrow that is anchored to the X, Y grid. The barb\nrotates about this point. This can also be a number, which shifts the\nstart of the barb that many points away from grid point.\n\nbarbcolorcolor or color sequenceThe color of all parts of the barb except for the flags. This parameter\nis analogous to the edgecolor parameter for polygons, which can be used\ninstead. However this parameter will override facecolor.\n\nflagcolorcolor or color sequenceThe color of any flags on the barb. This parameter is analogous to the\nfacecolor parameter for polygons, which can be used instead. However,\nthis parameter will override facecolor. If this is not set (and C has\nnot either) then flagcolor will be set to match barbcolor so that the\nbarb has a uniform color. If C has been set, flagcolor has no effect.\n\nsizesdict, optionalA dictionary of coefficients specifying the ratio of a given\nfeature to the length of the barb. Only those values one wishes to\noverride need to be included. These features include:\n\n'spacing' - space between features (flags, full/half barbs)\n'height' - height (distance from shaft to top) of a flag or full barb\n'width' - width of a flag, twice the width of a full barb\n'emptybarb' - radius of the circle used for low magnitudes\n\n\nfill_emptybool, default: FalseWhether the empty barbs (circles) that are drawn should be filled with\nthe flag color. If they are not filled, the center is transparent.\n\nroundingbool, default: TrueWhether the vector magnitude should be rounded when allocating barb\ncomponents. If True, the magnitude is rounded to the nearest multiple\nof the half-barb increment. If False, the magnitude is simply truncated\nto the next lowest multiple.\n\nbarb_incrementsdict, optionalA dictionary of increments specifying values to associate with\ndifferent parts of the barb. Only those values one wishes to\noverride need to be included.\n\n'half' - half barbs (Default is 5)\n'full' - full barbs (Default is 10)\n'flag' - flags (default is 50)\n\n\nflip_barbbool or array-like of bool, default: FalseWhether the lines and flags should point opposite to normal.\nNormal behavior is for the barbs and lines to point right (comes from wind\nbarbs having these features point towards low pressure in the Northern\nHemisphere).\nA single value is applied to all barbs. Individual barbs can be flipped by\npassing a bool array of the same size as U and V.\n\n\n\nReturns:\n\nbarbsBarbs\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n**kwargsThe barbs can further be customized using PolyCollection keyword\narguments:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\narray-like or scalar or None\n\nanimated\nbool\n\nantialiased or aa or antialiaseds\nbool or list of bools\n\narray\narray-like or None\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclim\n(vmin: float, vmax: float)\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncmap\nColormap or str or None\n\ncolor\ncolor or list of RGBA tuples\n\nedgecolor or ec or edgecolors\ncolor or list of colors or 'face'\n\nfacecolor or facecolors or fc\ncolor or list of colors\n\nfigure\nFigure\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or dashes or linestyles or ls\nstr or tuple or list thereof\n\nlinewidth or linewidths or lw\nfloat or list of floats\n\nmouseover\nbool\n\nnorm\nNormalize or str or None\n\noffset_transform or transOffset\nTransform\n\noffsets\n(N, 2) or (2,) array-like\n\npath_effects\nlist of AbstractPathEffect\n\npaths\nlist of array-like\n\npicker\nNone or bool or float or callable\n\npickradius\nfloat\n\nrasterized\nbool\n\nsizes\nnumpy.ndarray or None\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nurls\nlist of str or None\n\nverts\nlist of array-like\n\nverts_and_codes\nunknown\n\nvisible\nbool\n\nzorder\nfloat\n\n\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.quiver",
    "class": {
        "class method": [
            {
                "method name": "Axes.quiver(*args, data=None, **kwargs)",
                "method text": "Plot a 2D field of arrows.\nCall signature:\nquiver([X, Y], U, V, [C], **kwargs)\n\n\nX, Y define the arrow locations, U, V define the arrow directions, and\nC optionally sets the color.\nArrow length\nThe default settings auto-scales the length of the arrows to a reasonable size.\nTo change this behavior see the scale and scale_units parameters.\nArrow shape\nThe arrow shape is determined by width, headwidth, headlength and\nheadaxislength. See the notes below.\nArrow styling\nEach arrow is internally represented by a filled polygon with a default edge\nlinewidth of 0. As a result, an arrow is rather a filled area, not a line with\na head, and PolyCollection properties like linewidth, edgecolor,\nfacecolor, etc. act accordingly.\n\nParameters:\n\nX, Y1D or 2D array-like, optionalThe x and y coordinates of the arrow locations.\nIf not given, they will be generated as a uniform integer meshgrid based\non the dimensions of U and V.\nIf X and Y are 1D but U, V are 2D, X, Y are expanded to 2D\nusing X, Y = np.meshgrid(X, Y). In this case len(X) and len(Y)\nmust match the column and row dimensions of U and V.\n\nU, V1D or 2D array-likeThe x and y direction components of the arrow vectors. The interpretation\nof these components (in data or in screen space) depends on angles.\nU and V must have the same number of elements, matching the number of\narrow locations in X, Y. U and V may be masked. Locations masked\nin any of U, V, and C will not be drawn.\n\nC1D or 2D array-like, optionalNumeric data that defines the arrow colors by colormapping via norm and\ncmap.\nThis does not support explicit colors. If you want to set colors directly,\nuse color instead. The size of C must match the number of arrow\nlocations.\n\nangles{'uv', 'xy'} or array-like, default: 'uv'Method for determining the angle of the arrows.\n\n'uv': Arrow direction in screen coordinates. Use this if the arrows\nsymbolize a quantity that is not based on X, Y data coordinates.\nIf U == V the orientation of the arrow on the plot is 45 degrees\ncounter-clockwise from the horizontal axis (positive to the right).\n\n'xy': Arrow direction in data coordinates, i.e. the arrows point from\n(x, y) to (x+u, y+v). Use this e.g. for plotting a gradient field.\nArbitrary angles may be specified explicitly as an array of values\nin degrees, counter-clockwise from the horizontal axis.\nIn this case U, V is only used to determine the length of the\narrows.\n\n\nNote: inverting a data axis will correspondingly invert the\narrows only with angles='xy'.\n\npivot{'tail', 'mid', 'middle', 'tip'}, default: 'tail'The part of the arrow that is anchored to the X, Y grid. The arrow\nrotates about this point.\n'mid' is a synonym for 'middle'.\n\nscalefloat, optionalScales the length of the arrow inversely.\nNumber of data units per arrow length unit, e.g., m/s per plot width; a\nsmaller scale parameter makes the arrow longer. Default is None.\nIf None, a simple autoscaling algorithm is used, based on the average\nvector length and the number of vectors. The arrow length unit is given by\nthe scale_units parameter.\n\nscale_units{'width', 'height', 'dots', 'inches', 'x', 'y', 'xy'}, optionalIf the scale kwarg is None, the arrow length unit. Default is None.\ne.g. scale_units is 'inches', scale is 2.0, and (u, v) = (1, 0),\nthen the vector will be 0.5 inches long.\nIf scale_units is 'width' or 'height', then the vector will be half the\nwidth/height of the axes.\nIf scale_units is 'x' then the vector will be 0.5 x-axis\nunits. To plot vectors in the x-y plane, with u and v having\nthe same units as x and y, use\nangles='xy', scale_units='xy', scale=1.\n\nunits{'width', 'height', 'dots', 'inches', 'x', 'y', 'xy'}, default: 'width'Affects the arrow size (except for the length). In particular, the shaft\nwidth is measured in multiples of this unit.\nSupported values are:\n\n'width', 'height': The width or height of the Axes.\n'dots', 'inches': Pixels or inches based on the figure dpi.\n'x', 'y', 'xy': X, Y or \\(\\sqrt{X^2 + Y^2}\\) in data units.\n\nThe following table summarizes how these values affect the visible arrow\nsize under zooming and figure size changes:\n\n\nunits\nzoom\nfigure size change\n\n\n\n'x', 'y', 'xy'\narrow size scales\n\u2014\n\n'width', 'height'\n\u2014\narrow size scales\n\n'dots', 'inches'\n\u2014\n\u2014\n\n\n\n\nwidthfloat, optionalShaft width in arrow units. All head parameters are relative to width.\nThe default depends on choice of units above, and number of vectors;\na typical starting value is about 0.005 times the width of the plot.\n\nheadwidthfloat, default: 3Head width as multiple of shaft width. See the notes below.\n\nheadlengthfloat, default: 5Head length as multiple of shaft width. See the notes below.\n\nheadaxislengthfloat, default: 4.5Head length at shaft intersection as multiple of shaft width.\nSee the notes below.\n\nminshaftfloat, default: 1Length below which arrow scales, in units of head length. Do not\nset this to less than 1, or small arrows will look terrible!\n\nminlengthfloat, default: 1Minimum length as a multiple of shaft width; if an arrow length\nis less than this, plot a dot (hexagon) of this diameter instead.\n\ncolorcolor or color sequence, optionalExplicit color(s) for the arrows. If C has been set, color has no\neffect.\nThis is a synonym for the PolyCollection facecolor parameter.\n\n\n\nReturns:\n\nQuiver\n\n\nOther Parameters:\n\ndataindexable object, optionalIf given, all parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception).\n\n**kwargsPolyCollection properties, optionalAll other keyword arguments are passed on to PolyCollection:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\narray-like or scalar or None\n\nanimated\nbool\n\nantialiased or aa or antialiaseds\nbool or list of bools\n\narray\narray-like or None\n\ncapstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nclim\n(vmin: float, vmax: float)\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncmap\nColormap or str or None\n\ncolor\ncolor or list of RGBA tuples\n\nedgecolor or ec or edgecolors\ncolor or list of colors or 'face'\n\nfacecolor or facecolors or fc\ncolor or list of colors\n\nfigure\nFigure\n\ngid\nstr\n\nhatch\n{'/', '\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n\nin_layout\nbool\n\njoinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\nlabel\nobject\n\nlinestyle or dashes or linestyles or ls\nstr or tuple or list thereof\n\nlinewidth or linewidths or lw\nfloat or list of floats\n\nmouseover\nbool\n\nnorm\nNormalize or str or None\n\noffset_transform or transOffset\nTransform\n\noffsets\n(N, 2) or (2,) array-like\n\npath_effects\nlist of AbstractPathEffect\n\npaths\nlist of array-like\n\npicker\nNone or bool or float or callable\n\npickradius\nfloat\n\nrasterized\nbool\n\nsizes\nnumpy.ndarray or None\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\ntransform\nTransform\n\nurl\nstr\n\nurls\nlist of str or None\n\nverts\nlist of array-like\n\nverts_and_codes\nunknown\n\nvisible\nbool\n\nzorder\nfloat\n\n\n\n\n\n\n\n\nSee also\n\nAxes.quiverkeyAdd a key to a quiver plot.\n\n\n\nNotes\nArrow shape\nThe arrow is drawn as a polygon using the nodes as shown below. The values\nheadwidth, headlength, and headaxislength are in units of width.\n\nThe defaults give a slightly swept-back arrow. Here are some guidelines how to\nget other head shapes:\n\nTo make the head a triangle, make headaxislength the same as headlength.\nTo make the arrow more pointed, reduce headwidth or increase headlength\nand headaxislength.\nTo make the head smaller relative to the shaft, scale down all the head\nparameters proportionally.\nTo remove the head completely, set all head parameters to 0.\nTo get a diamond-shaped head, make headaxislength larger than headlength.\nWarning: For headaxislength < (headlength / headwidth), the \"headaxis\"\nnodes (i.e. the ones connecting the head with the shaft) will protrude out\nof the head in forward direction so that the arrow head looks broken.\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.quiverkey",
    "class": {
        "class method": [
            {
                "method name": "Axes.quiverkey(Q, X, Y, U, label, **kwargs)",
                "method text": "Add a key to a quiver plot.\nThe positioning of the key depends on X, Y, coordinates, and\nlabelpos. If labelpos is 'N' or 'S', X, Y give the position of\nthe middle of the key arrow. If labelpos is 'E', X, Y positions\nthe head, and if labelpos is 'W', X, Y positions the tail; in\neither of these two cases, X, Y is somewhere in the middle of the\narrow+label key object.\n\nParameters:\n\nQQuiverA Quiver object as returned by a call to quiver().\n\nX, YfloatThe location of the key.\n\nUfloatThe length of the key.\n\nlabelstrThe key label (e.g., length and units of the key).\n\nanglefloat, default: 0The angle of the key arrow, in degrees anti-clockwise from the\nx-axis.\n\ncoordinates{'axes', 'figure', 'data', 'inches'}, default: 'axes'Coordinate system and units for X, Y: 'axes' and 'figure' are\nnormalized coordinate systems with (0, 0) in the lower left and\n(1, 1) in the upper right; 'data' are the axes data coordinates\n(used for the locations of the vectors in the quiver plot itself);\n'inches' is position in the figure in inches, with (0, 0) at the\nlower left corner.\n\ncolorcolorOverrides face and edge colors from Q.\n\nlabelpos{'N', 'S', 'E', 'W'}Position the label above, below, to the right, to the left of the\narrow, respectively.\n\nlabelsepfloat, default: 0.1Distance in inches between the arrow and the label.\n\nlabelcolorcolor, default: rcParams[\"text.color\"] (default: 'black')Label color.\n\nfontpropertiesdict, optionalA dictionary with keyword arguments accepted by the\nFontProperties initializer:\nfamily, style, variant, size, weight.\n\n**kwargsAny additional keyword arguments are used to override vector\nproperties taken from Q.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.streamplot",
    "class": {
        "class method": [
            {
                "method name": "Axes.streamplot(x, y, u, v, density=1, linewidth=None, color=None, cmap=None, norm=None, arrowsize=1, arrowstyle='-|>', minlength=0.1, transform=None, zorder=None, start_points=None, maxlength=4.0, integration_direction='both', broken_streamlines=True, *, data=None)",
                "method text": "Draw streamlines of a vector flow.\n\nParameters:\n\nx, y1D/2D arraysEvenly spaced strictly increasing arrays to make a grid. If 2D, all\nrows of x must be equal and all columns of y must be equal; i.e.,\nthey must be as if generated by np.meshgrid(x_1d, y_1d).\n\nu, v2D arraysx and y-velocities. The number of rows and columns must match\nthe length of y and x, respectively.\n\ndensityfloat or (float, float)Controls the closeness of streamlines. When density = 1, the domain\nis divided into a 30x30 grid. density linearly scales this grid.\nEach cell in the grid can have, at most, one traversing streamline.\nFor different densities in each direction, use a tuple\n(density_x, density_y).\n\nlinewidthfloat or 2D arrayThe width of the streamlines. With a 2D array the line width can be\nvaried across the grid. The array must have the same shape as u\nand v.\n\ncolorcolor or 2D arrayThe streamline color. If given an array, its values are converted to\ncolors using cmap and norm. The array must have the same shape\nas u and v.\n\ncmap, normData normalization and colormapping parameters for color; only used\nif color is an array of floats. See imshow for a detailed\ndescription.\n\narrowsizefloatScaling factor for the arrow size.\n\narrowstylestrArrow style specification.\nSee FancyArrowPatch.\n\nminlengthfloatMinimum length of streamline in axes coordinates.\n\nstart_points(N, 2) arrayCoordinates of starting points for the streamlines in data coordinates\n(the same coordinates as the x and y arrays).\n\nzorderfloatThe zorder of the streamlines and arrows.\nArtists with lower zorder values are drawn first.\n\nmaxlengthfloatMaximum length of streamline in axes coordinates.\n\nintegration_direction{'forward', 'backward', 'both'}, default: 'both'Integrate the streamline in forward, backward or both directions.\n\ndataindexable object, optionalIf given, the following parameters also accept a string s, which is\ninterpreted as data[s] (unless this raises an exception):\nx, y, u, v, start_points\n\nbroken_streamlinesboolean, default: TrueIf False, forces streamlines to continue until they\nleave the plot domain. If True, they may be terminated if they\ncome too close to another streamline.\n\n\n\nReturns:\n\nStreamplotSetContainer object with attributes\n\nlines: LineCollection of streamlines\narrows: PatchCollection containing FancyArrowPatch\nobjects representing the arrows half-way along streamlines.\n\nThis container will probably change in the future to allow changes\nto the colormap, alpha, etc. for both lines and arrows, but these\nchanges should be backward compatible.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.cla",
    "class": {
        "class method": [
            {
                "method name": "Axes.cla()",
                "method text": "Clear the Axes.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.clear",
    "class": {
        "class method": [
            {
                "method name": "Axes.clear()",
                "method text": "Clear the Axes.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.axis",
    "class": {
        "class method": [
            {
                "method name": "Axes.axis(arg=None, /, *, emit=True, **kwargs)",
                "method text": "Convenience method to get or set some axis properties.\nCall signatures:\nxmin, xmax, ymin, ymax = axis()\nxmin, xmax, ymin, ymax = axis([xmin, xmax, ymin, ymax])\nxmin, xmax, ymin, ymax = axis(option)\nxmin, xmax, ymin, ymax = axis(**kwargs)\n\n\n\nParameters:\n\nxmin, xmax, ymin, ymaxfloat, optionalThe axis limits to be set. This can also be achieved using\nax.set(xlim=(xmin, xmax), ylim=(ymin, ymax))\n\n\n\noptionbool or strIf a bool, turns axis lines and labels on or off. If a string,\npossible values are:\n\n\nValue\nDescription\n\n\n\n'off' or False\nHide all axis decorations, i.e. axis labels, spines,\ntick marks, tick labels, and grid lines.\nThis is the same as set_axis_off().\n\n'on' or True\nDo not hide all axis decorations, i.e. axis labels, spines,\ntick marks, tick labels, and grid lines.\nThis is the same as set_axis_on().\n\n'equal'\nSet equal scaling (i.e., make circles circular) by\nchanging the axis limits. This is the same as\nax.set_aspect('equal', adjustable='datalim').\nExplicit data limits may not be respected in this case.\n\n'scaled'\nSet equal scaling (i.e., make circles circular) by\nchanging dimensions of the plot box. This is the same as\nax.set_aspect('equal', adjustable='box', anchor='C').\nAdditionally, further autoscaling will be disabled.\n\n'tight'\nSet limits just large enough to show all data, then\ndisable further autoscaling.\n\n'auto'\nAutomatic scaling (fill plot box with data).\n\n'image'\n'scaled' with axis limits equal to data limits.\n\n'square'\nSquare plot; similar to 'scaled', but initially forcing\nxmax-xmin == ymax-ymin.\n\n\n\n\nemitbool, default: TrueWhether observers are notified of the axis limit change.\nThis option is passed on to set_xlim and\nset_ylim.\n\n\n\nReturns:\n\nxmin, xmax, ymin, ymaxfloatThe axis limits.\n\n\n\n\n\nSee also\n\nmatplotlib.axes.Axes.set_xlim\nmatplotlib.axes.Axes.set_ylim\n\n\nNotes\nFor 3D axes, this method additionally takes zmin, zmax as\nparameters and likewise returns them.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_axis_off",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_axis_off()",
                "method text": "Hide all visual components of the x- and y-axis.\nThis sets a flag to suppress drawing of all axis decorations, i.e.\naxis labels, axis spines, and the axis tick component (tick markers,\ntick labels, and grid lines). Individual visibility settings of these\ncomponents are ignored as long as set_axis_off() is in effect.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_axis_on",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_axis_on()",
                "method text": "Do not hide all visual components of the x- and y-axis.\nThis reverts the effect of a prior set_axis_off() call. Whether the\nindividual axis decorations are drawn is controlled by their respective\nvisibility settings.\nThis is on by default.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_frame_on",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_frame_on(b)",
                "method text": "Set whether the Axes rectangle patch is drawn.\n\nParameters:\n\nbbool\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_frame_on",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_frame_on()",
                "method text": "Get whether the Axes rectangle patch is drawn.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_axisbelow",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_axisbelow(b)",
                "method text": "Set whether axis ticks and gridlines are above or below most artists.\nThis controls the zorder of the ticks and gridlines. For more\ninformation on the zorder see Zorder Demo.\n\nParameters:\n\nbbool or 'line'Possible values:\n\nTrue (zorder = 0.5): Ticks and gridlines are below all Artists.\n'line' (zorder = 1.5): Ticks and gridlines are above patches\n(e.g. rectangles, with default zorder = 1) but still below lines\nand markers (with their default zorder = 2).\nFalse (zorder = 2.5): Ticks and gridlines are above patches\nand lines / markers.\n\n\n\n\n\n\nSee also\n\nget_axisbelow\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_axisbelow",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_axisbelow()",
                "method text": "Get whether axis ticks and gridlines are above or below most artists.\n\nReturns:\n\nbool or 'line'\n\n\n\n\nSee also\n\nset_axisbelow\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.grid",
    "class": {
        "class method": [
            {
                "method name": "Axes.grid(visible=None, which='major', axis='both', **kwargs)",
                "method text": "Configure the grid lines.\n\nParameters:\n\nvisiblebool or None, optionalWhether to show the grid lines. If any kwargs are supplied, it\nis assumed you want the grid on and visible will be set to True.\nIf visible is None and there are no kwargs, this toggles the\nvisibility of the lines.\n\nwhich{'major', 'minor', 'both'}, optionalThe grid lines to apply the changes on.\n\naxis{'both', 'x', 'y'}, optionalThe axis to apply the changes on.\n\n**kwargsLine2D propertiesDefine the line properties of the grid, e.g.:\ngrid(color='r', linestyle='-', linewidth=2)\n\n\nValid keyword arguments are:\n\n\nProperty\nDescription\n\n\n\nagg_filter\na filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array and two offsets from the bottom left corner of the image\n\nalpha\nscalar or None\n\nanimated\nbool\n\nantialiased or aa\nbool\n\nclip_box\nBboxBase or None\n\nclip_on\nbool\n\nclip_path\nPatch or (Path, Transform) or None\n\ncolor or c\ncolor\n\ndash_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\ndash_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ndashes\nsequence of floats (on/off ink in points) or (None, None)\n\ndata\n(2, N) array or two 1D arrays\n\ndrawstyle or ds\n{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: 'default'\n\nfigure\nFigure\n\nfillstyle\n{'full', 'left', 'right', 'bottom', 'top', 'none'}\n\ngapcolor\ncolor or None\n\ngid\nstr\n\nin_layout\nbool\n\nlabel\nobject\n\nlinestyle or ls\n{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\nlinewidth or lw\nfloat\n\nmarker\nmarker style string, Path or MarkerStyle\n\nmarkeredgecolor or mec\ncolor\n\nmarkeredgewidth or mew\nfloat\n\nmarkerfacecolor or mfc\ncolor\n\nmarkerfacecoloralt or mfcalt\ncolor\n\nmarkersize or ms\nfloat\n\nmarkevery\nNone or int or (int, int) or slice or list[int] or float or (float, float) or list[bool]\n\nmouseover\nbool\n\npath_effects\nlist of AbstractPathEffect\n\npicker\nfloat or callable[[Artist, Event], tuple[bool, dict]]\n\npickradius\nfloat\n\nrasterized\nbool\n\nsketch_params\n(scale: float, length: float, randomness: float)\n\nsnap\nbool or None\n\nsolid_capstyle\nCapStyle or {'butt', 'projecting', 'round'}\n\nsolid_joinstyle\nJoinStyle or {'miter', 'round', 'bevel'}\n\ntransform\nunknown\n\nurl\nstr\n\nvisible\nbool\n\nxdata\n1D array\n\nydata\n1D array\n\nzorder\nfloat\n\n\n\n\n\n\n\nNotes\nThe axis is drawn as a unit, so the effective zorder for drawing the\ngrid is determined by the zorder of each axis, not by the zorder of the\nLine2D objects comprising the grid. Therefore, to set grid zorder,\nuse set_axisbelow or, for more control, call the\nset_zorder method of each axis.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_facecolor",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_facecolor()",
                "method text": "Get the facecolor of the Axes.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_facecolor",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_facecolor(color)",
                "method text": "Set the facecolor of the Axes.\n\nParameters:\n\ncolorcolor\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_prop_cycle",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_prop_cycle(*args, **kwargs)",
                "method text": "Set the property cycle of the Axes.\nThe property cycle controls the style properties such as color,\nmarker and linestyle of future plot commands. The style properties\nof data already added to the Axes are not modified.\nCall signatures:\nset_prop_cycle(cycler)\nset_prop_cycle(label=values[, label2=values2[, ...]])\nset_prop_cycle(label, values)\n\n\nForm 1 sets given Cycler object.\nForm 2 creates a Cycler which cycles over one or more\nproperties simultaneously and set it as the property cycle of the\nAxes. If multiple properties are given, their value lists must have\nthe same length. This is just a shortcut for explicitly creating a\ncycler and passing it to the function, i.e. it's short for\nset_prop_cycle(cycler(label=values label2=values2, ...)).\nForm 3 creates a Cycler for a single property and set it\nas the property cycle of the Axes. This form exists for compatibility\nwith the original cycler.cycler interface. Its use is discouraged\nin favor of the kwarg form, i.e. set_prop_cycle(label=values).\n\nParameters:\n\ncyclerCyclerSet the given Cycler. None resets to the cycle defined by the\ncurrent style.\n\nlabelstrThe property key. Must be a valid Artist property.\nFor example, 'color' or 'linestyle'. Aliases are allowed,\nsuch as 'c' for 'color' and 'lw' for 'linewidth'.\n\nvaluesiterableFinite-length iterable of the property values. These values\nare validated and will raise a ValueError if invalid.\n\n\n\n\n\nSee also\n\nmatplotlib.rcsetup.cyclerConvenience function for creating validated cyclers for properties.\n\ncycler.cyclerThe original function for creating unvalidated cyclers.\n\n\n\nExamples\nSetting the property cycle for a single property:\n>>> ax.set_prop_cycle(color=['red', 'green', 'blue'])\n\n\nSetting the property cycle for simultaneously cycling over multiple\nproperties (e.g. red circle, green plus, blue cross):\n>>> ax.set_prop_cycle(color=['red', 'green', 'blue'],\n...                   marker=['o', '+', 'x'])\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_xaxis",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_xaxis()",
                "method text": "[Discouraged] Return the XAxis instance.\n\nDiscouraged\nThe use of this function is discouraged. You should instead\ndirectly access the attribute ax.xaxis.\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_yaxis",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_yaxis()",
                "method text": "[Discouraged] Return the YAxis instance.\n\nDiscouraged\nThe use of this function is discouraged. You should instead\ndirectly access the attribute ax.yaxis.\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.invert_xaxis",
    "class": {
        "class method": [
            {
                "method name": "Axes.invert_xaxis()",
                "method text": "Invert the x-axis.\n\nSee also\n\nxaxis_inverted\nget_xlim, set_xlim\nget_xbound, set_xbound\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.xaxis_inverted",
    "class": {
        "class method": [
            {
                "method name": "Axes.xaxis_inverted()",
                "method text": "Return whether the xaxis is oriented in the \"inverse\" direction.\nThe \"normal\" direction is increasing to the right for the x-axis and to\nthe top for the y-axis; the \"inverse\" direction is increasing to the\nleft for the x-axis and to the bottom for the y-axis.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.invert_yaxis",
    "class": {
        "class method": [
            {
                "method name": "Axes.invert_yaxis()",
                "method text": "Invert the y-axis.\n\nSee also\n\nyaxis_inverted\nget_ylim, set_ylim\nget_ybound, set_ybound\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.yaxis_inverted",
    "class": {
        "class method": [
            {
                "method name": "Axes.yaxis_inverted()",
                "method text": "Return whether the yaxis is oriented in the \"inverse\" direction.\nThe \"normal\" direction is increasing to the right for the x-axis and to\nthe top for the y-axis; the \"inverse\" direction is increasing to the\nleft for the x-axis and to the bottom for the y-axis.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_xlim",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_xlim(left=None, right=None, *, emit=True, auto=False, xmin=None, xmax=None)",
                "method text": "Set the x-axis view limits.\n\nParameters:\n\nleftfloat, optionalThe left xlim in data coordinates. Passing None leaves the\nlimit unchanged.\nThe left and right xlims may also be passed as the tuple\n(left, right) as the first positional argument (or as\nthe left keyword argument).\n\nrightfloat, optionalThe right xlim in data coordinates. Passing None leaves the\nlimit unchanged.\n\nemitbool, default: TrueWhether to notify observers of limit change.\n\nautobool or None, default: FalseWhether to turn on autoscaling of the x-axis. True turns on,\nFalse turns off, None leaves unchanged.\n\nxmin, xmaxfloat, optionalThey are equivalent to left and right respectively, and it is an\nerror to pass both xmin and left or xmax and right.\n\n\n\nReturns:\n\nleft, right(float, float)The new x-axis limits in data coordinates.\n\n\n\n\n\nSee also\n\nget_xlim\nset_xbound, get_xbound\ninvert_xaxis, xaxis_inverted\n\n\nNotes\nThe left value may be greater than the right value, in which\ncase the x-axis values will decrease from left to right.\nExamples\n>>> set_xlim(left, right)\n>>> set_xlim((left, right))\n>>> left, right = set_xlim(left, right)\n\n\nOne limit may be left unchanged.\n>>> set_xlim(right=right_lim)\n\n\nLimits may be passed in reverse order to flip the direction of\nthe x-axis. For example, suppose x represents the number of\nyears before present. The x-axis limits might be set like the\nfollowing so 5000 years ago is on the left of the plot and the\npresent is on the right.\n>>> set_xlim(5000, 0)\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_xlim",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_xlim()",
                "method text": "Return the x-axis view limits.\n\nReturns:\n\nleft, right(float, float)The current x-axis limits in data coordinates.\n\n\n\n\n\nSee also\n\nAxes.set_xlim\nAxes.set_xbound, Axes.get_xbound\nAxes.invert_xaxis, Axes.xaxis_inverted\n\n\nNotes\nThe x-axis may be inverted, in which case the left value will\nbe greater than the right value.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_ylim",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_ylim(bottom=None, top=None, *, emit=True, auto=False, ymin=None, ymax=None)",
                "method text": "Set the y-axis view limits.\n\nParameters:\n\nbottomfloat, optionalThe bottom ylim in data coordinates. Passing None leaves the\nlimit unchanged.\nThe bottom and top ylims may also be passed as the tuple\n(bottom, top) as the first positional argument (or as\nthe bottom keyword argument).\n\ntopfloat, optionalThe top ylim in data coordinates. Passing None leaves the\nlimit unchanged.\n\nemitbool, default: TrueWhether to notify observers of limit change.\n\nautobool or None, default: FalseWhether to turn on autoscaling of the y-axis. True turns on,\nFalse turns off, None leaves unchanged.\n\nymin, ymaxfloat, optionalThey are equivalent to bottom and top respectively, and it is an\nerror to pass both ymin and bottom or ymax and top.\n\n\n\nReturns:\n\nbottom, top(float, float)The new y-axis limits in data coordinates.\n\n\n\n\n\nSee also\n\nget_ylim\nset_ybound, get_ybound\ninvert_yaxis, yaxis_inverted\n\n\nNotes\nThe bottom value may be greater than the top value, in which\ncase the y-axis values will decrease from bottom to top.\nExamples\n>>> set_ylim(bottom, top)\n>>> set_ylim((bottom, top))\n>>> bottom, top = set_ylim(bottom, top)\n\n\nOne limit may be left unchanged.\n>>> set_ylim(top=top_lim)\n\n\nLimits may be passed in reverse order to flip the direction of\nthe y-axis. For example, suppose y represents depth of the\nocean in m. The y-axis limits might be set like the following\nso 5000 m depth is at the bottom of the plot and the surface,\n0 m, is at the top.\n>>> set_ylim(5000, 0)\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_ylim",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_ylim()",
                "method text": "Return the y-axis view limits.\n\nReturns:\n\nbottom, top(float, float)The current y-axis limits in data coordinates.\n\n\n\n\n\nSee also\n\nAxes.set_ylim\nAxes.set_ybound, Axes.get_ybound\nAxes.invert_yaxis, Axes.yaxis_inverted\n\n\nNotes\nThe y-axis may be inverted, in which case the bottom value\nwill be greater than the top value.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.update_datalim",
    "class": {
        "class method": [
            {
                "method name": "Axes.update_datalim(xys, updatex=True, updatey=True)",
                "method text": "Extend the dataLim Bbox to include the given points.\nIf no data is set currently, the Bbox will ignore its limits and set\nthe bound to be the bounds of the xydata (xys). Otherwise, it will\ncompute the bounds of the union of its current data and the data in\nxys.\n\nParameters:\n\nxys2D array-likeThe points to include in the data limits Bbox. This can be either\na list of (x, y) tuples or a (N, 2) array.\n\nupdatex, updateybool, default: TrueWhether to update the x/y limits.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_xbound",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_xbound(lower=None, upper=None)",
                "method text": "Set the lower and upper numerical bounds of the x-axis.\nThis method will honor axis inversion regardless of parameter order.\nIt will not change the autoscaling setting (get_autoscalex_on()).\n\nParameters:\n\nlower, upperfloat or NoneThe lower and upper bounds. If None, the respective axis bound\nis not modified.\n\n\n\n\n\nSee also\n\nget_xbound\nget_xlim, set_xlim\ninvert_xaxis, xaxis_inverted\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_xbound",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_xbound()",
                "method text": "Return the lower and upper x-axis bounds, in increasing order.\n\nSee also\n\nset_xbound\nget_xlim, set_xlim\ninvert_xaxis, xaxis_inverted\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_ybound",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_ybound(lower=None, upper=None)",
                "method text": "Set the lower and upper numerical bounds of the y-axis.\nThis method will honor axis inversion regardless of parameter order.\nIt will not change the autoscaling setting (get_autoscaley_on()).\n\nParameters:\n\nlower, upperfloat or None\nThe lower and upper bounds. If None, the respective axis bound\nis not modified.\n\n\n\n\n\n\nSee also\n\nget_ybound\nget_ylim, set_ylim\ninvert_yaxis, yaxis_inverted\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_ybound",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_ybound()",
                "method text": "Return the lower and upper y-axis bounds, in increasing order.\n\nSee also\n\nset_ybound\nget_ylim, set_ylim\ninvert_yaxis, yaxis_inverted\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_xlabel",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_xlabel(xlabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)",
                "method text": "Set the label for the x-axis.\n\nParameters:\n\nxlabelstrThe label text.\n\nlabelpadfloat, default: rcParams[\"axes.labelpad\"] (default: 4.0)Spacing in points from the Axes bounding box including ticks\nand tick labels. If None, the previous value is left as is.\n\nloc{'left', 'center', 'right'}, default: rcParams[\"xaxis.labellocation\"] (default: 'center')The label position. This is a high-level alternative for passing\nparameters x and horizontalalignment.\n\n\n\nOther Parameters:\n\n**kwargsText propertiesText properties control the appearance of the label.\n\n\n\n\n\nSee also\n\ntextDocuments the properties supported by Text.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_xlabel",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_xlabel()",
                "method text": "Get the xlabel text string.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_ylabel",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_ylabel(ylabel, fontdict=None, labelpad=None, *, loc=None, **kwargs)",
                "method text": "Set the label for the y-axis.\n\nParameters:\n\nylabelstrThe label text.\n\nlabelpadfloat, default: rcParams[\"axes.labelpad\"] (default: 4.0)Spacing in points from the Axes bounding box including ticks\nand tick labels. If None, the previous value is left as is.\n\nloc{'bottom', 'center', 'top'}, default: rcParams[\"yaxis.labellocation\"] (default: 'center')The label position. This is a high-level alternative for passing\nparameters y and horizontalalignment.\n\n\n\nOther Parameters:\n\n**kwargsText propertiesText properties control the appearance of the label.\n\n\n\n\n\nSee also\n\ntextDocuments the properties supported by Text.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_ylabel",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_ylabel()",
                "method text": "Get the ylabel text string.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.label_outer",
    "class": {
        "class method": [
            {
                "method name": "Axes.label_outer(remove_inner_ticks=False)",
                "method text": "Only show \"outer\" labels and tick labels.\nx-labels are only kept for subplots on the last row (or first row, if\nlabels are on the top side); y-labels only for subplots on the first\ncolumn (or last column, if labels are on the right side).\n\nParameters:\n\nremove_inner_ticksbool, default: FalseIf True, remove the inner ticks as well (not only tick labels).\n\nNew in version 3.8.\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_title",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_title(label, fontdict=None, loc=None, pad=None, *, y=None, **kwargs)",
                "method text": "Set a title for the Axes.\nSet one of the three available Axes titles. The available titles\nare positioned above the Axes in the center, flush with the left\nedge, and flush with the right edge.\n\nParameters:\n\nlabelstrText to use for the title\n\nfontdictdict\nDiscouraged\nThe use of fontdict is discouraged. Parameters should be passed as\nindividual keyword arguments or using dictionary-unpacking\nset_title(..., **fontdict).\n\nA dictionary controlling the appearance of the title text,\nthe default fontdict is:\n{'fontsize': rcParams['axes.titlesize'],\n 'fontweight': rcParams['axes.titleweight'],\n 'color': rcParams['axes.titlecolor'],\n 'verticalalignment': 'baseline',\n 'horizontalalignment': loc}\n\n\n\nloc{'center', 'left', 'right'}, default: rcParams[\"axes.titlelocation\"] (default: 'center')Which title to set.\n\nyfloat, default: rcParams[\"axes.titley\"] (default: None)Vertical Axes location for the title (1.0 is the top). If\nNone (the default) and rcParams[\"axes.titley\"] (default: None) is also None, y is\ndetermined automatically to avoid decorators on the Axes.\n\npadfloat, default: rcParams[\"axes.titlepad\"] (default: 6.0)The offset of the title from the top of the Axes, in points.\n\n\n\nReturns:\n\nTextThe matplotlib text instance representing the title\n\n\n\nOther Parameters:\n\n**kwargsText propertiesOther keyword arguments are text properties, see Text for a list\nof valid text properties.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_title",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_title(loc='center')",
                "method text": "Get an Axes title.\nGet one of the three available Axes titles. The available titles\nare positioned above the Axes in the center, flush with the left\nedge, and flush with the right edge.\n\nParameters:\n\nloc{'center', 'left', 'right'}, str, default: 'center'Which title to return.\n\n\n\nReturns:\n\nstrThe title text string.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.legend",
    "class": {
        "class method": [
            {
                "method name": "Axes.legend(*args, **kwargs)",
                "method text": "Place a legend on the Axes.\nCall signatures:\nlegend()\nlegend(handles, labels)\nlegend(handles=handles)\nlegend(labels)\n\n\nThe call signatures correspond to the following different ways to use\nthis method:\n1. Automatic detection of elements to be shown in the legend\nThe elements to be added to the legend are automatically determined,\nwhen you do not pass in any extra arguments.\nIn this case, the labels are taken from the artist. You can specify\nthem either at artist creation or by calling the\nset_label() method on the artist:\nax.plot([1, 2, 3], label='Inline label')\nax.legend()\n\n\nor:\nline, = ax.plot([1, 2, 3])\nline.set_label('Label via method')\nax.legend()\n\n\n\nNote\nSpecific artists can be excluded from the automatic legend element\nselection by using a label starting with an underscore, \"_\".\nA string starting with an underscore is the default label for all\nartists, so calling Axes.legend without any arguments and\nwithout setting the labels manually will result in no legend being\ndrawn.\n\n2. Explicitly listing the artists and labels in the legend\nFor full control of which artists have a legend entry, it is possible\nto pass an iterable of legend artists followed by an iterable of\nlegend labels respectively:\nax.legend([line1, line2, line3], ['label1', 'label2', 'label3'])\n\n\n3. Explicitly listing the artists in the legend\nThis is similar to 2, but the labels are taken from the artists'\nlabel properties. Example:\nline1, = ax.plot([1, 2, 3], label='label1')\nline2, = ax.plot([1, 2, 3], label='label2')\nax.legend(handles=[line1, line2])\n\n\n4. Labeling existing plot elements\n\nDiscouraged\nThis call signature is discouraged, because the relation between\nplot elements and labels is only implicit by their order and can\neasily be mixed up.\n\nTo make a legend for all artists on an Axes, call this function with\nan iterable of strings, one for each legend item. For example:\nax.plot([1, 2, 3])\nax.plot([5, 6, 7])\nax.legend(['First line', 'Second line'])\n\n\n\nParameters:\n\nhandlessequence of (Artist or tuple of Artist), optionalA list of Artists (lines, patches) to be added to the legend.\nUse this together with labels, if you need full control on what\nis shown in the legend and the automatic mechanism described above\nis not sufficient.\nThe length of handles and labels should be the same in this\ncase. If they are not, they are truncated to the smaller length.\nIf an entry contains a tuple, then the legend handler for all Artists in the\ntuple will be placed alongside a single label.\n\nlabelslist of str, optionalA list of labels to show next to the artists.\nUse this together with handles, if you need full control on what\nis shown in the legend and the automatic mechanism described above\nis not sufficient.\n\n\n\nReturns:\n\nLegend\n\n\nOther Parameters:\n\nlocstr or pair of floats, default: rcParams[\"legend.loc\"] (default: 'best')The location of the legend.\nThe strings 'upper left', 'upper right', 'lower left',\n'lower right' place the legend at the corresponding corner of the\naxes.\nThe strings 'upper center', 'lower center', 'center left',\n'center right' place the legend at the center of the corresponding edge\nof the axes.\nThe string 'center' places the legend at the center of the axes.\nThe string 'best' places the legend at the location, among the nine\nlocations defined so far, with the minimum overlap with other drawn\nartists. This option can be quite slow for plots with large amounts of\ndata; your plotting speed may benefit from providing a specific location.\nThe location can also be a 2-tuple giving the coordinates of the lower-left\ncorner of the legend in axes coordinates (in which case bbox_to_anchor\nwill be ignored).\nFor back-compatibility, 'center right' (but no other location) can also\nbe spelled 'right', and each \"string\" location can also be given as a\nnumeric value:\n\n\nLocation String\nLocation Code\n\n\n\n'best' (Axes only)\n0\n\n'upper right'\n1\n\n'upper left'\n2\n\n'lower left'\n3\n\n'lower right'\n4\n\n'right'\n5\n\n'center left'\n6\n\n'center right'\n7\n\n'lower center'\n8\n\n'upper center'\n9\n\n'center'\n10\n\n\n\n\nbbox_to_anchorBboxBase, 2-tuple, or 4-tuple of floatsBox that is used to position the legend in conjunction with loc.\nDefaults to axes.bbox (if called as a method to Axes.legend) or\nfigure.bbox (if Figure.legend). This argument allows arbitrary\nplacement of the legend.\nBbox coordinates are interpreted in the coordinate system given by\nbbox_transform, with the default transform\nAxes or Figure coordinates, depending on which legend is called.\nIf a 4-tuple or BboxBase is given, then it specifies the bbox\n(x, y, width, height) that the legend is placed in.\nTo put the legend in the best location in the bottom right\nquadrant of the axes (or figure):\nloc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)\n\n\nA 2-tuple (x, y) places the corner of the legend specified by loc at\nx, y. For example, to put the legend's upper right-hand corner in the\ncenter of the axes (or figure) the following keywords can be used:\nloc='upper right', bbox_to_anchor=(0.5, 0.5)\n\n\n\nncolsint, default: 1The number of columns that the legend has.\nFor backward compatibility, the spelling ncol is also supported\nbut it is discouraged. If both are given, ncols takes precedence.\n\npropNone or FontProperties or dictThe font properties of the legend. If None (default), the current\nmatplotlib.rcParams will be used.\n\nfontsizeint or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}The font size of the legend. If the value is numeric the size will be the\nabsolute font size in points. String values are relative to the current\ndefault font size. This argument is only used if prop is not specified.\n\nlabelcolorstr or list, default: rcParams[\"legend.labelcolor\"] (default: 'None')The color of the text in the legend. Either a valid color string\n(for example, 'red'), or a list of color strings. The labelcolor can\nalso be made to match the color of the line or marker using 'linecolor',\n'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').\nLabelcolor can be set globally using rcParams[\"legend.labelcolor\"] (default: 'None'). If None,\nuse rcParams[\"text.color\"] (default: 'black').\n\nnumpointsint, default: rcParams[\"legend.numpoints\"] (default: 1)The number of marker points in the legend when creating a legend\nentry for a Line2D (line).\n\nscatterpointsint, default: rcParams[\"legend.scatterpoints\"] (default: 1)The number of marker points in the legend when creating\na legend entry for a PathCollection (scatter plot).\n\nscatteryoffsetsiterable of floats, default: [0.375, 0.5, 0.3125]The vertical offset (relative to the font size) for the markers\ncreated for a scatter plot legend entry. 0.0 is at the base the\nlegend text, and 1.0 is at the top. To draw all markers at the\nsame height, set to [0.5].\n\nmarkerscalefloat, default: rcParams[\"legend.markerscale\"] (default: 1.0)The relative size of legend markers compared to the originally drawn ones.\n\nmarkerfirstbool, default: TrueIf True, legend marker is placed to the left of the legend label.\nIf False, legend marker is placed to the right of the legend label.\n\nreversebool, default: FalseIf True, the legend labels are displayed in reverse order from the input.\nIf False, the legend labels are displayed in the same order as the input.\n\nNew in version 3.7.\n\n\nframeonbool, default: rcParams[\"legend.frameon\"] (default: True)Whether the legend should be drawn on a patch (frame).\n\nfancyboxbool, default: rcParams[\"legend.fancybox\"] (default: True)Whether round edges should be enabled around the FancyBboxPatch which\nmakes up the legend's background.\n\nshadowNone, bool or dict, default: rcParams[\"legend.shadow\"] (default: False)Whether to draw a shadow behind the legend.\nThe shadow can be configured using Patch keywords.\nCustomization via rcParams[\"legend.shadow\"] (default: False) is currently not supported.\n\nframealphafloat, default: rcParams[\"legend.framealpha\"] (default: 0.8)The alpha transparency of the legend's background.\nIf shadow is activated and framealpha is None, the default value is\nignored.\n\nfacecolor\"inherit\" or color, default: rcParams[\"legend.facecolor\"] (default: 'inherit')The legend's background color.\nIf \"inherit\", use rcParams[\"axes.facecolor\"] (default: 'white').\n\nedgecolor\"inherit\" or color, default: rcParams[\"legend.edgecolor\"] (default: '0.8')The legend's background patch edge color.\nIf \"inherit\", use take rcParams[\"axes.edgecolor\"] (default: 'black').\n\nmode{\"expand\", None}If mode is set to \"expand\" the legend will be horizontally\nexpanded to fill the axes area (or bbox_to_anchor if defines\nthe legend's size).\n\nbbox_transformNone or TransformThe transform for the bounding box (bbox_to_anchor). For a value\nof None (default) the Axes'\ntransAxes transform will be used.\n\ntitlestr or NoneThe legend's title. Default is no title (None).\n\ntitle_fontpropertiesNone or FontProperties or dictThe font properties of the legend's title. If None (default), the\ntitle_fontsize argument will be used if present; if title_fontsize is\nalso None, the current rcParams[\"legend.title_fontsize\"] (default: None) will be used.\n\ntitle_fontsizeint or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}, default: rcParams[\"legend.title_fontsize\"] (default: None)The font size of the legend's title.\nNote: This cannot be combined with title_fontproperties. If you want\nto set the fontsize alongside other font properties, use the size\nparameter in title_fontproperties.\n\nalignment{'center', 'left', 'right'}, default: 'center'The alignment of the legend title and the box of entries. The entries\nare aligned as a single block, so that markers always lined up.\n\nborderpadfloat, default: rcParams[\"legend.borderpad\"] (default: 0.4)The fractional whitespace inside the legend border, in font-size units.\n\nlabelspacingfloat, default: rcParams[\"legend.labelspacing\"] (default: 0.5)The vertical space between the legend entries, in font-size units.\n\nhandlelengthfloat, default: rcParams[\"legend.handlelength\"] (default: 2.0)The length of the legend handles, in font-size units.\n\nhandleheightfloat, default: rcParams[\"legend.handleheight\"] (default: 0.7)The height of the legend handles, in font-size units.\n\nhandletextpadfloat, default: rcParams[\"legend.handletextpad\"] (default: 0.8)The pad between the legend handle and text, in font-size units.\n\nborderaxespadfloat, default: rcParams[\"legend.borderaxespad\"] (default: 0.5)The pad between the axes and legend border, in font-size units.\n\ncolumnspacingfloat, default: rcParams[\"legend.columnspacing\"] (default: 2.0)The spacing between columns, in font-size units.\n\nhandler_mapdict or NoneThe custom dictionary mapping instances or types to a legend\nhandler. This handler_map updates the default handler map\nfound at matplotlib.legend.Legend.get_legend_handler_map.\n\ndraggablebool, default: FalseWhether the legend can be dragged with the mouse.\n\n\n\n\n\nSee also\n\nFigure.legend\n\n\nNotes\nSome artists are not supported by this function. See\nLegend guide for details.\nExamples\n(Source code, 2x.png, png)\n\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_legend",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_legend()",
                "method text": "Return the Legend instance, or None if no legend is defined.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_legend_handles_labels",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_legend_handles_labels(legend_handler_map=None)",
                "method text": "Return handles and labels for legend\nax.legend() is equivalent to\nh, l = ax.get_legend_handles_labels()\nax.legend(h, l)\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_xscale",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_xscale(value, **kwargs)",
                "method text": "Set the xaxis' scale.\n\nParameters:\n\nvalue{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBaseThe axis scale type to apply.\n\n**kwargsDifferent keyword arguments are accepted, depending on the scale.\nSee the respective class keyword arguments:\n\nmatplotlib.scale.LinearScale\nmatplotlib.scale.LogScale\nmatplotlib.scale.SymmetricalLogScale\nmatplotlib.scale.LogitScale\nmatplotlib.scale.FuncScale\n\n\n\n\n\nNotes\nBy default, Matplotlib supports the above-mentioned scales.\nAdditionally, custom scales may be registered using\nmatplotlib.scale.register_scale. These scales can then also\nbe used here.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_xscale",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_xscale()",
                "method text": "Return the xaxis' scale (as a str).\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_yscale",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_yscale(value, **kwargs)",
                "method text": "Set the yaxis' scale.\n\nParameters:\n\nvalue{\"linear\", \"log\", \"symlog\", \"logit\", ...} or ScaleBaseThe axis scale type to apply.\n\n**kwargsDifferent keyword arguments are accepted, depending on the scale.\nSee the respective class keyword arguments:\n\nmatplotlib.scale.LinearScale\nmatplotlib.scale.LogScale\nmatplotlib.scale.SymmetricalLogScale\nmatplotlib.scale.LogitScale\nmatplotlib.scale.FuncScale\n\n\n\n\n\nNotes\nBy default, Matplotlib supports the above-mentioned scales.\nAdditionally, custom scales may be registered using\nmatplotlib.scale.register_scale. These scales can then also\nbe used here.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_yscale",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_yscale()",
                "method text": "Return the yaxis' scale (as a str).\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.use_sticky_edges",
    "class": {
        "class property": [
            {
                "property name": "property Axes.use_sticky_edges#",
                "property text": "When autoscaling, whether to obey all Artist.sticky_edges.\nDefault is True.\nSetting this to False ensures that the specified margins\nwill be applied, even if the plot includes an image, for\nexample, which would otherwise force a view limit to coincide\nwith its data limit.\nThe changing this property does not change the plot until\nautoscale or autoscale_view is called.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.margins",
    "class": {
        "class method": [
            {
                "method name": "Axes.margins(*margins, x=None, y=None, tight=True)",
                "method text": "Set or retrieve autoscaling margins.\nThe padding added to each limit of the Axes is the margin\ntimes the data interval. All input parameters must be floats\ngreater than -0.5. Passing both positional and keyword\narguments is invalid and will raise a TypeError. If no\narguments (positional or otherwise) are provided, the current\nmargins will remain unchanged and simply be returned.\nSpecifying any margin changes only the autoscaling; for example,\nif xmargin is not None, then xmargin times the X data\ninterval will be added to each end of that interval before\nit is used in autoscaling.\n\nParameters:\n\n*marginsfloat, optionalIf a single positional argument is provided, it specifies\nboth margins of the x-axis and y-axis limits. If two\npositional arguments are provided, they will be interpreted\nas xmargin, ymargin. If setting the margin on a single\naxis is desired, use the keyword arguments described below.\n\nx, yfloat, optionalSpecific margin values for the x-axis and y-axis,\nrespectively. These cannot be used with positional\narguments, but can be used individually to alter on e.g.,\nonly the y-axis.\n\ntightbool or None, default: TrueThe tight parameter is passed to autoscale_view,\nwhich is executed after a margin is changed; the default\nhere is True, on the assumption that when margins are\nspecified, no additional padding to match tick marks is\nusually desired. Setting tight to None preserves\nthe previous setting.\n\n\n\nReturns:\n\nxmargin, ymarginfloat\n\n\n\nNotes\nIf a previously used Axes method such as pcolor() has set\nuse_sticky_edges to True, only the limits not set by\nthe \"sticky artists\" will be modified. To force all of the\nmargins to be set, set use_sticky_edges to False\nbefore calling margins().\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_xmargin",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_xmargin(m)",
                "method text": "Set padding of X data limits prior to autoscaling.\nm times the data interval will be added to each end of that interval\nbefore it is used in autoscaling. If m is negative, this will clip\nthe data range instead of expanding it.\nFor example, if your data is in the range [0, 2], a margin of 0.1 will\nresult in a range [-0.2, 2.2]; a margin of -0.1 will result in a range\nof [0.2, 1.8].\n\nParameters:\n\nmfloat greater than -0.5\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_ymargin",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_ymargin(m)",
                "method text": "Set padding of Y data limits prior to autoscaling.\nm times the data interval will be added to each end of that interval\nbefore it is used in autoscaling. If m is negative, this will clip\nthe data range instead of expanding it.\nFor example, if your data is in the range [0, 2], a margin of 0.1 will\nresult in a range [-0.2, 2.2]; a margin of -0.1 will result in a range\nof [0.2, 1.8].\n\nParameters:\n\nmfloat greater than -0.5\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.relim",
    "class": {
        "class method": [
            {
                "method name": "Axes.relim(visible_only=False)",
                "method text": "Recompute the data limits based on current artists.\nAt present, Collection instances are not supported.\n\nParameters:\n\nvisible_onlybool, default: FalseWhether to exclude invisible artists.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.autoscale",
    "class": {
        "class method": [
            {
                "method name": "Axes.autoscale(enable=True, axis='both', tight=None)",
                "method text": "Autoscale the axis view to the data (toggle).\nConvenience method for simple axis view autoscaling.\nIt turns autoscaling on or off, and then,\nif autoscaling for either axis is on, it performs\nthe autoscaling on the specified axis or Axes.\n\nParameters:\n\nenablebool or None, default: TrueTrue turns autoscaling on, False turns it off.\nNone leaves the autoscaling state unchanged.\n\naxis{'both', 'x', 'y'}, default: 'both'The axis on which to operate. (For 3D Axes, axis can also be set\nto 'z', and 'both' refers to all three axes.)\n\ntightbool or None, default: NoneIf True, first set the margins to zero. Then, this argument is\nforwarded to autoscale_view (regardless of\nits value); see the description of its behavior there.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.autoscale_view",
    "class": {
        "class method": [
            {
                "method name": "Axes.autoscale_view(tight=None, scalex=True, scaley=True)",
                "method text": "Autoscale the view limits using the data limits.\n\nParameters:\n\ntightbool or NoneIf True, only expand the axis limits using the margins. Note\nthat unlike for autoscale, tight=True does not set the\nmargins to zero.\nIf False and rcParams[\"axes.autolimit_mode\"] (default: 'data') is 'round_numbers', then\nafter expansion by the margins, further expand the axis limits\nusing the axis major locator.\nIf None (the default), reuse the value set in the previous call to\nautoscale_view (the initial value is False, but the default style\nsets rcParams[\"axes.autolimit_mode\"] (default: 'data') to 'data', in which case this\nbehaves like True).\n\nscalexbool, default: TrueWhether to autoscale the x-axis.\n\nscaleybool, default: TrueWhether to autoscale the y-axis.\n\n\n\n\nNotes\nThe autoscaling preserves any preexisting axis direction reversal.\nThe data limits are not updated automatically when artist data are\nchanged after the artist has been added to an Axes instance. In that\ncase, use matplotlib.axes.Axes.relim() prior to calling\nautoscale_view.\nIf the views of the Axes are fixed, e.g. via set_xlim, they will\nnot be changed by autoscale_view().\nSee matplotlib.axes.Axes.autoscale() for an alternative.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_autoscale_on",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_autoscale_on(b)",
                "method text": "Set whether autoscaling is applied to each axis on the next draw or\ncall to Axes.autoscale_view.\n\nParameters:\n\nbbool\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_autoscale_on",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_autoscale_on()",
                "method text": "Return True if each axis is autoscaled, False otherwise.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_autoscalex_on",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_autoscalex_on(b)",
                "method text": "Set whether the xaxis is autoscaled when drawing or by\nAxes.autoscale_view.\n\nParameters:\n\nbbool\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_autoscalex_on",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_autoscalex_on()",
                "method text": "Return whether the xaxis is autoscaled.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_autoscaley_on",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_autoscaley_on(b)",
                "method text": "Set whether the yaxis is autoscaled when drawing or by\nAxes.autoscale_view.\n\nParameters:\n\nbbool\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_autoscaley_on",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_autoscaley_on()",
                "method text": "Return whether the yaxis is autoscaled.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.apply_aspect",
    "class": {
        "class method": [
            {
                "method name": "Axes.apply_aspect(position=None)",
                "method text": "Adjust the Axes for a specified data aspect ratio.\nDepending on get_adjustable this will modify either the\nAxes box (position) or the view limits. In the former case,\nget_anchor will affect the position.\n\nParameters:\n\npositionNone or .BboxIf not None, this defines the position of the\nAxes within the figure as a Bbox. See get_position\nfor further details.\n\n\n\n\n\nSee also\n\nmatplotlib.axes.Axes.set_aspectFor a description of aspect ratio handling.\n\nmatplotlib.axes.Axes.set_adjustableSet how the Axes adjusts to achieve the required aspect ratio.\n\nmatplotlib.axes.Axes.set_anchorSet the position in case of extra space.\n\n\n\nNotes\nThis is called automatically when each Axes is drawn. You may need\nto call it yourself if you need to update the Axes position and/or\nview limits before the Figure is drawn.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_aspect",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_aspect(aspect, adjustable=None, anchor=None, share=False)",
                "method text": "Set the aspect ratio of the axes scaling, i.e. y/x-scale.\n\nParameters:\n\naspect{'auto', 'equal'} or floatPossible values:\n\n'auto': fill the position rectangle with data.\n'equal': same as aspect=1, i.e. same scaling for x and y.\nfloat: The displayed size of 1 unit in y-data coordinates will\nbe aspect times the displayed size of 1 unit in x-data\ncoordinates; e.g. for aspect=2 a square in data coordinates\nwill be rendered with a height of twice its width.\n\n\nadjustableNone or {'box', 'datalim'}, optionalIf not None, this defines which parameter will be adjusted to\nmeet the required aspect. See set_adjustable for further\ndetails.\n\nanchorNone or str or (float, float), optionalIf not None, this defines where the Axes will be drawn if there\nis extra space due to aspect constraints. The most common way\nto specify the anchor are abbreviations of cardinal directions:\n\n\nvalue\ndescription\n\n\n\n'C'\ncentered\n\n'SW'\nlower left corner\n\n'S'\nmiddle of bottom edge\n\n'SE'\nlower right corner\n\netc.\n\n\n\n\nSee set_anchor for further details.\n\nsharebool, default: FalseIf True, apply the settings to all shared Axes.\n\n\n\n\n\nSee also\n\nmatplotlib.axes.Axes.set_adjustableSet how the Axes adjusts to achieve the required aspect ratio.\n\nmatplotlib.axes.Axes.set_anchorSet the position in case of extra space.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_aspect",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_aspect()",
                "method text": "Return the aspect ratio of the axes scaling.\nThis is either \"auto\" or a float giving the ratio of y/x-scale.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_box_aspect",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_box_aspect(aspect=None)",
                "method text": "Set the Axes box aspect, i.e. the ratio of height to width.\nThis defines the aspect of the Axes in figure space and is not to be\nconfused with the data aspect (see set_aspect).\n\nParameters:\n\naspectfloat or NoneChanges the physical dimensions of the Axes, such that the ratio\nof the Axes height to the Axes width in physical units is equal to\naspect. Defining a box aspect will change the adjustable\nproperty to 'datalim' (see set_adjustable).\nNone will disable a fixed box aspect so that height and width\nof the Axes are chosen independently.\n\n\n\n\n\nSee also\n\nmatplotlib.axes.Axes.set_aspectfor a description of aspect handling.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_box_aspect",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_box_aspect()",
                "method text": "Return the Axes box aspect, i.e. the ratio of height to width.\nThe box aspect is None (i.e. chosen depending on the available\nfigure space) unless explicitly specified.\n\nSee also\n\nmatplotlib.axes.Axes.set_box_aspectfor a description of box aspect.\n\nmatplotlib.axes.Axes.set_aspectfor a description of aspect handling.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_adjustable",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_adjustable(adjustable, share=False)",
                "method text": "Set how the Axes adjusts to achieve the required aspect ratio.\n\nParameters:\n\nadjustable{'box', 'datalim'}If 'box', change the physical dimensions of the Axes.\nIf 'datalim', change the x or y data limits.\n\nsharebool, default: FalseIf True, apply the settings to all shared Axes.\n\n\n\n\n\nSee also\n\nmatplotlib.axes.Axes.set_aspectFor a description of aspect handling.\n\n\n\nNotes\nShared Axes (of which twinned Axes are a special case)\nimpose restrictions on how aspect ratios can be imposed.\nFor twinned Axes, use 'datalim'. For Axes that share both\nx and y, use 'box'. Otherwise, either 'datalim' or 'box'\nmay be used. These limitations are partly a requirement\nto avoid over-specification, and partly a result of the\nparticular implementation we are currently using, in\nwhich the adjustments for aspect ratios are done sequentially\nand independently on each Axes as it is drawn.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_adjustable",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_adjustable()",
                "method text": "Return whether the Axes will adjust its physical dimension ('box') or\nits data limits ('datalim') to achieve the desired aspect ratio.\n\nSee also\n\nmatplotlib.axes.Axes.set_adjustableSet how the Axes adjusts to achieve the required aspect ratio.\n\nmatplotlib.axes.Axes.set_aspectFor a description of aspect handling.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_xticks",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_xticks(ticks, labels=None, *, minor=False, **kwargs)",
                "method text": "Set the xaxis' tick locations and optionally tick labels.\nIf necessary, the view limits of the Axis are expanded so that all\ngiven ticks are visible.\n\nParameters:\n\nticks1D array-likeArray of tick locations. The axis Locator is replaced by a\nFixedLocator.\nThe values may be either floats or in axis units.\nPass an empty list to remove all ticks:\nset_xticks([])\n\n\nSome tick formatters will not label arbitrary tick positions;\ne.g. log formatters only label decade ticks by default. In\nsuch a case you can set a formatter explicitly on the axis\nusing Axis.set_major_formatter or provide formatted\nlabels yourself.\n\nlabelslist of str, optionalTick labels for each location in ticks. labels must be of the same\nlength as ticks. If not set, the labels are generate using the axis\ntick Formatter.\n\nminorbool, default: FalseIf False, set the major ticks; if True, the minor ticks.\n\n**kwargsText properties for the labels. Using these is only allowed if\nyou pass labels. In other cases, please use tick_params.\n\n\n\n\nNotes\nThe mandatory expansion of the view limits is an intentional design\nchoice to prevent the surprise of a non-visible tick. If you need\nother limits, you should set the limits explicitly after setting the\nticks.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_xticks",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_xticks(*, minor=False)",
                "method text": "Return the xaxis' tick locations in data coordinates.\nThe locations are not clipped to the current axis limits and hence\nmay contain locations that are not visible in the output.\n\nParameters:\n\nminorbool, default: FalseTrue to return the minor tick directions,\nFalse to return the major tick directions.\n\n\n\nReturns:\n\narray of tick locations\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_xticklabels",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_xticklabels(labels, *, minor=False, fontdict=None, **kwargs)",
                "method text": "[Discouraged] Set the xaxis' tick labels with list of string labels.\n\nDiscouraged\nThe use of this method is discouraged, because of the dependency on\ntick positions. In most cases, you'll want to use\nAxes.set_[x/y/z]ticks(positions, labels) or Axes.set_xticks\ninstead.\nIf you are using this method, you should always fix the tick\npositions before, e.g. by using Axes.set_xticks or by explicitly\nsetting a FixedLocator. Otherwise, ticks are free to\nmove and the labels may end up in unexpected positions.\n\n\nParameters:\n\nlabelssequence of str or of TextsTexts for labeling each tick location in the sequence set by\nAxes.set_xticks; the number of labels must match the number of\nlocations.\n\nminorboolIf True, set minor ticks instead of major ticks.\n\nfontdictdict, optional\nDiscouraged\nThe use of fontdict is discouraged. Parameters should be passed as\nindividual keyword arguments or using dictionary-unpacking\nset_ticklabels(..., **fontdict).\n\nA dictionary controlling the appearance of the ticklabels.\nThe default fontdict is:\n{'fontsize': rcParams['axes.titlesize'],\n 'fontweight': rcParams['axes.titleweight'],\n 'verticalalignment': 'baseline',\n 'horizontalalignment': loc}\n\n\n\n**kwargsText properties.\n\nWarning\nThis only sets the properties of the current ticks.\nTicks are not guaranteed to be persistent. Various operations\ncan create, delete and modify the Tick instances. There is an\nimminent risk that these settings can get lost if you work on\nthe figure further (including also panning/zooming on a\ndisplayed figure).\nUse set_tick_params instead if possible.\n\n\n\n\nReturns:\n\nlist of TextsFor each tick, includes tick.label1 if it is visible, then\ntick.label2 if it is visible, in that order.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_xticklabels",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_xticklabels(minor=False, which=None)",
                "method text": "Get the xaxis' tick labels.\n\nParameters:\n\nminorboolWhether to return the minor or the major ticklabels.\n\nwhichNone, ('minor', 'major', 'both')Overrides minor.\nSelects which ticklabels to return\n\n\n\nReturns:\n\nlist of Text\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_xmajorticklabels",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_xmajorticklabels()",
                "method text": "Return the xaxis' major tick labels, as a list of Text.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_xminorticklabels",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_xminorticklabels()",
                "method text": "Return the xaxis' minor tick labels, as a list of Text.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_xgridlines",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_xgridlines()",
                "method text": "Return the xaxis' grid lines as a list of Line2Ds.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_xticklines",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_xticklines(minor=False)",
                "method text": "Return the xaxis' tick lines as a list of Line2Ds.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.xaxis_date",
    "class": {
        "class method": [
            {
                "method name": "Axes.xaxis_date(tz=None)",
                "method text": "Set up axis ticks and labels to treat data along the xaxis as dates.\n\nParameters:\n\ntzstr or datetime.tzinfo, default: rcParams[\"timezone\"] (default: 'UTC')The timezone used to create date labels.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_yticks",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_yticks(ticks, labels=None, *, minor=False, **kwargs)",
                "method text": "Set the yaxis' tick locations and optionally tick labels.\nIf necessary, the view limits of the Axis are expanded so that all\ngiven ticks are visible.\n\nParameters:\n\nticks1D array-likeArray of tick locations. The axis Locator is replaced by a\nFixedLocator.\nThe values may be either floats or in axis units.\nPass an empty list to remove all ticks:\nset_yticks([])\n\n\nSome tick formatters will not label arbitrary tick positions;\ne.g. log formatters only label decade ticks by default. In\nsuch a case you can set a formatter explicitly on the axis\nusing Axis.set_major_formatter or provide formatted\nlabels yourself.\n\nlabelslist of str, optionalTick labels for each location in ticks. labels must be of the same\nlength as ticks. If not set, the labels are generate using the axis\ntick Formatter.\n\nminorbool, default: FalseIf False, set the major ticks; if True, the minor ticks.\n\n**kwargsText properties for the labels. Using these is only allowed if\nyou pass labels. In other cases, please use tick_params.\n\n\n\n\nNotes\nThe mandatory expansion of the view limits is an intentional design\nchoice to prevent the surprise of a non-visible tick. If you need\nother limits, you should set the limits explicitly after setting the\nticks.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_yticks",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_yticks(*, minor=False)",
                "method text": "Return the yaxis' tick locations in data coordinates.\nThe locations are not clipped to the current axis limits and hence\nmay contain locations that are not visible in the output.\n\nParameters:\n\nminorbool, default: FalseTrue to return the minor tick directions,\nFalse to return the major tick directions.\n\n\n\nReturns:\n\narray of tick locations\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_yticklabels",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_yticklabels(labels, *, minor=False, fontdict=None, **kwargs)",
                "method text": "[Discouraged] Set the yaxis' tick labels with list of string labels.\n\nDiscouraged\nThe use of this method is discouraged, because of the dependency on\ntick positions. In most cases, you'll want to use\nAxes.set_[x/y/z]ticks(positions, labels) or Axes.set_yticks\ninstead.\nIf you are using this method, you should always fix the tick\npositions before, e.g. by using Axes.set_yticks or by explicitly\nsetting a FixedLocator. Otherwise, ticks are free to\nmove and the labels may end up in unexpected positions.\n\n\nParameters:\n\nlabelssequence of str or of TextsTexts for labeling each tick location in the sequence set by\nAxes.set_yticks; the number of labels must match the number of\nlocations.\n\nminorboolIf True, set minor ticks instead of major ticks.\n\nfontdictdict, optional\nDiscouraged\nThe use of fontdict is discouraged. Parameters should be passed as\nindividual keyword arguments or using dictionary-unpacking\nset_ticklabels(..., **fontdict).\n\nA dictionary controlling the appearance of the ticklabels.\nThe default fontdict is:\n{'fontsize': rcParams['axes.titlesize'],\n 'fontweight': rcParams['axes.titleweight'],\n 'verticalalignment': 'baseline',\n 'horizontalalignment': loc}\n\n\n\n**kwargsText properties.\n\nWarning\nThis only sets the properties of the current ticks.\nTicks are not guaranteed to be persistent. Various operations\ncan create, delete and modify the Tick instances. There is an\nimminent risk that these settings can get lost if you work on\nthe figure further (including also panning/zooming on a\ndisplayed figure).\nUse set_tick_params instead if possible.\n\n\n\n\nReturns:\n\nlist of TextsFor each tick, includes tick.label1 if it is visible, then\ntick.label2 if it is visible, in that order.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_yticklabels",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_yticklabels(minor=False, which=None)",
                "method text": "Get the yaxis' tick labels.\n\nParameters:\n\nminorboolWhether to return the minor or the major ticklabels.\n\nwhichNone, ('minor', 'major', 'both')Overrides minor.\nSelects which ticklabels to return\n\n\n\nReturns:\n\nlist of Text\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_ymajorticklabels",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_ymajorticklabels()",
                "method text": "Return the yaxis' major tick labels, as a list of Text.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_yminorticklabels",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_yminorticklabels()",
                "method text": "Return the yaxis' minor tick labels, as a list of Text.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_ygridlines",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_ygridlines()",
                "method text": "Return the yaxis' grid lines as a list of Line2Ds.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_yticklines",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_yticklines(minor=False)",
                "method text": "Return the yaxis' tick lines as a list of Line2Ds.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.yaxis_date",
    "class": {
        "class method": [
            {
                "method name": "Axes.yaxis_date(tz=None)",
                "method text": "Set up axis ticks and labels to treat data along the yaxis as dates.\n\nParameters:\n\ntzstr or datetime.tzinfo, default: rcParams[\"timezone\"] (default: 'UTC')The timezone used to create date labels.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.minorticks_off",
    "class": {
        "class method": [
            {
                "method name": "Axes.minorticks_off()",
                "method text": "Remove minor ticks from the Axes.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.minorticks_on",
    "class": {
        "class method": [
            {
                "method name": "Axes.minorticks_on()",
                "method text": "Display minor ticks on the Axes.\nDisplaying minor ticks may reduce performance; you may turn them off\nusing minorticks_off() if drawing speed is a problem.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.ticklabel_format",
    "class": {
        "class method": [
            {
                "method name": "Axes.ticklabel_format(*, axis='both', style='', scilimits=None, useOffset=None, useLocale=None, useMathText=None)",
                "method text": "Configure the ScalarFormatter used by default for linear Axes.\nIf a parameter is not set, the corresponding property of the formatter\nis left unchanged.\n\nParameters:\n\naxis{'x', 'y', 'both'}, default: 'both'The axis to configure. Only major ticks are affected.\n\nstyle{'sci', 'scientific', 'plain'}Whether to use scientific notation.\nThe formatter default is to use scientific notation.\n\nscilimitspair of ints (m, n)Scientific notation is used only for numbers outside the range\n10m to 10n (and only if the formatter is\nconfigured to use scientific notation at all). Use (0, 0) to\ninclude all numbers. Use (m, m) where m != 0 to fix the order of\nmagnitude to 10m.\nThe formatter default is rcParams[\"axes.formatter.limits\"] (default: [-5, 6]).\n\nuseOffsetbool or floatIf True, the offset is calculated as needed.\nIf False, no offset is used.\nIf a numeric value, it sets the offset.\nThe formatter default is rcParams[\"axes.formatter.useoffset\"] (default: True).\n\nuseLocaleboolWhether to format the number using the current locale or using the\nC (English) locale. This affects e.g. the decimal separator. The\nformatter default is rcParams[\"axes.formatter.use_locale\"] (default: False).\n\nuseMathTextboolRender the offset and scientific notation in mathtext.\nThe formatter default is rcParams[\"axes.formatter.use_mathtext\"] (default: False).\n\n\n\nRaises:\n\nAttributeErrorIf the current formatter is not a ScalarFormatter.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.tick_params",
    "class": {
        "class method": [
            {
                "method name": "Axes.tick_params(axis='both', **kwargs)",
                "method text": "Change the appearance of ticks, tick labels, and gridlines.\nTick properties that are not explicitly set using the keyword\narguments remain unchanged unless reset is True. For the current\nstyle settings, see Axis.get_tick_params.\n\nParameters:\n\naxis{'x', 'y', 'both'}, default: 'both'The axis to which the parameters are applied.\n\nwhich{'major', 'minor', 'both'}, default: 'major'The group of ticks to which the parameters are applied.\n\nresetbool, default: FalseWhether to reset the ticks to defaults before updating them.\n\n\n\nOther Parameters:\n\ndirection{'in', 'out', 'inout'}Puts ticks inside the Axes, outside the Axes, or both.\n\nlengthfloatTick length in points.\n\nwidthfloatTick width in points.\n\ncolorcolorTick color.\n\npadfloatDistance in points between tick and label.\n\nlabelsizefloat or strTick label font size in points or as a string (e.g., 'large').\n\nlabelcolorcolorTick label color.\n\nlabelfontfamilystrTick label font.\n\ncolorscolorTick color and label color.\n\nzorderfloatTick and label zorder.\n\nbottom, top, left, rightboolWhether to draw the respective ticks.\n\nlabelbottom, labeltop, labelleft, labelrightboolWhether to draw the respective tick labels.\n\nlabelrotationfloatTick label rotation\n\ngrid_colorcolorGridline color.\n\ngrid_alphafloatTransparency of gridlines: 0 (transparent) to 1 (opaque).\n\ngrid_linewidthfloatWidth of gridlines in points.\n\ngrid_linestylestrAny valid Line2D line style spec.\n\n\n\n\nExamples\nax.tick_params(direction='out', length=6, width=2, colors='r',\n               grid_color='r', grid_alpha=0.5)\n\n\nThis will make all major ticks be red, pointing out of the box,\nand with dimensions 6 points by 2 points. Tick labels will\nalso be red. Gridlines will be red and translucent.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.locator_params",
    "class": {
        "class method": [
            {
                "method name": "Axes.locator_params(axis='both', tight=None, **kwargs)",
                "method text": "Control behavior of major tick locators.\nBecause the locator is involved in autoscaling, autoscale_view\nis called automatically after the parameters are changed.\n\nParameters:\n\naxis{'both', 'x', 'y'}, default: 'both'The axis on which to operate. (For 3D Axes, axis can also be\nset to 'z', and 'both' refers to all three axes.)\n\ntightbool or None, optionalParameter passed to autoscale_view.\nDefault is None, for no change.\n\n\n\nOther Parameters:\n\n**kwargsRemaining keyword arguments are passed to directly to the\nset_params() method of the locator. Supported keywords depend\non the type of the locator. See for example\nset_params for the ticker.MaxNLocator\nused by default for linear.\n\n\n\n\nExamples\nWhen plotting small subplots, one might want to reduce the maximum\nnumber of ticks and use tight bounds, for example:\nax.locator_params(tight=True, nbins=4)\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.convert_xunits",
    "class": {
        "class method": [
            {
                "method name": "Axes.convert_xunits(x)",
                "method text": "Convert x using the unit type of the xaxis.\nIf the artist is not contained in an Axes or if the xaxis does not\nhave units, x itself is returned.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.convert_yunits",
    "class": {
        "class method": [
            {
                "method name": "Axes.convert_yunits(y)",
                "method text": "Convert y using the unit type of the yaxis.\nIf the artist is not contained in an Axes or if the yaxis does not\nhave units, y itself is returned.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.have_units",
    "class": {
        "class method": [
            {
                "method name": "Axes.have_units()",
                "method text": "Return whether units are set on any axis.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.add_artist",
    "class": {
        "class method": [
            {
                "method name": "Axes.add_artist(a)",
                "method text": "Add an Artist to the Axes; return the artist.\nUse add_artist only for artists for which there is no dedicated\n\"add\" method; and if necessary, use a method such as update_datalim\nto manually update the dataLim if the artist is to be included in\nautoscaling.\nIf no transform has been specified when creating the artist (e.g.\nartist.get_transform() == None) then the transform is set to\nax.transData.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.add_child_axes",
    "class": {
        "class method": [
            {
                "method name": "Axes.add_child_axes(ax)",
                "method text": "Add an AxesBase to the Axes' children; return the child Axes.\nThis is the lowlevel version. See axes.Axes.inset_axes.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.add_collection",
    "class": {
        "class method": [
            {
                "method name": "Axes.add_collection(collection, autolim=True)",
                "method text": "Add a Collection to the Axes; return the collection.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.add_container",
    "class": {
        "class method": [
            {
                "method name": "Axes.add_container(container)",
                "method text": "Add a Container to the Axes' containers; return the container.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.add_image",
    "class": {
        "class method": [
            {
                "method name": "Axes.add_image(image)",
                "method text": "Add an AxesImage to the Axes; return the image.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.add_line",
    "class": {
        "class method": [
            {
                "method name": "Axes.add_line(line)",
                "method text": "Add a Line2D to the Axes; return the line.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.add_patch",
    "class": {
        "class method": [
            {
                "method name": "Axes.add_patch(p)",
                "method text": "Add a Patch to the Axes; return the patch.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.add_table",
    "class": {
        "class method": [
            {
                "method name": "Axes.add_table(tab)",
                "method text": "Add a Table to the Axes; return the table.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.twinx",
    "class": {
        "class method": [
            {
                "method name": "Axes.twinx()",
                "method text": "Create a twin Axes sharing the xaxis.\nCreate a new Axes with an invisible x-axis and an independent\ny-axis positioned opposite to the original one (i.e. at right). The\nx-axis autoscale setting will be inherited from the original\nAxes. To ensure that the tick marks of both y-axes align, see\nLinearLocator.\n\nReturns:\n\nAxesThe newly created Axes instance\n\n\n\n\nNotes\nFor those who are 'picking' artists while using twinx, pick\nevents are only called for the artists in the top-most Axes.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.twiny",
    "class": {
        "class method": [
            {
                "method name": "Axes.twiny()",
                "method text": "Create a twin Axes sharing the yaxis.\nCreate a new Axes with an invisible y-axis and an independent\nx-axis positioned opposite to the original one (i.e. at top). The\ny-axis autoscale setting will be inherited from the original Axes.\nTo ensure that the tick marks of both x-axes align, see\nLinearLocator.\n\nReturns:\n\nAxesThe newly created Axes instance\n\n\n\n\nNotes\nFor those who are 'picking' artists while using twiny, pick\nevents are only called for the artists in the top-most Axes.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.sharex",
    "class": {
        "class method": [
            {
                "method name": "Axes.sharex(other)",
                "method text": "Share the x-axis with other.\nThis is equivalent to passing sharex=other when constructing the\nAxes, and cannot be used if the x-axis is already being shared with\nanother Axes.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.sharey",
    "class": {
        "class method": [
            {
                "method name": "Axes.sharey(other)",
                "method text": "Share the y-axis with other.\nThis is equivalent to passing sharey=other when constructing the\nAxes, and cannot be used if the y-axis is already being shared with\nanother Axes.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_shared_x_axes",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_shared_x_axes()",
                "method text": "Return an immutable view on the shared x-axes Grouper.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_shared_y_axes",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_shared_y_axes()",
                "method text": "Return an immutable view on the shared y-axes Grouper.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_anchor",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_anchor()",
                "method text": "Get the anchor location.\n\nSee also\n\nmatplotlib.axes.Axes.set_anchorfor a description of the anchor.\n\nmatplotlib.axes.Axes.set_aspectfor a description of aspect handling.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_anchor",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_anchor(anchor, share=False)",
                "method text": "Define the anchor location.\nThe actual drawing area (active position) of the Axes may be smaller\nthan the Bbox (original position) when a fixed aspect is required. The\nanchor defines where the drawing area will be located within the\navailable space.\n\nParameters:\n\nanchor(float, float) or {'C', 'SW', 'S', 'SE', 'E', 'NE', ...}Either an (x, y) pair of relative coordinates (0 is left or\nbottom, 1 is right or top), 'C' (center), or a cardinal direction\n('SW', southwest, is bottom left, etc.). str inputs are shorthands\nfor (x, y) coordinates, as shown in the following diagram:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 'NW' (0.0, 1.0) \u2502 'N' (0.5, 1.0)  \u2502 'NE' (1.0, 1.0) \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 'W'  (0.0, 0.5) \u2502 'C' (0.5, 0.5)  \u2502 'E'  (1.0, 0.5) \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 'SW' (0.0, 0.0) \u2502 'S' (0.5, 0.0)  \u2502 'SE' (1.0, 0.0) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\n\nsharebool, default: FalseIf True, apply the settings to all shared Axes.\n\n\n\n\n\nSee also\n\nmatplotlib.axes.Axes.set_aspectfor a description of aspect handling.\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_axes_locator",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_axes_locator()",
                "method text": "Return the axes_locator.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_axes_locator",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_axes_locator(locator)",
                "method text": "Set the Axes locator.\n\nParameters:\n\nlocatorCallable[[Axes, Renderer], Bbox]\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_subplotspec",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_subplotspec()",
                "method text": "Return the SubplotSpec associated with the subplot, or None.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_subplotspec",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_subplotspec(subplotspec)",
                "method text": "Set the SubplotSpec. associated with the subplot.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.reset_position",
    "class": {
        "class method": [
            {
                "method name": "Axes.reset_position()",
                "method text": "Reset the active position to the original position.\nThis undoes changes to the active position (as defined in\nset_position) which may have been performed to satisfy fixed-aspect\nconstraints.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_position",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_position(original=False)",
                "method text": "Return the position of the Axes within the figure as a Bbox.\n\nParameters:\n\noriginalboolIf True, return the original position. Otherwise, return the\nactive position. For an explanation of the positions see\nset_position.\n\n\n\nReturns:\n\nBbox\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_position",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_position(pos, which='both')",
                "method text": "Set the Axes position.\nAxes have two position attributes. The 'original' position is the\nposition allocated for the Axes. The 'active' position is the\nposition the Axes is actually drawn at. These positions are usually\nthe same unless a fixed aspect is set to the Axes. See\nAxes.set_aspect for details.\n\nParameters:\n\npos[left, bottom, width, height] or BboxThe new position of the Axes in Figure coordinates.\n\nwhich{'both', 'active', 'original'}, default: 'both'Determines which position variables to change.\n\n\n\n\n\nSee also\n\nmatplotlib.transforms.Bbox.from_bounds\nmatplotlib.transforms.Bbox.from_extents\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.stale",
    "class": {
        "class property": [
            {
                "property name": "property Axes.stale#",
                "property text": "Whether the artist is 'stale' and needs to be re-drawn for the output\nto match the internal state of the artist.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.pchanged",
    "class": {
        "class method": [
            {
                "method name": "Axes.pchanged()",
                "method text": "Call all of the registered callbacks.\nThis function is triggered internally when a property is changed.\n\nSee also\n\nadd_callback\nremove_callback\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.add_callback",
    "class": {
        "class method": [
            {
                "method name": "Axes.add_callback(func)",
                "method text": "Add a callback function that will be called whenever one of the\nArtist's properties changes.\n\nParameters:\n\nfunccallableThe callback function. It must have the signature:\ndef func(artist: Artist) -> Any\n\n\nwhere artist is the calling Artist. Return values may exist\nbut are ignored.\n\n\n\nReturns:\n\nintThe observer id associated with the callback. This id can be\nused for removing the callback with remove_callback later.\n\n\n\n\n\nSee also\n\nremove_callback\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.remove_callback",
    "class": {
        "class method": [
            {
                "method name": "Axes.remove_callback(oid)",
                "method text": "Remove a callback based on its observer id.\n\nSee also\n\nadd_callback\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.can_pan",
    "class": {
        "class method": [
            {
                "method name": "Axes.can_pan()",
                "method text": "Return whether this Axes supports any pan/zoom button functionality.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.can_zoom",
    "class": {
        "class method": [
            {
                "method name": "Axes.can_zoom()",
                "method text": "Return whether this Axes supports the zoom box button functionality.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_navigate",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_navigate()",
                "method text": "Get whether the Axes responds to navigation commands.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_navigate",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_navigate(b)",
                "method text": "Set whether the Axes responds to navigation toolbar commands.\n\nParameters:\n\nbbool\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_navigate_mode",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_navigate_mode()",
                "method text": "Get the navigation toolbar button status: 'PAN', 'ZOOM', or None.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_navigate_mode",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_navigate_mode(b)",
                "method text": "Set the navigation toolbar button status.\n\nWarning\nThis is not a user-API function.\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.start_pan",
    "class": {
        "class method": [
            {
                "method name": "Axes.start_pan(x, y, button)",
                "method text": "Called when a pan operation has started.\n\nParameters:\n\nx, yfloatThe mouse coordinates in display coords.\n\nbuttonMouseButtonThe pressed mouse button.\n\n\n\n\nNotes\nThis is intended to be overridden by new projection types.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.drag_pan",
    "class": {
        "class method": [
            {
                "method name": "Axes.drag_pan(button, key, x, y)",
                "method text": "Called when the mouse moves during a pan operation.\n\nParameters:\n\nbuttonMouseButtonThe pressed mouse button.\n\nkeystr or NoneThe pressed key, if any.\n\nx, yfloatThe mouse coordinates in display coords.\n\n\n\n\nNotes\nThis is intended to be overridden by new projection types.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.end_pan",
    "class": {
        "class method": [
            {
                "method name": "Axes.end_pan()",
                "method text": "Called when a pan operation completes (when the mouse button is up.)\nNotes\nThis is intended to be overridden by new projection types.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.format_coord",
    "class": {
        "class method": [
            {
                "method name": "Axes.format_coord(x, y)",
                "method text": "Return a format string formatting the x, y coordinates.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.format_cursor_data",
    "class": {
        "class method": [
            {
                "method name": "Axes.format_cursor_data(data)",
                "method text": "Return a string representation of data.\n\nNote\nThis method is intended to be overridden by artist subclasses.\nAs an end-user of Matplotlib you will most likely not call this\nmethod yourself.\n\nThe default implementation converts ints and floats and arrays of ints\nand floats into a comma-separated string enclosed in square brackets,\nunless the artist has an associated colorbar, in which case scalar\nvalues are formatted using the colorbar's formatter.\n\nSee also\n\nget_cursor_data\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.format_xdata",
    "class": {
        "class method": [
            {
                "method name": "Axes.format_xdata(x)",
                "method text": "Return x formatted as an x-value.\nThis function will use the fmt_xdata attribute if it is not None,\nelse will fall back on the xaxis major formatter.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.format_ydata",
    "class": {
        "class method": [
            {
                "method name": "Axes.format_ydata(y)",
                "method text": "Return y formatted as a y-value.\nThis function will use the fmt_ydata attribute if it is not None,\nelse will fall back on the yaxis major formatter.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.mouseover",
    "class": {
        "class property": [
            {
                "property name": "property Axes.mouseover#",
                "property text": "Return whether this artist is queried for custom context information\nwhen the mouse cursor moves over it.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.in_axes",
    "class": {
        "class method": [
            {
                "method name": "Axes.in_axes(mouseevent)",
                "method text": "Return whether the given event (in display coords) is in the Axes.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.contains",
    "class": {
        "class method": [
            {
                "method name": "Axes.contains(mouseevent)",
                "method text": "Test whether the artist contains the mouse event.\n\nParameters:\n\nmouseeventMouseEvent\n\n\nReturns:\n\ncontainsboolWhether any values are within the radius.\n\ndetailsdictAn artist-specific dictionary of details of the event context,\nsuch as which points are contained in the pick radius. See the\nindividual Artist subclasses for details.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.contains_point",
    "class": {
        "class method": [
            {
                "method name": "Axes.contains_point(point)",
                "method text": "Return whether point (pair of pixel coordinates) is inside the Axes\npatch.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_cursor_data",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_cursor_data(event)",
                "method text": "Return the cursor data for a given event.\n\nNote\nThis method is intended to be overridden by artist subclasses.\nAs an end-user of Matplotlib you will most likely not call this\nmethod yourself.\n\nCursor data can be used by Artists to provide additional context\ninformation for a given event. The default implementation just returns\nNone.\nSubclasses can override the method and return arbitrary data. However,\nwhen doing so, they must ensure that format_cursor_data can convert\nthe data to a string representation.\nThe only current use case is displaying the z-value of an AxesImage\nin the status bar of a plot window, while moving the mouse.\n\nParameters:\n\neventMouseEvent\n\n\n\n\nSee also\n\nformat_cursor_data\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_children",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_children()",
                "method text": "Return a list of the child Artists of this Artist.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_images",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_images()",
                "method text": "Return a list of AxesImages contained by the Axes.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_lines",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_lines()",
                "method text": "Return a list of lines contained by the Axes.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.findobj",
    "class": {
        "class method": [
            {
                "method name": "Axes.findobj(match=None, include_self=True)",
                "method text": "Find artist objects.\nRecursively find all Artist instances contained in the artist.\n\nParameters:\n\nmatchA filter criterion for the matches. This can be\n\nNone: Return all objects contained in artist.\nA function with signature def match(artist: Artist) -> bool.\nThe result will only contain artists for which the function\nreturns True.\nA class instance: e.g., Line2D. The result will only contain\nartists of this class or its subclasses (isinstance check).\n\n\ninclude_selfboolInclude self in the list to be checked for a match.\n\n\n\nReturns:\n\nlist of Artist\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.draw",
    "class": {
        "class method": [
            {
                "method name": "Axes.draw(renderer)",
                "method text": "Draw the Artist (and its children) using the given renderer.\nThis has no effect if the artist is not visible (Artist.get_visible\nreturns False).\n\nParameters:\n\nrendererRendererBase subclass.\n\n\n\nNotes\nThis method is overridden in the Artist subclasses.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.draw_artist",
    "class": {
        "class method": [
            {
                "method name": "Axes.draw_artist(a)",
                "method text": "Efficiently redraw a single artist.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.redraw_in_frame",
    "class": {
        "class method": [
            {
                "method name": "Axes.redraw_in_frame()",
                "method text": "Efficiently redraw Axes data, but not axis ticks, labels, etc.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_rasterization_zorder",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_rasterization_zorder()",
                "method text": "Return the zorder value below which artists will be rasterized.\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.set_rasterization_zorder",
    "class": {
        "class method": [
            {
                "method name": "Axes.set_rasterization_zorder(z)",
                "method text": "Set the zorder threshold for rasterization for vector graphics output.\nAll artists with a zorder below the given value will be rasterized if\nthey support rasterization.\nThis setting is ignored for pixel-based output.\nSee also Rasterization for vector graphics.\n\nParameters:\n\nzfloat or NoneThe zorder below which artists are rasterized.\nIf None rasterization based on zorder is deactivated.\n\n\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
{
    "module name": "matplotlib.axes.Axes.get_window_extent",
    "class": {
        "class method": [
            {
                "method name": "Axes.get_window_extent(renderer=None)",
                "method text": "Return the Axes bounding box in display space.\nThis bounding box does not include the spines, ticks, ticklabels,\nor other labels. For a bounding box including these elements use\nget_tightbbox.\n\nSee also\n\nmatplotlib.axes.Axes.get_tightbbox\nmatplotlib.axis.Axis.get_tightbbox\nmatplotlib.spines.Spine.get_window_extent\n\n\n"
            }
        ]
    },
    "function": [],
    "exception": []
},
